// Code generated by entc, DO NOT EDIT.

package studentprofile

import (
	"windwalker/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// Caste applies equality check predicate on the "caste" field. It's identical to CasteEQ.
func Caste(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCaste), v))
	})
}

// Nationality applies equality check predicate on the "nationality" field. It's identical to NationalityEQ.
func Nationality(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNationality), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGender), v))
	})
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGender), v))
	})
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGender), v))
	})
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGender), v))
	})
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGender), v))
	})
}

// CasteEQ applies the EQ predicate on the "caste" field.
func CasteEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCaste), v))
	})
}

// CasteNEQ applies the NEQ predicate on the "caste" field.
func CasteNEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCaste), v))
	})
}

// CasteIn applies the In predicate on the "caste" field.
func CasteIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCaste), v...))
	})
}

// CasteNotIn applies the NotIn predicate on the "caste" field.
func CasteNotIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCaste), v...))
	})
}

// CasteGT applies the GT predicate on the "caste" field.
func CasteGT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCaste), v))
	})
}

// CasteGTE applies the GTE predicate on the "caste" field.
func CasteGTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCaste), v))
	})
}

// CasteLT applies the LT predicate on the "caste" field.
func CasteLT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCaste), v))
	})
}

// CasteLTE applies the LTE predicate on the "caste" field.
func CasteLTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCaste), v))
	})
}

// CasteContains applies the Contains predicate on the "caste" field.
func CasteContains(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCaste), v))
	})
}

// CasteHasPrefix applies the HasPrefix predicate on the "caste" field.
func CasteHasPrefix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCaste), v))
	})
}

// CasteHasSuffix applies the HasSuffix predicate on the "caste" field.
func CasteHasSuffix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCaste), v))
	})
}

// CasteEqualFold applies the EqualFold predicate on the "caste" field.
func CasteEqualFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCaste), v))
	})
}

// CasteContainsFold applies the ContainsFold predicate on the "caste" field.
func CasteContainsFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCaste), v))
	})
}

// NationalityEQ applies the EQ predicate on the "nationality" field.
func NationalityEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNationality), v))
	})
}

// NationalityNEQ applies the NEQ predicate on the "nationality" field.
func NationalityNEQ(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNationality), v))
	})
}

// NationalityIn applies the In predicate on the "nationality" field.
func NationalityIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNationality), v...))
	})
}

// NationalityNotIn applies the NotIn predicate on the "nationality" field.
func NationalityNotIn(vs ...string) predicate.StudentProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNationality), v...))
	})
}

// NationalityGT applies the GT predicate on the "nationality" field.
func NationalityGT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNationality), v))
	})
}

// NationalityGTE applies the GTE predicate on the "nationality" field.
func NationalityGTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNationality), v))
	})
}

// NationalityLT applies the LT predicate on the "nationality" field.
func NationalityLT(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNationality), v))
	})
}

// NationalityLTE applies the LTE predicate on the "nationality" field.
func NationalityLTE(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNationality), v))
	})
}

// NationalityContains applies the Contains predicate on the "nationality" field.
func NationalityContains(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNationality), v))
	})
}

// NationalityHasPrefix applies the HasPrefix predicate on the "nationality" field.
func NationalityHasPrefix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNationality), v))
	})
}

// NationalityHasSuffix applies the HasSuffix predicate on the "nationality" field.
func NationalityHasSuffix(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNationality), v))
	})
}

// NationalityEqualFold applies the EqualFold predicate on the "nationality" field.
func NationalityEqualFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNationality), v))
	})
}

// NationalityContainsFold applies the ContainsFold predicate on the "nationality" field.
func NationalityContainsFold(v string) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNationality), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAcademicProfile applies the HasEdge predicate on the "academic_profile" edge.
func HasAcademicProfile() predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AcademicProfileTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AcademicProfileTable, AcademicProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAcademicProfileWith applies the HasEdge predicate on the "academic_profile" edge with a given conditions (other predicates).
func HasAcademicProfileWith(preds ...predicate.StudentAcademicProfile) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AcademicProfileInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AcademicProfileTable, AcademicProfileColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkProfile applies the HasEdge predicate on the "work_profile" edge.
func HasWorkProfile() predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkProfileTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkProfileTable, WorkProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkProfileWith applies the HasEdge predicate on the "work_profile" edge with a given conditions (other predicates).
func HasWorkProfileWith(preds ...predicate.StudentWorkProfile) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkProfileInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkProfileTable, WorkProfileColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StudentProfile) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StudentProfile) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StudentProfile) predicate.StudentProfile {
	return predicate.StudentProfile(func(s *sql.Selector) {
		p(s.Not())
	})
}
