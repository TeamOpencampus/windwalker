// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"windwalker/ent/collegeprofile"
	"windwalker/ent/company"
	"windwalker/ent/jobpost"
	"windwalker/ent/predicate"
	"windwalker/ent/studentacademicprofile"
	"windwalker/ent/studentprofile"
	"windwalker/ent/studentworkprofile"
	"windwalker/ent/user"

	"github.com/rs/xid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCollegeProfile         = "CollegeProfile"
	TypeCompany                = "Company"
	TypeJobPost                = "JobPost"
	TypeStudentAcademicProfile = "StudentAcademicProfile"
	TypeStudentProfile         = "StudentProfile"
	TypeStudentWorkProfile     = "StudentWorkProfile"
	TypeUser                   = "User"
)

// CollegeProfileMutation represents an operation that mutates the CollegeProfile nodes in the graph.
type CollegeProfileMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	phone         *string
	address       *string
	_type         *string
	clearedFields map[string]struct{}
	user          *xid.ID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*CollegeProfile, error)
	predicates    []predicate.CollegeProfile
}

var _ ent.Mutation = (*CollegeProfileMutation)(nil)

// collegeprofileOption allows management of the mutation configuration using functional options.
type collegeprofileOption func(*CollegeProfileMutation)

// newCollegeProfileMutation creates new mutation for the CollegeProfile entity.
func newCollegeProfileMutation(c config, op Op, opts ...collegeprofileOption) *CollegeProfileMutation {
	m := &CollegeProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeCollegeProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCollegeProfileID sets the ID field of the mutation.
func withCollegeProfileID(id string) collegeprofileOption {
	return func(m *CollegeProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *CollegeProfile
		)
		m.oldValue = func(ctx context.Context) (*CollegeProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CollegeProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCollegeProfile sets the old CollegeProfile of the mutation.
func withCollegeProfile(node *CollegeProfile) collegeprofileOption {
	return func(m *CollegeProfileMutation) {
		m.oldValue = func(context.Context) (*CollegeProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CollegeProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CollegeProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CollegeProfile entities.
func (m *CollegeProfileMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CollegeProfileMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CollegeProfileMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CollegeProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CollegeProfileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CollegeProfileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CollegeProfile entity.
// If the CollegeProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollegeProfileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CollegeProfileMutation) ResetName() {
	m.name = nil
}

// SetPhone sets the "phone" field.
func (m *CollegeProfileMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *CollegeProfileMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the CollegeProfile entity.
// If the CollegeProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollegeProfileMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *CollegeProfileMutation) ResetPhone() {
	m.phone = nil
}

// SetAddress sets the "address" field.
func (m *CollegeProfileMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *CollegeProfileMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the CollegeProfile entity.
// If the CollegeProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollegeProfileMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *CollegeProfileMutation) ResetAddress() {
	m.address = nil
}

// SetType sets the "type" field.
func (m *CollegeProfileMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *CollegeProfileMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the CollegeProfile entity.
// If the CollegeProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollegeProfileMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CollegeProfileMutation) ResetType() {
	m._type = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *CollegeProfileMutation) SetUserID(id xid.ID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *CollegeProfileMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CollegeProfileMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *CollegeProfileMutation) UserID() (id xid.ID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CollegeProfileMutation) UserIDs() (ids []xid.ID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CollegeProfileMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the CollegeProfileMutation builder.
func (m *CollegeProfileMutation) Where(ps ...predicate.CollegeProfile) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CollegeProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CollegeProfile).
func (m *CollegeProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CollegeProfileMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, collegeprofile.FieldName)
	}
	if m.phone != nil {
		fields = append(fields, collegeprofile.FieldPhone)
	}
	if m.address != nil {
		fields = append(fields, collegeprofile.FieldAddress)
	}
	if m._type != nil {
		fields = append(fields, collegeprofile.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CollegeProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case collegeprofile.FieldName:
		return m.Name()
	case collegeprofile.FieldPhone:
		return m.Phone()
	case collegeprofile.FieldAddress:
		return m.Address()
	case collegeprofile.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CollegeProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case collegeprofile.FieldName:
		return m.OldName(ctx)
	case collegeprofile.FieldPhone:
		return m.OldPhone(ctx)
	case collegeprofile.FieldAddress:
		return m.OldAddress(ctx)
	case collegeprofile.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown CollegeProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollegeProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case collegeprofile.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case collegeprofile.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case collegeprofile.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case collegeprofile.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown CollegeProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CollegeProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CollegeProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollegeProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CollegeProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CollegeProfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CollegeProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CollegeProfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CollegeProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CollegeProfileMutation) ResetField(name string) error {
	switch name {
	case collegeprofile.FieldName:
		m.ResetName()
		return nil
	case collegeprofile.FieldPhone:
		m.ResetPhone()
		return nil
	case collegeprofile.FieldAddress:
		m.ResetAddress()
		return nil
	case collegeprofile.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown CollegeProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CollegeProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, collegeprofile.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CollegeProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case collegeprofile.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CollegeProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CollegeProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CollegeProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, collegeprofile.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CollegeProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case collegeprofile.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CollegeProfileMutation) ClearEdge(name string) error {
	switch name {
	case collegeprofile.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown CollegeProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CollegeProfileMutation) ResetEdge(name string) error {
	switch name {
	case collegeprofile.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown CollegeProfile edge %s", name)
}

// CompanyMutation represents an operation that mutates the Company nodes in the graph.
type CompanyMutation struct {
	config
	op                   Op
	typ                  string
	id                   *xid.ID
	company_name         *string
	contact_person_name  *string
	contact_person_email *string
	contact_person_phone *string
	clearedFields        map[string]struct{}
	user                 *xid.ID
	cleareduser          bool
	posts                map[xid.ID]struct{}
	removedposts         map[xid.ID]struct{}
	clearedposts         bool
	done                 bool
	oldValue             func(context.Context) (*Company, error)
	predicates           []predicate.Company
}

var _ ent.Mutation = (*CompanyMutation)(nil)

// companyOption allows management of the mutation configuration using functional options.
type companyOption func(*CompanyMutation)

// newCompanyMutation creates new mutation for the Company entity.
func newCompanyMutation(c config, op Op, opts ...companyOption) *CompanyMutation {
	m := &CompanyMutation{
		config:        c,
		op:            op,
		typ:           TypeCompany,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompanyID sets the ID field of the mutation.
func withCompanyID(id xid.ID) companyOption {
	return func(m *CompanyMutation) {
		var (
			err   error
			once  sync.Once
			value *Company
		)
		m.oldValue = func(ctx context.Context) (*Company, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Company.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompany sets the old Company of the mutation.
func withCompany(node *Company) companyOption {
	return func(m *CompanyMutation) {
		m.oldValue = func(context.Context) (*Company, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompanyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompanyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Company entities.
func (m *CompanyMutation) SetID(id xid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompanyMutation) ID() (id xid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CompanyMutation) IDs(ctx context.Context) ([]xid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []xid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Company.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCompanyName sets the "company_name" field.
func (m *CompanyMutation) SetCompanyName(s string) {
	m.company_name = &s
}

// CompanyName returns the value of the "company_name" field in the mutation.
func (m *CompanyMutation) CompanyName() (r string, exists bool) {
	v := m.company_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCompanyName returns the old "company_name" field's value of the Company entity.
// If the Company object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompanyMutation) OldCompanyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompanyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompanyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompanyName: %w", err)
	}
	return oldValue.CompanyName, nil
}

// ResetCompanyName resets all changes to the "company_name" field.
func (m *CompanyMutation) ResetCompanyName() {
	m.company_name = nil
}

// SetContactPersonName sets the "contact_person_name" field.
func (m *CompanyMutation) SetContactPersonName(s string) {
	m.contact_person_name = &s
}

// ContactPersonName returns the value of the "contact_person_name" field in the mutation.
func (m *CompanyMutation) ContactPersonName() (r string, exists bool) {
	v := m.contact_person_name
	if v == nil {
		return
	}
	return *v, true
}

// OldContactPersonName returns the old "contact_person_name" field's value of the Company entity.
// If the Company object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompanyMutation) OldContactPersonName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactPersonName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactPersonName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactPersonName: %w", err)
	}
	return oldValue.ContactPersonName, nil
}

// ResetContactPersonName resets all changes to the "contact_person_name" field.
func (m *CompanyMutation) ResetContactPersonName() {
	m.contact_person_name = nil
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (m *CompanyMutation) SetContactPersonEmail(s string) {
	m.contact_person_email = &s
}

// ContactPersonEmail returns the value of the "contact_person_email" field in the mutation.
func (m *CompanyMutation) ContactPersonEmail() (r string, exists bool) {
	v := m.contact_person_email
	if v == nil {
		return
	}
	return *v, true
}

// OldContactPersonEmail returns the old "contact_person_email" field's value of the Company entity.
// If the Company object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompanyMutation) OldContactPersonEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactPersonEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactPersonEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactPersonEmail: %w", err)
	}
	return oldValue.ContactPersonEmail, nil
}

// ResetContactPersonEmail resets all changes to the "contact_person_email" field.
func (m *CompanyMutation) ResetContactPersonEmail() {
	m.contact_person_email = nil
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (m *CompanyMutation) SetContactPersonPhone(s string) {
	m.contact_person_phone = &s
}

// ContactPersonPhone returns the value of the "contact_person_phone" field in the mutation.
func (m *CompanyMutation) ContactPersonPhone() (r string, exists bool) {
	v := m.contact_person_phone
	if v == nil {
		return
	}
	return *v, true
}

// OldContactPersonPhone returns the old "contact_person_phone" field's value of the Company entity.
// If the Company object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompanyMutation) OldContactPersonPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactPersonPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactPersonPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactPersonPhone: %w", err)
	}
	return oldValue.ContactPersonPhone, nil
}

// ResetContactPersonPhone resets all changes to the "contact_person_phone" field.
func (m *CompanyMutation) ResetContactPersonPhone() {
	m.contact_person_phone = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *CompanyMutation) SetUserID(id xid.ID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *CompanyMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CompanyMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *CompanyMutation) UserID() (id xid.ID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CompanyMutation) UserIDs() (ids []xid.ID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CompanyMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddPostIDs adds the "posts" edge to the JobPost entity by ids.
func (m *CompanyMutation) AddPostIDs(ids ...xid.ID) {
	if m.posts == nil {
		m.posts = make(map[xid.ID]struct{})
	}
	for i := range ids {
		m.posts[ids[i]] = struct{}{}
	}
}

// ClearPosts clears the "posts" edge to the JobPost entity.
func (m *CompanyMutation) ClearPosts() {
	m.clearedposts = true
}

// PostsCleared reports if the "posts" edge to the JobPost entity was cleared.
func (m *CompanyMutation) PostsCleared() bool {
	return m.clearedposts
}

// RemovePostIDs removes the "posts" edge to the JobPost entity by IDs.
func (m *CompanyMutation) RemovePostIDs(ids ...xid.ID) {
	if m.removedposts == nil {
		m.removedposts = make(map[xid.ID]struct{})
	}
	for i := range ids {
		delete(m.posts, ids[i])
		m.removedposts[ids[i]] = struct{}{}
	}
}

// RemovedPosts returns the removed IDs of the "posts" edge to the JobPost entity.
func (m *CompanyMutation) RemovedPostsIDs() (ids []xid.ID) {
	for id := range m.removedposts {
		ids = append(ids, id)
	}
	return
}

// PostsIDs returns the "posts" edge IDs in the mutation.
func (m *CompanyMutation) PostsIDs() (ids []xid.ID) {
	for id := range m.posts {
		ids = append(ids, id)
	}
	return
}

// ResetPosts resets all changes to the "posts" edge.
func (m *CompanyMutation) ResetPosts() {
	m.posts = nil
	m.clearedposts = false
	m.removedposts = nil
}

// Where appends a list predicates to the CompanyMutation builder.
func (m *CompanyMutation) Where(ps ...predicate.Company) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CompanyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Company).
func (m *CompanyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompanyMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.company_name != nil {
		fields = append(fields, company.FieldCompanyName)
	}
	if m.contact_person_name != nil {
		fields = append(fields, company.FieldContactPersonName)
	}
	if m.contact_person_email != nil {
		fields = append(fields, company.FieldContactPersonEmail)
	}
	if m.contact_person_phone != nil {
		fields = append(fields, company.FieldContactPersonPhone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompanyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case company.FieldCompanyName:
		return m.CompanyName()
	case company.FieldContactPersonName:
		return m.ContactPersonName()
	case company.FieldContactPersonEmail:
		return m.ContactPersonEmail()
	case company.FieldContactPersonPhone:
		return m.ContactPersonPhone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompanyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case company.FieldCompanyName:
		return m.OldCompanyName(ctx)
	case company.FieldContactPersonName:
		return m.OldContactPersonName(ctx)
	case company.FieldContactPersonEmail:
		return m.OldContactPersonEmail(ctx)
	case company.FieldContactPersonPhone:
		return m.OldContactPersonPhone(ctx)
	}
	return nil, fmt.Errorf("unknown Company field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompanyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case company.FieldCompanyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompanyName(v)
		return nil
	case company.FieldContactPersonName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactPersonName(v)
		return nil
	case company.FieldContactPersonEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactPersonEmail(v)
		return nil
	case company.FieldContactPersonPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactPersonPhone(v)
		return nil
	}
	return fmt.Errorf("unknown Company field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompanyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompanyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompanyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Company numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompanyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompanyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompanyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Company nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompanyMutation) ResetField(name string) error {
	switch name {
	case company.FieldCompanyName:
		m.ResetCompanyName()
		return nil
	case company.FieldContactPersonName:
		m.ResetContactPersonName()
		return nil
	case company.FieldContactPersonEmail:
		m.ResetContactPersonEmail()
		return nil
	case company.FieldContactPersonPhone:
		m.ResetContactPersonPhone()
		return nil
	}
	return fmt.Errorf("unknown Company field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompanyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, company.EdgeUser)
	}
	if m.posts != nil {
		edges = append(edges, company.EdgePosts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompanyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case company.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case company.EdgePosts:
		ids := make([]ent.Value, 0, len(m.posts))
		for id := range m.posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompanyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedposts != nil {
		edges = append(edges, company.EdgePosts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompanyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case company.EdgePosts:
		ids := make([]ent.Value, 0, len(m.removedposts))
		for id := range m.removedposts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompanyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, company.EdgeUser)
	}
	if m.clearedposts {
		edges = append(edges, company.EdgePosts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompanyMutation) EdgeCleared(name string) bool {
	switch name {
	case company.EdgeUser:
		return m.cleareduser
	case company.EdgePosts:
		return m.clearedposts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompanyMutation) ClearEdge(name string) error {
	switch name {
	case company.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Company unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompanyMutation) ResetEdge(name string) error {
	switch name {
	case company.EdgeUser:
		m.ResetUser()
		return nil
	case company.EdgePosts:
		m.ResetPosts()
		return nil
	}
	return fmt.Errorf("unknown Company edge %s", name)
}

// JobPostMutation represents an operation that mutates the JobPost nodes in the graph.
type JobPostMutation struct {
	config
	op                Op
	typ               string
	id                *xid.ID
	position          *string
	location          *string
	salary            *string
	description       *string
	tags              *[]string
	created_on        *time.Time
	clearedFields     map[string]struct{}
	user              *xid.ID
	cleareduser       bool
	company           *xid.ID
	clearedcompany    bool
	candidates        map[xid.ID]struct{}
	removedcandidates map[xid.ID]struct{}
	clearedcandidates bool
	done              bool
	oldValue          func(context.Context) (*JobPost, error)
	predicates        []predicate.JobPost
}

var _ ent.Mutation = (*JobPostMutation)(nil)

// jobpostOption allows management of the mutation configuration using functional options.
type jobpostOption func(*JobPostMutation)

// newJobPostMutation creates new mutation for the JobPost entity.
func newJobPostMutation(c config, op Op, opts ...jobpostOption) *JobPostMutation {
	m := &JobPostMutation{
		config:        c,
		op:            op,
		typ:           TypeJobPost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJobPostID sets the ID field of the mutation.
func withJobPostID(id xid.ID) jobpostOption {
	return func(m *JobPostMutation) {
		var (
			err   error
			once  sync.Once
			value *JobPost
		)
		m.oldValue = func(ctx context.Context) (*JobPost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().JobPost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJobPost sets the old JobPost of the mutation.
func withJobPost(node *JobPost) jobpostOption {
	return func(m *JobPostMutation) {
		m.oldValue = func(context.Context) (*JobPost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JobPostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JobPostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of JobPost entities.
func (m *JobPostMutation) SetID(id xid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JobPostMutation) ID() (id xid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *JobPostMutation) IDs(ctx context.Context) ([]xid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []xid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().JobPost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPosition sets the "position" field.
func (m *JobPostMutation) SetPosition(s string) {
	m.position = &s
}

// Position returns the value of the "position" field in the mutation.
func (m *JobPostMutation) Position() (r string, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the JobPost entity.
// If the JobPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobPostMutation) OldPosition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ResetPosition resets all changes to the "position" field.
func (m *JobPostMutation) ResetPosition() {
	m.position = nil
}

// SetLocation sets the "location" field.
func (m *JobPostMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *JobPostMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the JobPost entity.
// If the JobPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobPostMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *JobPostMutation) ResetLocation() {
	m.location = nil
}

// SetSalary sets the "salary" field.
func (m *JobPostMutation) SetSalary(s string) {
	m.salary = &s
}

// Salary returns the value of the "salary" field in the mutation.
func (m *JobPostMutation) Salary() (r string, exists bool) {
	v := m.salary
	if v == nil {
		return
	}
	return *v, true
}

// OldSalary returns the old "salary" field's value of the JobPost entity.
// If the JobPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobPostMutation) OldSalary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalary: %w", err)
	}
	return oldValue.Salary, nil
}

// ResetSalary resets all changes to the "salary" field.
func (m *JobPostMutation) ResetSalary() {
	m.salary = nil
}

// SetDescription sets the "description" field.
func (m *JobPostMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *JobPostMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the JobPost entity.
// If the JobPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobPostMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *JobPostMutation) ResetDescription() {
	m.description = nil
}

// SetTags sets the "tags" field.
func (m *JobPostMutation) SetTags(s []string) {
	m.tags = &s
}

// Tags returns the value of the "tags" field in the mutation.
func (m *JobPostMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the JobPost entity.
// If the JobPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobPostMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// ResetTags resets all changes to the "tags" field.
func (m *JobPostMutation) ResetTags() {
	m.tags = nil
}

// SetCreatedOn sets the "created_on" field.
func (m *JobPostMutation) SetCreatedOn(t time.Time) {
	m.created_on = &t
}

// CreatedOn returns the value of the "created_on" field in the mutation.
func (m *JobPostMutation) CreatedOn() (r time.Time, exists bool) {
	v := m.created_on
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedOn returns the old "created_on" field's value of the JobPost entity.
// If the JobPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobPostMutation) OldCreatedOn(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedOn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedOn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedOn: %w", err)
	}
	return oldValue.CreatedOn, nil
}

// ResetCreatedOn resets all changes to the "created_on" field.
func (m *JobPostMutation) ResetCreatedOn() {
	m.created_on = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *JobPostMutation) SetUserID(id xid.ID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *JobPostMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *JobPostMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *JobPostMutation) UserID() (id xid.ID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *JobPostMutation) UserIDs() (ids []xid.ID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *JobPostMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetCompanyID sets the "company" edge to the Company entity by id.
func (m *JobPostMutation) SetCompanyID(id xid.ID) {
	m.company = &id
}

// ClearCompany clears the "company" edge to the Company entity.
func (m *JobPostMutation) ClearCompany() {
	m.clearedcompany = true
}

// CompanyCleared reports if the "company" edge to the Company entity was cleared.
func (m *JobPostMutation) CompanyCleared() bool {
	return m.clearedcompany
}

// CompanyID returns the "company" edge ID in the mutation.
func (m *JobPostMutation) CompanyID() (id xid.ID, exists bool) {
	if m.company != nil {
		return *m.company, true
	}
	return
}

// CompanyIDs returns the "company" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CompanyID instead. It exists only for internal usage by the builders.
func (m *JobPostMutation) CompanyIDs() (ids []xid.ID) {
	if id := m.company; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCompany resets all changes to the "company" edge.
func (m *JobPostMutation) ResetCompany() {
	m.company = nil
	m.clearedcompany = false
}

// AddCandidateIDs adds the "candidates" edge to the User entity by ids.
func (m *JobPostMutation) AddCandidateIDs(ids ...xid.ID) {
	if m.candidates == nil {
		m.candidates = make(map[xid.ID]struct{})
	}
	for i := range ids {
		m.candidates[ids[i]] = struct{}{}
	}
}

// ClearCandidates clears the "candidates" edge to the User entity.
func (m *JobPostMutation) ClearCandidates() {
	m.clearedcandidates = true
}

// CandidatesCleared reports if the "candidates" edge to the User entity was cleared.
func (m *JobPostMutation) CandidatesCleared() bool {
	return m.clearedcandidates
}

// RemoveCandidateIDs removes the "candidates" edge to the User entity by IDs.
func (m *JobPostMutation) RemoveCandidateIDs(ids ...xid.ID) {
	if m.removedcandidates == nil {
		m.removedcandidates = make(map[xid.ID]struct{})
	}
	for i := range ids {
		delete(m.candidates, ids[i])
		m.removedcandidates[ids[i]] = struct{}{}
	}
}

// RemovedCandidates returns the removed IDs of the "candidates" edge to the User entity.
func (m *JobPostMutation) RemovedCandidatesIDs() (ids []xid.ID) {
	for id := range m.removedcandidates {
		ids = append(ids, id)
	}
	return
}

// CandidatesIDs returns the "candidates" edge IDs in the mutation.
func (m *JobPostMutation) CandidatesIDs() (ids []xid.ID) {
	for id := range m.candidates {
		ids = append(ids, id)
	}
	return
}

// ResetCandidates resets all changes to the "candidates" edge.
func (m *JobPostMutation) ResetCandidates() {
	m.candidates = nil
	m.clearedcandidates = false
	m.removedcandidates = nil
}

// Where appends a list predicates to the JobPostMutation builder.
func (m *JobPostMutation) Where(ps ...predicate.JobPost) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *JobPostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (JobPost).
func (m *JobPostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JobPostMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.position != nil {
		fields = append(fields, jobpost.FieldPosition)
	}
	if m.location != nil {
		fields = append(fields, jobpost.FieldLocation)
	}
	if m.salary != nil {
		fields = append(fields, jobpost.FieldSalary)
	}
	if m.description != nil {
		fields = append(fields, jobpost.FieldDescription)
	}
	if m.tags != nil {
		fields = append(fields, jobpost.FieldTags)
	}
	if m.created_on != nil {
		fields = append(fields, jobpost.FieldCreatedOn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JobPostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case jobpost.FieldPosition:
		return m.Position()
	case jobpost.FieldLocation:
		return m.Location()
	case jobpost.FieldSalary:
		return m.Salary()
	case jobpost.FieldDescription:
		return m.Description()
	case jobpost.FieldTags:
		return m.Tags()
	case jobpost.FieldCreatedOn:
		return m.CreatedOn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JobPostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case jobpost.FieldPosition:
		return m.OldPosition(ctx)
	case jobpost.FieldLocation:
		return m.OldLocation(ctx)
	case jobpost.FieldSalary:
		return m.OldSalary(ctx)
	case jobpost.FieldDescription:
		return m.OldDescription(ctx)
	case jobpost.FieldTags:
		return m.OldTags(ctx)
	case jobpost.FieldCreatedOn:
		return m.OldCreatedOn(ctx)
	}
	return nil, fmt.Errorf("unknown JobPost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobPostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case jobpost.FieldPosition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case jobpost.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case jobpost.FieldSalary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalary(v)
		return nil
	case jobpost.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case jobpost.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case jobpost.FieldCreatedOn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedOn(v)
		return nil
	}
	return fmt.Errorf("unknown JobPost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JobPostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JobPostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobPostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown JobPost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JobPostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JobPostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JobPostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown JobPost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JobPostMutation) ResetField(name string) error {
	switch name {
	case jobpost.FieldPosition:
		m.ResetPosition()
		return nil
	case jobpost.FieldLocation:
		m.ResetLocation()
		return nil
	case jobpost.FieldSalary:
		m.ResetSalary()
		return nil
	case jobpost.FieldDescription:
		m.ResetDescription()
		return nil
	case jobpost.FieldTags:
		m.ResetTags()
		return nil
	case jobpost.FieldCreatedOn:
		m.ResetCreatedOn()
		return nil
	}
	return fmt.Errorf("unknown JobPost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JobPostMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, jobpost.EdgeUser)
	}
	if m.company != nil {
		edges = append(edges, jobpost.EdgeCompany)
	}
	if m.candidates != nil {
		edges = append(edges, jobpost.EdgeCandidates)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JobPostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case jobpost.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case jobpost.EdgeCompany:
		if id := m.company; id != nil {
			return []ent.Value{*id}
		}
	case jobpost.EdgeCandidates:
		ids := make([]ent.Value, 0, len(m.candidates))
		for id := range m.candidates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JobPostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcandidates != nil {
		edges = append(edges, jobpost.EdgeCandidates)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JobPostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case jobpost.EdgeCandidates:
		ids := make([]ent.Value, 0, len(m.removedcandidates))
		for id := range m.removedcandidates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JobPostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, jobpost.EdgeUser)
	}
	if m.clearedcompany {
		edges = append(edges, jobpost.EdgeCompany)
	}
	if m.clearedcandidates {
		edges = append(edges, jobpost.EdgeCandidates)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JobPostMutation) EdgeCleared(name string) bool {
	switch name {
	case jobpost.EdgeUser:
		return m.cleareduser
	case jobpost.EdgeCompany:
		return m.clearedcompany
	case jobpost.EdgeCandidates:
		return m.clearedcandidates
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JobPostMutation) ClearEdge(name string) error {
	switch name {
	case jobpost.EdgeUser:
		m.ClearUser()
		return nil
	case jobpost.EdgeCompany:
		m.ClearCompany()
		return nil
	}
	return fmt.Errorf("unknown JobPost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JobPostMutation) ResetEdge(name string) error {
	switch name {
	case jobpost.EdgeUser:
		m.ResetUser()
		return nil
	case jobpost.EdgeCompany:
		m.ResetCompany()
		return nil
	case jobpost.EdgeCandidates:
		m.ResetCandidates()
		return nil
	}
	return fmt.Errorf("unknown JobPost edge %s", name)
}

// StudentAcademicProfileMutation represents an operation that mutates the StudentAcademicProfile nodes in the graph.
type StudentAcademicProfileMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	course                 *string
	institute              *string
	board                  *string
	reg_no                 *string
	department             *string
	start_date             *string
	end_date               *string
	marks                  *string
	clearedFields          map[string]struct{}
	student_profile        *xid.ID
	clearedstudent_profile bool
	done                   bool
	oldValue               func(context.Context) (*StudentAcademicProfile, error)
	predicates             []predicate.StudentAcademicProfile
}

var _ ent.Mutation = (*StudentAcademicProfileMutation)(nil)

// studentacademicprofileOption allows management of the mutation configuration using functional options.
type studentacademicprofileOption func(*StudentAcademicProfileMutation)

// newStudentAcademicProfileMutation creates new mutation for the StudentAcademicProfile entity.
func newStudentAcademicProfileMutation(c config, op Op, opts ...studentacademicprofileOption) *StudentAcademicProfileMutation {
	m := &StudentAcademicProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeStudentAcademicProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentAcademicProfileID sets the ID field of the mutation.
func withStudentAcademicProfileID(id string) studentacademicprofileOption {
	return func(m *StudentAcademicProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *StudentAcademicProfile
		)
		m.oldValue = func(ctx context.Context) (*StudentAcademicProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StudentAcademicProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudentAcademicProfile sets the old StudentAcademicProfile of the mutation.
func withStudentAcademicProfile(node *StudentAcademicProfile) studentacademicprofileOption {
	return func(m *StudentAcademicProfileMutation) {
		m.oldValue = func(context.Context) (*StudentAcademicProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentAcademicProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentAcademicProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StudentAcademicProfile entities.
func (m *StudentAcademicProfileMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudentAcademicProfileMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudentAcademicProfileMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StudentAcademicProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCourse sets the "course" field.
func (m *StudentAcademicProfileMutation) SetCourse(s string) {
	m.course = &s
}

// Course returns the value of the "course" field in the mutation.
func (m *StudentAcademicProfileMutation) Course() (r string, exists bool) {
	v := m.course
	if v == nil {
		return
	}
	return *v, true
}

// OldCourse returns the old "course" field's value of the StudentAcademicProfile entity.
// If the StudentAcademicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentAcademicProfileMutation) OldCourse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCourse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCourse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCourse: %w", err)
	}
	return oldValue.Course, nil
}

// ResetCourse resets all changes to the "course" field.
func (m *StudentAcademicProfileMutation) ResetCourse() {
	m.course = nil
}

// SetInstitute sets the "institute" field.
func (m *StudentAcademicProfileMutation) SetInstitute(s string) {
	m.institute = &s
}

// Institute returns the value of the "institute" field in the mutation.
func (m *StudentAcademicProfileMutation) Institute() (r string, exists bool) {
	v := m.institute
	if v == nil {
		return
	}
	return *v, true
}

// OldInstitute returns the old "institute" field's value of the StudentAcademicProfile entity.
// If the StudentAcademicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentAcademicProfileMutation) OldInstitute(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstitute is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstitute requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstitute: %w", err)
	}
	return oldValue.Institute, nil
}

// ResetInstitute resets all changes to the "institute" field.
func (m *StudentAcademicProfileMutation) ResetInstitute() {
	m.institute = nil
}

// SetBoard sets the "board" field.
func (m *StudentAcademicProfileMutation) SetBoard(s string) {
	m.board = &s
}

// Board returns the value of the "board" field in the mutation.
func (m *StudentAcademicProfileMutation) Board() (r string, exists bool) {
	v := m.board
	if v == nil {
		return
	}
	return *v, true
}

// OldBoard returns the old "board" field's value of the StudentAcademicProfile entity.
// If the StudentAcademicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentAcademicProfileMutation) OldBoard(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoard is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoard: %w", err)
	}
	return oldValue.Board, nil
}

// ResetBoard resets all changes to the "board" field.
func (m *StudentAcademicProfileMutation) ResetBoard() {
	m.board = nil
}

// SetRegNo sets the "reg_no" field.
func (m *StudentAcademicProfileMutation) SetRegNo(s string) {
	m.reg_no = &s
}

// RegNo returns the value of the "reg_no" field in the mutation.
func (m *StudentAcademicProfileMutation) RegNo() (r string, exists bool) {
	v := m.reg_no
	if v == nil {
		return
	}
	return *v, true
}

// OldRegNo returns the old "reg_no" field's value of the StudentAcademicProfile entity.
// If the StudentAcademicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentAcademicProfileMutation) OldRegNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegNo: %w", err)
	}
	return oldValue.RegNo, nil
}

// ResetRegNo resets all changes to the "reg_no" field.
func (m *StudentAcademicProfileMutation) ResetRegNo() {
	m.reg_no = nil
}

// SetDepartment sets the "department" field.
func (m *StudentAcademicProfileMutation) SetDepartment(s string) {
	m.department = &s
}

// Department returns the value of the "department" field in the mutation.
func (m *StudentAcademicProfileMutation) Department() (r string, exists bool) {
	v := m.department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "department" field's value of the StudentAcademicProfile entity.
// If the StudentAcademicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentAcademicProfileMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ResetDepartment resets all changes to the "department" field.
func (m *StudentAcademicProfileMutation) ResetDepartment() {
	m.department = nil
}

// SetStartDate sets the "start_date" field.
func (m *StudentAcademicProfileMutation) SetStartDate(s string) {
	m.start_date = &s
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *StudentAcademicProfileMutation) StartDate() (r string, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the StudentAcademicProfile entity.
// If the StudentAcademicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentAcademicProfileMutation) OldStartDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *StudentAcademicProfileMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *StudentAcademicProfileMutation) SetEndDate(s string) {
	m.end_date = &s
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *StudentAcademicProfileMutation) EndDate() (r string, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the StudentAcademicProfile entity.
// If the StudentAcademicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentAcademicProfileMutation) OldEndDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *StudentAcademicProfileMutation) ResetEndDate() {
	m.end_date = nil
}

// SetMarks sets the "marks" field.
func (m *StudentAcademicProfileMutation) SetMarks(s string) {
	m.marks = &s
}

// Marks returns the value of the "marks" field in the mutation.
func (m *StudentAcademicProfileMutation) Marks() (r string, exists bool) {
	v := m.marks
	if v == nil {
		return
	}
	return *v, true
}

// OldMarks returns the old "marks" field's value of the StudentAcademicProfile entity.
// If the StudentAcademicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentAcademicProfileMutation) OldMarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarks: %w", err)
	}
	return oldValue.Marks, nil
}

// ResetMarks resets all changes to the "marks" field.
func (m *StudentAcademicProfileMutation) ResetMarks() {
	m.marks = nil
}

// SetStudentProfileID sets the "student_profile" edge to the StudentProfile entity by id.
func (m *StudentAcademicProfileMutation) SetStudentProfileID(id xid.ID) {
	m.student_profile = &id
}

// ClearStudentProfile clears the "student_profile" edge to the StudentProfile entity.
func (m *StudentAcademicProfileMutation) ClearStudentProfile() {
	m.clearedstudent_profile = true
}

// StudentProfileCleared reports if the "student_profile" edge to the StudentProfile entity was cleared.
func (m *StudentAcademicProfileMutation) StudentProfileCleared() bool {
	return m.clearedstudent_profile
}

// StudentProfileID returns the "student_profile" edge ID in the mutation.
func (m *StudentAcademicProfileMutation) StudentProfileID() (id xid.ID, exists bool) {
	if m.student_profile != nil {
		return *m.student_profile, true
	}
	return
}

// StudentProfileIDs returns the "student_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentProfileID instead. It exists only for internal usage by the builders.
func (m *StudentAcademicProfileMutation) StudentProfileIDs() (ids []xid.ID) {
	if id := m.student_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudentProfile resets all changes to the "student_profile" edge.
func (m *StudentAcademicProfileMutation) ResetStudentProfile() {
	m.student_profile = nil
	m.clearedstudent_profile = false
}

// Where appends a list predicates to the StudentAcademicProfileMutation builder.
func (m *StudentAcademicProfileMutation) Where(ps ...predicate.StudentAcademicProfile) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StudentAcademicProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StudentAcademicProfile).
func (m *StudentAcademicProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentAcademicProfileMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.course != nil {
		fields = append(fields, studentacademicprofile.FieldCourse)
	}
	if m.institute != nil {
		fields = append(fields, studentacademicprofile.FieldInstitute)
	}
	if m.board != nil {
		fields = append(fields, studentacademicprofile.FieldBoard)
	}
	if m.reg_no != nil {
		fields = append(fields, studentacademicprofile.FieldRegNo)
	}
	if m.department != nil {
		fields = append(fields, studentacademicprofile.FieldDepartment)
	}
	if m.start_date != nil {
		fields = append(fields, studentacademicprofile.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, studentacademicprofile.FieldEndDate)
	}
	if m.marks != nil {
		fields = append(fields, studentacademicprofile.FieldMarks)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentAcademicProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case studentacademicprofile.FieldCourse:
		return m.Course()
	case studentacademicprofile.FieldInstitute:
		return m.Institute()
	case studentacademicprofile.FieldBoard:
		return m.Board()
	case studentacademicprofile.FieldRegNo:
		return m.RegNo()
	case studentacademicprofile.FieldDepartment:
		return m.Department()
	case studentacademicprofile.FieldStartDate:
		return m.StartDate()
	case studentacademicprofile.FieldEndDate:
		return m.EndDate()
	case studentacademicprofile.FieldMarks:
		return m.Marks()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentAcademicProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case studentacademicprofile.FieldCourse:
		return m.OldCourse(ctx)
	case studentacademicprofile.FieldInstitute:
		return m.OldInstitute(ctx)
	case studentacademicprofile.FieldBoard:
		return m.OldBoard(ctx)
	case studentacademicprofile.FieldRegNo:
		return m.OldRegNo(ctx)
	case studentacademicprofile.FieldDepartment:
		return m.OldDepartment(ctx)
	case studentacademicprofile.FieldStartDate:
		return m.OldStartDate(ctx)
	case studentacademicprofile.FieldEndDate:
		return m.OldEndDate(ctx)
	case studentacademicprofile.FieldMarks:
		return m.OldMarks(ctx)
	}
	return nil, fmt.Errorf("unknown StudentAcademicProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentAcademicProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case studentacademicprofile.FieldCourse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCourse(v)
		return nil
	case studentacademicprofile.FieldInstitute:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstitute(v)
		return nil
	case studentacademicprofile.FieldBoard:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoard(v)
		return nil
	case studentacademicprofile.FieldRegNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegNo(v)
		return nil
	case studentacademicprofile.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	case studentacademicprofile.FieldStartDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case studentacademicprofile.FieldEndDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case studentacademicprofile.FieldMarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarks(v)
		return nil
	}
	return fmt.Errorf("unknown StudentAcademicProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentAcademicProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentAcademicProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentAcademicProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StudentAcademicProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentAcademicProfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentAcademicProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentAcademicProfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StudentAcademicProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentAcademicProfileMutation) ResetField(name string) error {
	switch name {
	case studentacademicprofile.FieldCourse:
		m.ResetCourse()
		return nil
	case studentacademicprofile.FieldInstitute:
		m.ResetInstitute()
		return nil
	case studentacademicprofile.FieldBoard:
		m.ResetBoard()
		return nil
	case studentacademicprofile.FieldRegNo:
		m.ResetRegNo()
		return nil
	case studentacademicprofile.FieldDepartment:
		m.ResetDepartment()
		return nil
	case studentacademicprofile.FieldStartDate:
		m.ResetStartDate()
		return nil
	case studentacademicprofile.FieldEndDate:
		m.ResetEndDate()
		return nil
	case studentacademicprofile.FieldMarks:
		m.ResetMarks()
		return nil
	}
	return fmt.Errorf("unknown StudentAcademicProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentAcademicProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.student_profile != nil {
		edges = append(edges, studentacademicprofile.EdgeStudentProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentAcademicProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case studentacademicprofile.EdgeStudentProfile:
		if id := m.student_profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentAcademicProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentAcademicProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentAcademicProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstudent_profile {
		edges = append(edges, studentacademicprofile.EdgeStudentProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentAcademicProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case studentacademicprofile.EdgeStudentProfile:
		return m.clearedstudent_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentAcademicProfileMutation) ClearEdge(name string) error {
	switch name {
	case studentacademicprofile.EdgeStudentProfile:
		m.ClearStudentProfile()
		return nil
	}
	return fmt.Errorf("unknown StudentAcademicProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentAcademicProfileMutation) ResetEdge(name string) error {
	switch name {
	case studentacademicprofile.EdgeStudentProfile:
		m.ResetStudentProfile()
		return nil
	}
	return fmt.Errorf("unknown StudentAcademicProfile edge %s", name)
}

// StudentProfileMutation represents an operation that mutates the StudentProfile nodes in the graph.
type StudentProfileMutation struct {
	config
	op                      Op
	typ                     string
	id                      *xid.ID
	name                    *string
	phone                   *string
	gender                  *string
	caste                   *string
	nationality             *string
	clearedFields           map[string]struct{}
	user                    *xid.ID
	cleareduser             bool
	academic_profile        map[string]struct{}
	removedacademic_profile map[string]struct{}
	clearedacademic_profile bool
	work_profile            map[xid.ID]struct{}
	removedwork_profile     map[xid.ID]struct{}
	clearedwork_profile     bool
	done                    bool
	oldValue                func(context.Context) (*StudentProfile, error)
	predicates              []predicate.StudentProfile
}

var _ ent.Mutation = (*StudentProfileMutation)(nil)

// studentprofileOption allows management of the mutation configuration using functional options.
type studentprofileOption func(*StudentProfileMutation)

// newStudentProfileMutation creates new mutation for the StudentProfile entity.
func newStudentProfileMutation(c config, op Op, opts ...studentprofileOption) *StudentProfileMutation {
	m := &StudentProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeStudentProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentProfileID sets the ID field of the mutation.
func withStudentProfileID(id xid.ID) studentprofileOption {
	return func(m *StudentProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *StudentProfile
		)
		m.oldValue = func(ctx context.Context) (*StudentProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StudentProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudentProfile sets the old StudentProfile of the mutation.
func withStudentProfile(node *StudentProfile) studentprofileOption {
	return func(m *StudentProfileMutation) {
		m.oldValue = func(context.Context) (*StudentProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StudentProfile entities.
func (m *StudentProfileMutation) SetID(id xid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudentProfileMutation) ID() (id xid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudentProfileMutation) IDs(ctx context.Context) ([]xid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []xid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StudentProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *StudentProfileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StudentProfileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the StudentProfile entity.
// If the StudentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentProfileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StudentProfileMutation) ResetName() {
	m.name = nil
}

// SetPhone sets the "phone" field.
func (m *StudentProfileMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *StudentProfileMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the StudentProfile entity.
// If the StudentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentProfileMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *StudentProfileMutation) ResetPhone() {
	m.phone = nil
}

// SetGender sets the "gender" field.
func (m *StudentProfileMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *StudentProfileMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the StudentProfile entity.
// If the StudentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentProfileMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *StudentProfileMutation) ResetGender() {
	m.gender = nil
}

// SetCaste sets the "caste" field.
func (m *StudentProfileMutation) SetCaste(s string) {
	m.caste = &s
}

// Caste returns the value of the "caste" field in the mutation.
func (m *StudentProfileMutation) Caste() (r string, exists bool) {
	v := m.caste
	if v == nil {
		return
	}
	return *v, true
}

// OldCaste returns the old "caste" field's value of the StudentProfile entity.
// If the StudentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentProfileMutation) OldCaste(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaste is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaste requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaste: %w", err)
	}
	return oldValue.Caste, nil
}

// ResetCaste resets all changes to the "caste" field.
func (m *StudentProfileMutation) ResetCaste() {
	m.caste = nil
}

// SetNationality sets the "nationality" field.
func (m *StudentProfileMutation) SetNationality(s string) {
	m.nationality = &s
}

// Nationality returns the value of the "nationality" field in the mutation.
func (m *StudentProfileMutation) Nationality() (r string, exists bool) {
	v := m.nationality
	if v == nil {
		return
	}
	return *v, true
}

// OldNationality returns the old "nationality" field's value of the StudentProfile entity.
// If the StudentProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentProfileMutation) OldNationality(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNationality is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNationality requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNationality: %w", err)
	}
	return oldValue.Nationality, nil
}

// ResetNationality resets all changes to the "nationality" field.
func (m *StudentProfileMutation) ResetNationality() {
	m.nationality = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *StudentProfileMutation) SetUserID(id xid.ID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *StudentProfileMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *StudentProfileMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *StudentProfileMutation) UserID() (id xid.ID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *StudentProfileMutation) UserIDs() (ids []xid.ID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *StudentProfileMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddAcademicProfileIDs adds the "academic_profile" edge to the StudentAcademicProfile entity by ids.
func (m *StudentProfileMutation) AddAcademicProfileIDs(ids ...string) {
	if m.academic_profile == nil {
		m.academic_profile = make(map[string]struct{})
	}
	for i := range ids {
		m.academic_profile[ids[i]] = struct{}{}
	}
}

// ClearAcademicProfile clears the "academic_profile" edge to the StudentAcademicProfile entity.
func (m *StudentProfileMutation) ClearAcademicProfile() {
	m.clearedacademic_profile = true
}

// AcademicProfileCleared reports if the "academic_profile" edge to the StudentAcademicProfile entity was cleared.
func (m *StudentProfileMutation) AcademicProfileCleared() bool {
	return m.clearedacademic_profile
}

// RemoveAcademicProfileIDs removes the "academic_profile" edge to the StudentAcademicProfile entity by IDs.
func (m *StudentProfileMutation) RemoveAcademicProfileIDs(ids ...string) {
	if m.removedacademic_profile == nil {
		m.removedacademic_profile = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.academic_profile, ids[i])
		m.removedacademic_profile[ids[i]] = struct{}{}
	}
}

// RemovedAcademicProfile returns the removed IDs of the "academic_profile" edge to the StudentAcademicProfile entity.
func (m *StudentProfileMutation) RemovedAcademicProfileIDs() (ids []string) {
	for id := range m.removedacademic_profile {
		ids = append(ids, id)
	}
	return
}

// AcademicProfileIDs returns the "academic_profile" edge IDs in the mutation.
func (m *StudentProfileMutation) AcademicProfileIDs() (ids []string) {
	for id := range m.academic_profile {
		ids = append(ids, id)
	}
	return
}

// ResetAcademicProfile resets all changes to the "academic_profile" edge.
func (m *StudentProfileMutation) ResetAcademicProfile() {
	m.academic_profile = nil
	m.clearedacademic_profile = false
	m.removedacademic_profile = nil
}

// AddWorkProfileIDs adds the "work_profile" edge to the StudentWorkProfile entity by ids.
func (m *StudentProfileMutation) AddWorkProfileIDs(ids ...xid.ID) {
	if m.work_profile == nil {
		m.work_profile = make(map[xid.ID]struct{})
	}
	for i := range ids {
		m.work_profile[ids[i]] = struct{}{}
	}
}

// ClearWorkProfile clears the "work_profile" edge to the StudentWorkProfile entity.
func (m *StudentProfileMutation) ClearWorkProfile() {
	m.clearedwork_profile = true
}

// WorkProfileCleared reports if the "work_profile" edge to the StudentWorkProfile entity was cleared.
func (m *StudentProfileMutation) WorkProfileCleared() bool {
	return m.clearedwork_profile
}

// RemoveWorkProfileIDs removes the "work_profile" edge to the StudentWorkProfile entity by IDs.
func (m *StudentProfileMutation) RemoveWorkProfileIDs(ids ...xid.ID) {
	if m.removedwork_profile == nil {
		m.removedwork_profile = make(map[xid.ID]struct{})
	}
	for i := range ids {
		delete(m.work_profile, ids[i])
		m.removedwork_profile[ids[i]] = struct{}{}
	}
}

// RemovedWorkProfile returns the removed IDs of the "work_profile" edge to the StudentWorkProfile entity.
func (m *StudentProfileMutation) RemovedWorkProfileIDs() (ids []xid.ID) {
	for id := range m.removedwork_profile {
		ids = append(ids, id)
	}
	return
}

// WorkProfileIDs returns the "work_profile" edge IDs in the mutation.
func (m *StudentProfileMutation) WorkProfileIDs() (ids []xid.ID) {
	for id := range m.work_profile {
		ids = append(ids, id)
	}
	return
}

// ResetWorkProfile resets all changes to the "work_profile" edge.
func (m *StudentProfileMutation) ResetWorkProfile() {
	m.work_profile = nil
	m.clearedwork_profile = false
	m.removedwork_profile = nil
}

// Where appends a list predicates to the StudentProfileMutation builder.
func (m *StudentProfileMutation) Where(ps ...predicate.StudentProfile) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StudentProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StudentProfile).
func (m *StudentProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentProfileMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, studentprofile.FieldName)
	}
	if m.phone != nil {
		fields = append(fields, studentprofile.FieldPhone)
	}
	if m.gender != nil {
		fields = append(fields, studentprofile.FieldGender)
	}
	if m.caste != nil {
		fields = append(fields, studentprofile.FieldCaste)
	}
	if m.nationality != nil {
		fields = append(fields, studentprofile.FieldNationality)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case studentprofile.FieldName:
		return m.Name()
	case studentprofile.FieldPhone:
		return m.Phone()
	case studentprofile.FieldGender:
		return m.Gender()
	case studentprofile.FieldCaste:
		return m.Caste()
	case studentprofile.FieldNationality:
		return m.Nationality()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case studentprofile.FieldName:
		return m.OldName(ctx)
	case studentprofile.FieldPhone:
		return m.OldPhone(ctx)
	case studentprofile.FieldGender:
		return m.OldGender(ctx)
	case studentprofile.FieldCaste:
		return m.OldCaste(ctx)
	case studentprofile.FieldNationality:
		return m.OldNationality(ctx)
	}
	return nil, fmt.Errorf("unknown StudentProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case studentprofile.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case studentprofile.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case studentprofile.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case studentprofile.FieldCaste:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaste(v)
		return nil
	case studentprofile.FieldNationality:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNationality(v)
		return nil
	}
	return fmt.Errorf("unknown StudentProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StudentProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentProfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentProfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StudentProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentProfileMutation) ResetField(name string) error {
	switch name {
	case studentprofile.FieldName:
		m.ResetName()
		return nil
	case studentprofile.FieldPhone:
		m.ResetPhone()
		return nil
	case studentprofile.FieldGender:
		m.ResetGender()
		return nil
	case studentprofile.FieldCaste:
		m.ResetCaste()
		return nil
	case studentprofile.FieldNationality:
		m.ResetNationality()
		return nil
	}
	return fmt.Errorf("unknown StudentProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, studentprofile.EdgeUser)
	}
	if m.academic_profile != nil {
		edges = append(edges, studentprofile.EdgeAcademicProfile)
	}
	if m.work_profile != nil {
		edges = append(edges, studentprofile.EdgeWorkProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case studentprofile.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case studentprofile.EdgeAcademicProfile:
		ids := make([]ent.Value, 0, len(m.academic_profile))
		for id := range m.academic_profile {
			ids = append(ids, id)
		}
		return ids
	case studentprofile.EdgeWorkProfile:
		ids := make([]ent.Value, 0, len(m.work_profile))
		for id := range m.work_profile {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedacademic_profile != nil {
		edges = append(edges, studentprofile.EdgeAcademicProfile)
	}
	if m.removedwork_profile != nil {
		edges = append(edges, studentprofile.EdgeWorkProfile)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case studentprofile.EdgeAcademicProfile:
		ids := make([]ent.Value, 0, len(m.removedacademic_profile))
		for id := range m.removedacademic_profile {
			ids = append(ids, id)
		}
		return ids
	case studentprofile.EdgeWorkProfile:
		ids := make([]ent.Value, 0, len(m.removedwork_profile))
		for id := range m.removedwork_profile {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, studentprofile.EdgeUser)
	}
	if m.clearedacademic_profile {
		edges = append(edges, studentprofile.EdgeAcademicProfile)
	}
	if m.clearedwork_profile {
		edges = append(edges, studentprofile.EdgeWorkProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case studentprofile.EdgeUser:
		return m.cleareduser
	case studentprofile.EdgeAcademicProfile:
		return m.clearedacademic_profile
	case studentprofile.EdgeWorkProfile:
		return m.clearedwork_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentProfileMutation) ClearEdge(name string) error {
	switch name {
	case studentprofile.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown StudentProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentProfileMutation) ResetEdge(name string) error {
	switch name {
	case studentprofile.EdgeUser:
		m.ResetUser()
		return nil
	case studentprofile.EdgeAcademicProfile:
		m.ResetAcademicProfile()
		return nil
	case studentprofile.EdgeWorkProfile:
		m.ResetWorkProfile()
		return nil
	}
	return fmt.Errorf("unknown StudentProfile edge %s", name)
}

// StudentWorkProfileMutation represents an operation that mutates the StudentWorkProfile nodes in the graph.
type StudentWorkProfileMutation struct {
	config
	op                     Op
	typ                    string
	id                     *xid.ID
	clearedFields          map[string]struct{}
	student_profile        *xid.ID
	clearedstudent_profile bool
	done                   bool
	oldValue               func(context.Context) (*StudentWorkProfile, error)
	predicates             []predicate.StudentWorkProfile
}

var _ ent.Mutation = (*StudentWorkProfileMutation)(nil)

// studentworkprofileOption allows management of the mutation configuration using functional options.
type studentworkprofileOption func(*StudentWorkProfileMutation)

// newStudentWorkProfileMutation creates new mutation for the StudentWorkProfile entity.
func newStudentWorkProfileMutation(c config, op Op, opts ...studentworkprofileOption) *StudentWorkProfileMutation {
	m := &StudentWorkProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeStudentWorkProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentWorkProfileID sets the ID field of the mutation.
func withStudentWorkProfileID(id xid.ID) studentworkprofileOption {
	return func(m *StudentWorkProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *StudentWorkProfile
		)
		m.oldValue = func(ctx context.Context) (*StudentWorkProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StudentWorkProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudentWorkProfile sets the old StudentWorkProfile of the mutation.
func withStudentWorkProfile(node *StudentWorkProfile) studentworkprofileOption {
	return func(m *StudentWorkProfileMutation) {
		m.oldValue = func(context.Context) (*StudentWorkProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentWorkProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentWorkProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StudentWorkProfile entities.
func (m *StudentWorkProfileMutation) SetID(id xid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudentWorkProfileMutation) ID() (id xid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudentWorkProfileMutation) IDs(ctx context.Context) ([]xid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []xid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StudentWorkProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStudentProfileID sets the "student_profile" edge to the StudentProfile entity by id.
func (m *StudentWorkProfileMutation) SetStudentProfileID(id xid.ID) {
	m.student_profile = &id
}

// ClearStudentProfile clears the "student_profile" edge to the StudentProfile entity.
func (m *StudentWorkProfileMutation) ClearStudentProfile() {
	m.clearedstudent_profile = true
}

// StudentProfileCleared reports if the "student_profile" edge to the StudentProfile entity was cleared.
func (m *StudentWorkProfileMutation) StudentProfileCleared() bool {
	return m.clearedstudent_profile
}

// StudentProfileID returns the "student_profile" edge ID in the mutation.
func (m *StudentWorkProfileMutation) StudentProfileID() (id xid.ID, exists bool) {
	if m.student_profile != nil {
		return *m.student_profile, true
	}
	return
}

// StudentProfileIDs returns the "student_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentProfileID instead. It exists only for internal usage by the builders.
func (m *StudentWorkProfileMutation) StudentProfileIDs() (ids []xid.ID) {
	if id := m.student_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudentProfile resets all changes to the "student_profile" edge.
func (m *StudentWorkProfileMutation) ResetStudentProfile() {
	m.student_profile = nil
	m.clearedstudent_profile = false
}

// Where appends a list predicates to the StudentWorkProfileMutation builder.
func (m *StudentWorkProfileMutation) Where(ps ...predicate.StudentWorkProfile) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StudentWorkProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StudentWorkProfile).
func (m *StudentWorkProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentWorkProfileMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentWorkProfileMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentWorkProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown StudentWorkProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentWorkProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StudentWorkProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentWorkProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentWorkProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentWorkProfileMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown StudentWorkProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentWorkProfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentWorkProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentWorkProfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StudentWorkProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentWorkProfileMutation) ResetField(name string) error {
	return fmt.Errorf("unknown StudentWorkProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentWorkProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.student_profile != nil {
		edges = append(edges, studentworkprofile.EdgeStudentProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentWorkProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case studentworkprofile.EdgeStudentProfile:
		if id := m.student_profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentWorkProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentWorkProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentWorkProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstudent_profile {
		edges = append(edges, studentworkprofile.EdgeStudentProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentWorkProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case studentworkprofile.EdgeStudentProfile:
		return m.clearedstudent_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentWorkProfileMutation) ClearEdge(name string) error {
	switch name {
	case studentworkprofile.EdgeStudentProfile:
		m.ClearStudentProfile()
		return nil
	}
	return fmt.Errorf("unknown StudentWorkProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentWorkProfileMutation) ResetEdge(name string) error {
	switch name {
	case studentworkprofile.EdgeStudentProfile:
		m.ResetStudentProfile()
		return nil
	}
	return fmt.Errorf("unknown StudentWorkProfile edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *xid.ID
	email                  *string
	password               *string
	email_verified         *bool
	role                   *string
	created_at             *time.Time
	clearedFields          map[string]struct{}
	student_profile        *xid.ID
	clearedstudent_profile bool
	college_profile        *string
	clearedcollege_profile bool
	candidates             map[xid.ID]struct{}
	removedcandidates      map[xid.ID]struct{}
	clearedcandidates      bool
	enrolled_in            map[xid.ID]struct{}
	removedenrolled_in     map[xid.ID]struct{}
	clearedenrolled_in     bool
	companies              map[xid.ID]struct{}
	removedcompanies       map[xid.ID]struct{}
	clearedcompanies       bool
	job_posts              map[xid.ID]struct{}
	removedjob_posts       map[xid.ID]struct{}
	clearedjob_posts       bool
	applied_to             map[xid.ID]struct{}
	removedapplied_to      map[xid.ID]struct{}
	clearedapplied_to      bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id xid.ID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id xid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id xid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]xid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []xid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetEmailVerified sets the "email_verified" field.
func (m *UserMutation) SetEmailVerified(b bool) {
	m.email_verified = &b
}

// EmailVerified returns the value of the "email_verified" field in the mutation.
func (m *UserMutation) EmailVerified() (r bool, exists bool) {
	v := m.email_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerified returns the old "email_verified" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerified: %w", err)
	}
	return oldValue.EmailVerified, nil
}

// ResetEmailVerified resets all changes to the "email_verified" field.
func (m *UserMutation) ResetEmailVerified() {
	m.email_verified = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetStudentProfileID sets the "student_profile" edge to the StudentProfile entity by id.
func (m *UserMutation) SetStudentProfileID(id xid.ID) {
	m.student_profile = &id
}

// ClearStudentProfile clears the "student_profile" edge to the StudentProfile entity.
func (m *UserMutation) ClearStudentProfile() {
	m.clearedstudent_profile = true
}

// StudentProfileCleared reports if the "student_profile" edge to the StudentProfile entity was cleared.
func (m *UserMutation) StudentProfileCleared() bool {
	return m.clearedstudent_profile
}

// StudentProfileID returns the "student_profile" edge ID in the mutation.
func (m *UserMutation) StudentProfileID() (id xid.ID, exists bool) {
	if m.student_profile != nil {
		return *m.student_profile, true
	}
	return
}

// StudentProfileIDs returns the "student_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) StudentProfileIDs() (ids []xid.ID) {
	if id := m.student_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudentProfile resets all changes to the "student_profile" edge.
func (m *UserMutation) ResetStudentProfile() {
	m.student_profile = nil
	m.clearedstudent_profile = false
}

// SetCollegeProfileID sets the "college_profile" edge to the CollegeProfile entity by id.
func (m *UserMutation) SetCollegeProfileID(id string) {
	m.college_profile = &id
}

// ClearCollegeProfile clears the "college_profile" edge to the CollegeProfile entity.
func (m *UserMutation) ClearCollegeProfile() {
	m.clearedcollege_profile = true
}

// CollegeProfileCleared reports if the "college_profile" edge to the CollegeProfile entity was cleared.
func (m *UserMutation) CollegeProfileCleared() bool {
	return m.clearedcollege_profile
}

// CollegeProfileID returns the "college_profile" edge ID in the mutation.
func (m *UserMutation) CollegeProfileID() (id string, exists bool) {
	if m.college_profile != nil {
		return *m.college_profile, true
	}
	return
}

// CollegeProfileIDs returns the "college_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CollegeProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) CollegeProfileIDs() (ids []string) {
	if id := m.college_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCollegeProfile resets all changes to the "college_profile" edge.
func (m *UserMutation) ResetCollegeProfile() {
	m.college_profile = nil
	m.clearedcollege_profile = false
}

// AddCandidateIDs adds the "candidates" edge to the User entity by ids.
func (m *UserMutation) AddCandidateIDs(ids ...xid.ID) {
	if m.candidates == nil {
		m.candidates = make(map[xid.ID]struct{})
	}
	for i := range ids {
		m.candidates[ids[i]] = struct{}{}
	}
}

// ClearCandidates clears the "candidates" edge to the User entity.
func (m *UserMutation) ClearCandidates() {
	m.clearedcandidates = true
}

// CandidatesCleared reports if the "candidates" edge to the User entity was cleared.
func (m *UserMutation) CandidatesCleared() bool {
	return m.clearedcandidates
}

// RemoveCandidateIDs removes the "candidates" edge to the User entity by IDs.
func (m *UserMutation) RemoveCandidateIDs(ids ...xid.ID) {
	if m.removedcandidates == nil {
		m.removedcandidates = make(map[xid.ID]struct{})
	}
	for i := range ids {
		delete(m.candidates, ids[i])
		m.removedcandidates[ids[i]] = struct{}{}
	}
}

// RemovedCandidates returns the removed IDs of the "candidates" edge to the User entity.
func (m *UserMutation) RemovedCandidatesIDs() (ids []xid.ID) {
	for id := range m.removedcandidates {
		ids = append(ids, id)
	}
	return
}

// CandidatesIDs returns the "candidates" edge IDs in the mutation.
func (m *UserMutation) CandidatesIDs() (ids []xid.ID) {
	for id := range m.candidates {
		ids = append(ids, id)
	}
	return
}

// ResetCandidates resets all changes to the "candidates" edge.
func (m *UserMutation) ResetCandidates() {
	m.candidates = nil
	m.clearedcandidates = false
	m.removedcandidates = nil
}

// AddEnrolledInIDs adds the "enrolled_in" edge to the User entity by ids.
func (m *UserMutation) AddEnrolledInIDs(ids ...xid.ID) {
	if m.enrolled_in == nil {
		m.enrolled_in = make(map[xid.ID]struct{})
	}
	for i := range ids {
		m.enrolled_in[ids[i]] = struct{}{}
	}
}

// ClearEnrolledIn clears the "enrolled_in" edge to the User entity.
func (m *UserMutation) ClearEnrolledIn() {
	m.clearedenrolled_in = true
}

// EnrolledInCleared reports if the "enrolled_in" edge to the User entity was cleared.
func (m *UserMutation) EnrolledInCleared() bool {
	return m.clearedenrolled_in
}

// RemoveEnrolledInIDs removes the "enrolled_in" edge to the User entity by IDs.
func (m *UserMutation) RemoveEnrolledInIDs(ids ...xid.ID) {
	if m.removedenrolled_in == nil {
		m.removedenrolled_in = make(map[xid.ID]struct{})
	}
	for i := range ids {
		delete(m.enrolled_in, ids[i])
		m.removedenrolled_in[ids[i]] = struct{}{}
	}
}

// RemovedEnrolledIn returns the removed IDs of the "enrolled_in" edge to the User entity.
func (m *UserMutation) RemovedEnrolledInIDs() (ids []xid.ID) {
	for id := range m.removedenrolled_in {
		ids = append(ids, id)
	}
	return
}

// EnrolledInIDs returns the "enrolled_in" edge IDs in the mutation.
func (m *UserMutation) EnrolledInIDs() (ids []xid.ID) {
	for id := range m.enrolled_in {
		ids = append(ids, id)
	}
	return
}

// ResetEnrolledIn resets all changes to the "enrolled_in" edge.
func (m *UserMutation) ResetEnrolledIn() {
	m.enrolled_in = nil
	m.clearedenrolled_in = false
	m.removedenrolled_in = nil
}

// AddCompanyIDs adds the "companies" edge to the Company entity by ids.
func (m *UserMutation) AddCompanyIDs(ids ...xid.ID) {
	if m.companies == nil {
		m.companies = make(map[xid.ID]struct{})
	}
	for i := range ids {
		m.companies[ids[i]] = struct{}{}
	}
}

// ClearCompanies clears the "companies" edge to the Company entity.
func (m *UserMutation) ClearCompanies() {
	m.clearedcompanies = true
}

// CompaniesCleared reports if the "companies" edge to the Company entity was cleared.
func (m *UserMutation) CompaniesCleared() bool {
	return m.clearedcompanies
}

// RemoveCompanyIDs removes the "companies" edge to the Company entity by IDs.
func (m *UserMutation) RemoveCompanyIDs(ids ...xid.ID) {
	if m.removedcompanies == nil {
		m.removedcompanies = make(map[xid.ID]struct{})
	}
	for i := range ids {
		delete(m.companies, ids[i])
		m.removedcompanies[ids[i]] = struct{}{}
	}
}

// RemovedCompanies returns the removed IDs of the "companies" edge to the Company entity.
func (m *UserMutation) RemovedCompaniesIDs() (ids []xid.ID) {
	for id := range m.removedcompanies {
		ids = append(ids, id)
	}
	return
}

// CompaniesIDs returns the "companies" edge IDs in the mutation.
func (m *UserMutation) CompaniesIDs() (ids []xid.ID) {
	for id := range m.companies {
		ids = append(ids, id)
	}
	return
}

// ResetCompanies resets all changes to the "companies" edge.
func (m *UserMutation) ResetCompanies() {
	m.companies = nil
	m.clearedcompanies = false
	m.removedcompanies = nil
}

// AddJobPostIDs adds the "job_posts" edge to the JobPost entity by ids.
func (m *UserMutation) AddJobPostIDs(ids ...xid.ID) {
	if m.job_posts == nil {
		m.job_posts = make(map[xid.ID]struct{})
	}
	for i := range ids {
		m.job_posts[ids[i]] = struct{}{}
	}
}

// ClearJobPosts clears the "job_posts" edge to the JobPost entity.
func (m *UserMutation) ClearJobPosts() {
	m.clearedjob_posts = true
}

// JobPostsCleared reports if the "job_posts" edge to the JobPost entity was cleared.
func (m *UserMutation) JobPostsCleared() bool {
	return m.clearedjob_posts
}

// RemoveJobPostIDs removes the "job_posts" edge to the JobPost entity by IDs.
func (m *UserMutation) RemoveJobPostIDs(ids ...xid.ID) {
	if m.removedjob_posts == nil {
		m.removedjob_posts = make(map[xid.ID]struct{})
	}
	for i := range ids {
		delete(m.job_posts, ids[i])
		m.removedjob_posts[ids[i]] = struct{}{}
	}
}

// RemovedJobPosts returns the removed IDs of the "job_posts" edge to the JobPost entity.
func (m *UserMutation) RemovedJobPostsIDs() (ids []xid.ID) {
	for id := range m.removedjob_posts {
		ids = append(ids, id)
	}
	return
}

// JobPostsIDs returns the "job_posts" edge IDs in the mutation.
func (m *UserMutation) JobPostsIDs() (ids []xid.ID) {
	for id := range m.job_posts {
		ids = append(ids, id)
	}
	return
}

// ResetJobPosts resets all changes to the "job_posts" edge.
func (m *UserMutation) ResetJobPosts() {
	m.job_posts = nil
	m.clearedjob_posts = false
	m.removedjob_posts = nil
}

// AddAppliedToIDs adds the "applied_to" edge to the JobPost entity by ids.
func (m *UserMutation) AddAppliedToIDs(ids ...xid.ID) {
	if m.applied_to == nil {
		m.applied_to = make(map[xid.ID]struct{})
	}
	for i := range ids {
		m.applied_to[ids[i]] = struct{}{}
	}
}

// ClearAppliedTo clears the "applied_to" edge to the JobPost entity.
func (m *UserMutation) ClearAppliedTo() {
	m.clearedapplied_to = true
}

// AppliedToCleared reports if the "applied_to" edge to the JobPost entity was cleared.
func (m *UserMutation) AppliedToCleared() bool {
	return m.clearedapplied_to
}

// RemoveAppliedToIDs removes the "applied_to" edge to the JobPost entity by IDs.
func (m *UserMutation) RemoveAppliedToIDs(ids ...xid.ID) {
	if m.removedapplied_to == nil {
		m.removedapplied_to = make(map[xid.ID]struct{})
	}
	for i := range ids {
		delete(m.applied_to, ids[i])
		m.removedapplied_to[ids[i]] = struct{}{}
	}
}

// RemovedAppliedTo returns the removed IDs of the "applied_to" edge to the JobPost entity.
func (m *UserMutation) RemovedAppliedToIDs() (ids []xid.ID) {
	for id := range m.removedapplied_to {
		ids = append(ids, id)
	}
	return
}

// AppliedToIDs returns the "applied_to" edge IDs in the mutation.
func (m *UserMutation) AppliedToIDs() (ids []xid.ID) {
	for id := range m.applied_to {
		ids = append(ids, id)
	}
	return
}

// ResetAppliedTo resets all changes to the "applied_to" edge.
func (m *UserMutation) ResetAppliedTo() {
	m.applied_to = nil
	m.clearedapplied_to = false
	m.removedapplied_to = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.email_verified != nil {
		fields = append(fields, user.FieldEmailVerified)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmailVerified:
		return m.EmailVerified()
	case user.FieldRole:
		return m.Role()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmailVerified:
		return m.OldEmailVerified(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmailVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerified(v)
		return nil
	case user.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmailVerified:
		m.ResetEmailVerified()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.student_profile != nil {
		edges = append(edges, user.EdgeStudentProfile)
	}
	if m.college_profile != nil {
		edges = append(edges, user.EdgeCollegeProfile)
	}
	if m.candidates != nil {
		edges = append(edges, user.EdgeCandidates)
	}
	if m.enrolled_in != nil {
		edges = append(edges, user.EdgeEnrolledIn)
	}
	if m.companies != nil {
		edges = append(edges, user.EdgeCompanies)
	}
	if m.job_posts != nil {
		edges = append(edges, user.EdgeJobPosts)
	}
	if m.applied_to != nil {
		edges = append(edges, user.EdgeAppliedTo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeStudentProfile:
		if id := m.student_profile; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeCollegeProfile:
		if id := m.college_profile; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeCandidates:
		ids := make([]ent.Value, 0, len(m.candidates))
		for id := range m.candidates {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEnrolledIn:
		ids := make([]ent.Value, 0, len(m.enrolled_in))
		for id := range m.enrolled_in {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCompanies:
		ids := make([]ent.Value, 0, len(m.companies))
		for id := range m.companies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeJobPosts:
		ids := make([]ent.Value, 0, len(m.job_posts))
		for id := range m.job_posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAppliedTo:
		ids := make([]ent.Value, 0, len(m.applied_to))
		for id := range m.applied_to {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedcandidates != nil {
		edges = append(edges, user.EdgeCandidates)
	}
	if m.removedenrolled_in != nil {
		edges = append(edges, user.EdgeEnrolledIn)
	}
	if m.removedcompanies != nil {
		edges = append(edges, user.EdgeCompanies)
	}
	if m.removedjob_posts != nil {
		edges = append(edges, user.EdgeJobPosts)
	}
	if m.removedapplied_to != nil {
		edges = append(edges, user.EdgeAppliedTo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCandidates:
		ids := make([]ent.Value, 0, len(m.removedcandidates))
		for id := range m.removedcandidates {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEnrolledIn:
		ids := make([]ent.Value, 0, len(m.removedenrolled_in))
		for id := range m.removedenrolled_in {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCompanies:
		ids := make([]ent.Value, 0, len(m.removedcompanies))
		for id := range m.removedcompanies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeJobPosts:
		ids := make([]ent.Value, 0, len(m.removedjob_posts))
		for id := range m.removedjob_posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAppliedTo:
		ids := make([]ent.Value, 0, len(m.removedapplied_to))
		for id := range m.removedapplied_to {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedstudent_profile {
		edges = append(edges, user.EdgeStudentProfile)
	}
	if m.clearedcollege_profile {
		edges = append(edges, user.EdgeCollegeProfile)
	}
	if m.clearedcandidates {
		edges = append(edges, user.EdgeCandidates)
	}
	if m.clearedenrolled_in {
		edges = append(edges, user.EdgeEnrolledIn)
	}
	if m.clearedcompanies {
		edges = append(edges, user.EdgeCompanies)
	}
	if m.clearedjob_posts {
		edges = append(edges, user.EdgeJobPosts)
	}
	if m.clearedapplied_to {
		edges = append(edges, user.EdgeAppliedTo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeStudentProfile:
		return m.clearedstudent_profile
	case user.EdgeCollegeProfile:
		return m.clearedcollege_profile
	case user.EdgeCandidates:
		return m.clearedcandidates
	case user.EdgeEnrolledIn:
		return m.clearedenrolled_in
	case user.EdgeCompanies:
		return m.clearedcompanies
	case user.EdgeJobPosts:
		return m.clearedjob_posts
	case user.EdgeAppliedTo:
		return m.clearedapplied_to
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeStudentProfile:
		m.ClearStudentProfile()
		return nil
	case user.EdgeCollegeProfile:
		m.ClearCollegeProfile()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeStudentProfile:
		m.ResetStudentProfile()
		return nil
	case user.EdgeCollegeProfile:
		m.ResetCollegeProfile()
		return nil
	case user.EdgeCandidates:
		m.ResetCandidates()
		return nil
	case user.EdgeEnrolledIn:
		m.ResetEnrolledIn()
		return nil
	case user.EdgeCompanies:
		m.ResetCompanies()
		return nil
	case user.EdgeJobPosts:
		m.ResetJobPosts()
		return nil
	case user.EdgeAppliedTo:
		m.ResetAppliedTo()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
