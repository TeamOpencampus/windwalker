// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"windwalker/ent/company"
	"windwalker/ent/jobpost"
	"windwalker/ent/predicate"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCompanyName sets the "company_name" field.
func (cu *CompanyUpdate) SetCompanyName(s string) *CompanyUpdate {
	cu.mutation.SetCompanyName(s)
	return cu
}

// SetContactPersonName sets the "contact_person_name" field.
func (cu *CompanyUpdate) SetContactPersonName(s string) *CompanyUpdate {
	cu.mutation.SetContactPersonName(s)
	return cu
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (cu *CompanyUpdate) SetContactPersonEmail(s string) *CompanyUpdate {
	cu.mutation.SetContactPersonEmail(s)
	return cu
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (cu *CompanyUpdate) SetContactPersonPhone(s string) *CompanyUpdate {
	cu.mutation.SetContactPersonPhone(s)
	return cu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cu *CompanyUpdate) SetUserID(id xid.ID) *CompanyUpdate {
	cu.mutation.SetUserID(id)
	return cu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cu *CompanyUpdate) SetNillableUserID(id *xid.ID) *CompanyUpdate {
	if id != nil {
		cu = cu.SetUserID(*id)
	}
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CompanyUpdate) SetUser(u *User) *CompanyUpdate {
	return cu.SetUserID(u.ID)
}

// AddPostIDs adds the "posts" edge to the JobPost entity by IDs.
func (cu *CompanyUpdate) AddPostIDs(ids ...xid.ID) *CompanyUpdate {
	cu.mutation.AddPostIDs(ids...)
	return cu
}

// AddPosts adds the "posts" edges to the JobPost entity.
func (cu *CompanyUpdate) AddPosts(j ...*JobPost) *CompanyUpdate {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cu.AddPostIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CompanyUpdate) ClearUser() *CompanyUpdate {
	cu.mutation.ClearUser()
	return cu
}

// ClearPosts clears all "posts" edges to the JobPost entity.
func (cu *CompanyUpdate) ClearPosts() *CompanyUpdate {
	cu.mutation.ClearPosts()
	return cu
}

// RemovePostIDs removes the "posts" edge to JobPost entities by IDs.
func (cu *CompanyUpdate) RemovePostIDs(ids ...xid.ID) *CompanyUpdate {
	cu.mutation.RemovePostIDs(ids...)
	return cu
}

// RemovePosts removes "posts" edges to JobPost entities.
func (cu *CompanyUpdate) RemovePosts(j ...*JobPost) *CompanyUpdate {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.CompanyName(); ok {
		if err := company.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`ent: validator failed for field "Company.company_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ContactPersonName(); ok {
		if err := company.ContactPersonNameValidator(v); err != nil {
			return &ValidationError{Name: "contact_person_name", err: fmt.Errorf(`ent: validator failed for field "Company.contact_person_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ContactPersonEmail(); ok {
		if err := company.ContactPersonEmailValidator(v); err != nil {
			return &ValidationError{Name: "contact_person_email", err: fmt.Errorf(`ent: validator failed for field "Company.contact_person_email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ContactPersonPhone(); ok {
		if err := company.ContactPersonPhoneValidator(v); err != nil {
			return &ValidationError{Name: "contact_person_phone", err: fmt.Errorf(`ent: validator failed for field "Company.contact_person_phone": %w`, err)}
		}
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   company.Table,
			Columns: company.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: company.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldCompanyName,
		})
	}
	if value, ok := cu.mutation.ContactPersonName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldContactPersonName,
		})
	}
	if value, ok := cu.mutation.ContactPersonEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldContactPersonEmail,
		})
	}
	if value, ok := cu.mutation.ContactPersonPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldContactPersonPhone,
		})
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.UserTable,
			Columns: []string{company.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.UserTable,
			Columns: []string{company.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PostsTable,
			Columns: []string{company.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !cu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PostsTable,
			Columns: []string{company.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PostsTable,
			Columns: []string{company.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetCompanyName sets the "company_name" field.
func (cuo *CompanyUpdateOne) SetCompanyName(s string) *CompanyUpdateOne {
	cuo.mutation.SetCompanyName(s)
	return cuo
}

// SetContactPersonName sets the "contact_person_name" field.
func (cuo *CompanyUpdateOne) SetContactPersonName(s string) *CompanyUpdateOne {
	cuo.mutation.SetContactPersonName(s)
	return cuo
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (cuo *CompanyUpdateOne) SetContactPersonEmail(s string) *CompanyUpdateOne {
	cuo.mutation.SetContactPersonEmail(s)
	return cuo
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (cuo *CompanyUpdateOne) SetContactPersonPhone(s string) *CompanyUpdateOne {
	cuo.mutation.SetContactPersonPhone(s)
	return cuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cuo *CompanyUpdateOne) SetUserID(id xid.ID) *CompanyUpdateOne {
	cuo.mutation.SetUserID(id)
	return cuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableUserID(id *xid.ID) *CompanyUpdateOne {
	if id != nil {
		cuo = cuo.SetUserID(*id)
	}
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CompanyUpdateOne) SetUser(u *User) *CompanyUpdateOne {
	return cuo.SetUserID(u.ID)
}

// AddPostIDs adds the "posts" edge to the JobPost entity by IDs.
func (cuo *CompanyUpdateOne) AddPostIDs(ids ...xid.ID) *CompanyUpdateOne {
	cuo.mutation.AddPostIDs(ids...)
	return cuo
}

// AddPosts adds the "posts" edges to the JobPost entity.
func (cuo *CompanyUpdateOne) AddPosts(j ...*JobPost) *CompanyUpdateOne {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cuo.AddPostIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CompanyUpdateOne) ClearUser() *CompanyUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// ClearPosts clears all "posts" edges to the JobPost entity.
func (cuo *CompanyUpdateOne) ClearPosts() *CompanyUpdateOne {
	cuo.mutation.ClearPosts()
	return cuo
}

// RemovePostIDs removes the "posts" edge to JobPost entities by IDs.
func (cuo *CompanyUpdateOne) RemovePostIDs(ids ...xid.ID) *CompanyUpdateOne {
	cuo.mutation.RemovePostIDs(ids...)
	return cuo
}

// RemovePosts removes "posts" edges to JobPost entities.
func (cuo *CompanyUpdateOne) RemovePosts(j ...*JobPost) *CompanyUpdateOne {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cuo.RemovePostIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	var (
		err  error
		node *Company
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.CompanyName(); ok {
		if err := company.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`ent: validator failed for field "Company.company_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ContactPersonName(); ok {
		if err := company.ContactPersonNameValidator(v); err != nil {
			return &ValidationError{Name: "contact_person_name", err: fmt.Errorf(`ent: validator failed for field "Company.contact_person_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ContactPersonEmail(); ok {
		if err := company.ContactPersonEmailValidator(v); err != nil {
			return &ValidationError{Name: "contact_person_email", err: fmt.Errorf(`ent: validator failed for field "Company.contact_person_email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ContactPersonPhone(); ok {
		if err := company.ContactPersonPhoneValidator(v); err != nil {
			return &ValidationError{Name: "contact_person_phone", err: fmt.Errorf(`ent: validator failed for field "Company.contact_person_phone": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   company.Table,
			Columns: company.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: company.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldCompanyName,
		})
	}
	if value, ok := cuo.mutation.ContactPersonName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldContactPersonName,
		})
	}
	if value, ok := cuo.mutation.ContactPersonEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldContactPersonEmail,
		})
	}
	if value, ok := cuo.mutation.ContactPersonPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldContactPersonPhone,
		})
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.UserTable,
			Columns: []string{company.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.UserTable,
			Columns: []string{company.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PostsTable,
			Columns: []string{company.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !cuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PostsTable,
			Columns: []string{company.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PostsTable,
			Columns: []string{company.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
