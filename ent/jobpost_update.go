// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"windwalker/ent/company"
	"windwalker/ent/jobpost"
	"windwalker/ent/predicate"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// JobPostUpdate is the builder for updating JobPost entities.
type JobPostUpdate struct {
	config
	hooks    []Hook
	mutation *JobPostMutation
}

// Where appends a list predicates to the JobPostUpdate builder.
func (jpu *JobPostUpdate) Where(ps ...predicate.JobPost) *JobPostUpdate {
	jpu.mutation.Where(ps...)
	return jpu
}

// SetPosition sets the "position" field.
func (jpu *JobPostUpdate) SetPosition(s string) *JobPostUpdate {
	jpu.mutation.SetPosition(s)
	return jpu
}

// SetLocation sets the "location" field.
func (jpu *JobPostUpdate) SetLocation(s string) *JobPostUpdate {
	jpu.mutation.SetLocation(s)
	return jpu
}

// SetSalary sets the "salary" field.
func (jpu *JobPostUpdate) SetSalary(s string) *JobPostUpdate {
	jpu.mutation.SetSalary(s)
	return jpu
}

// SetDescription sets the "description" field.
func (jpu *JobPostUpdate) SetDescription(s string) *JobPostUpdate {
	jpu.mutation.SetDescription(s)
	return jpu
}

// SetTags sets the "tags" field.
func (jpu *JobPostUpdate) SetTags(s []string) *JobPostUpdate {
	jpu.mutation.SetTags(s)
	return jpu
}

// SetCreatedOn sets the "created_on" field.
func (jpu *JobPostUpdate) SetCreatedOn(t time.Time) *JobPostUpdate {
	jpu.mutation.SetCreatedOn(t)
	return jpu
}

// SetNillableCreatedOn sets the "created_on" field if the given value is not nil.
func (jpu *JobPostUpdate) SetNillableCreatedOn(t *time.Time) *JobPostUpdate {
	if t != nil {
		jpu.SetCreatedOn(*t)
	}
	return jpu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (jpu *JobPostUpdate) SetUserID(id xid.ID) *JobPostUpdate {
	jpu.mutation.SetUserID(id)
	return jpu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (jpu *JobPostUpdate) SetNillableUserID(id *xid.ID) *JobPostUpdate {
	if id != nil {
		jpu = jpu.SetUserID(*id)
	}
	return jpu
}

// SetUser sets the "user" edge to the User entity.
func (jpu *JobPostUpdate) SetUser(u *User) *JobPostUpdate {
	return jpu.SetUserID(u.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (jpu *JobPostUpdate) SetCompanyID(id xid.ID) *JobPostUpdate {
	jpu.mutation.SetCompanyID(id)
	return jpu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (jpu *JobPostUpdate) SetNillableCompanyID(id *xid.ID) *JobPostUpdate {
	if id != nil {
		jpu = jpu.SetCompanyID(*id)
	}
	return jpu
}

// SetCompany sets the "company" edge to the Company entity.
func (jpu *JobPostUpdate) SetCompany(c *Company) *JobPostUpdate {
	return jpu.SetCompanyID(c.ID)
}

// AddCandidateIDs adds the "candidates" edge to the User entity by IDs.
func (jpu *JobPostUpdate) AddCandidateIDs(ids ...xid.ID) *JobPostUpdate {
	jpu.mutation.AddCandidateIDs(ids...)
	return jpu
}

// AddCandidates adds the "candidates" edges to the User entity.
func (jpu *JobPostUpdate) AddCandidates(u ...*User) *JobPostUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return jpu.AddCandidateIDs(ids...)
}

// Mutation returns the JobPostMutation object of the builder.
func (jpu *JobPostUpdate) Mutation() *JobPostMutation {
	return jpu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (jpu *JobPostUpdate) ClearUser() *JobPostUpdate {
	jpu.mutation.ClearUser()
	return jpu
}

// ClearCompany clears the "company" edge to the Company entity.
func (jpu *JobPostUpdate) ClearCompany() *JobPostUpdate {
	jpu.mutation.ClearCompany()
	return jpu
}

// ClearCandidates clears all "candidates" edges to the User entity.
func (jpu *JobPostUpdate) ClearCandidates() *JobPostUpdate {
	jpu.mutation.ClearCandidates()
	return jpu
}

// RemoveCandidateIDs removes the "candidates" edge to User entities by IDs.
func (jpu *JobPostUpdate) RemoveCandidateIDs(ids ...xid.ID) *JobPostUpdate {
	jpu.mutation.RemoveCandidateIDs(ids...)
	return jpu
}

// RemoveCandidates removes "candidates" edges to User entities.
func (jpu *JobPostUpdate) RemoveCandidates(u ...*User) *JobPostUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return jpu.RemoveCandidateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jpu *JobPostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(jpu.hooks) == 0 {
		if err = jpu.check(); err != nil {
			return 0, err
		}
		affected, err = jpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jpu.check(); err != nil {
				return 0, err
			}
			jpu.mutation = mutation
			affected, err = jpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(jpu.hooks) - 1; i >= 0; i-- {
			if jpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (jpu *JobPostUpdate) SaveX(ctx context.Context) int {
	affected, err := jpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jpu *JobPostUpdate) Exec(ctx context.Context) error {
	_, err := jpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpu *JobPostUpdate) ExecX(ctx context.Context) {
	if err := jpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jpu *JobPostUpdate) check() error {
	if v, ok := jpu.mutation.Position(); ok {
		if err := jobpost.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "JobPost.position": %w`, err)}
		}
	}
	if v, ok := jpu.mutation.Location(); ok {
		if err := jobpost.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "JobPost.location": %w`, err)}
		}
	}
	if v, ok := jpu.mutation.Salary(); ok {
		if err := jobpost.SalaryValidator(v); err != nil {
			return &ValidationError{Name: "salary", err: fmt.Errorf(`ent: validator failed for field "JobPost.salary": %w`, err)}
		}
	}
	if v, ok := jpu.mutation.Description(); ok {
		if err := jobpost.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "JobPost.description": %w`, err)}
		}
	}
	return nil
}

func (jpu *JobPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobpost.Table,
			Columns: jobpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jobpost.FieldID,
			},
		},
	}
	if ps := jpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jpu.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldPosition,
		})
	}
	if value, ok := jpu.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldLocation,
		})
	}
	if value, ok := jpu.mutation.Salary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldSalary,
		})
	}
	if value, ok := jpu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldDescription,
		})
	}
	if value, ok := jpu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: jobpost.FieldTags,
		})
	}
	if value, ok := jpu.mutation.CreatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jobpost.FieldCreatedOn,
		})
	}
	if jpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.UserTable,
			Columns: []string{jobpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.UserTable,
			Columns: []string{jobpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.CompanyTable,
			Columns: []string{jobpost.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.CompanyTable,
			Columns: []string{jobpost.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpu.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobpost.CandidatesTable,
			Columns: jobpost.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !jpu.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobpost.CandidatesTable,
			Columns: jobpost.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobpost.CandidatesTable,
			Columns: jobpost.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// JobPostUpdateOne is the builder for updating a single JobPost entity.
type JobPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobPostMutation
}

// SetPosition sets the "position" field.
func (jpuo *JobPostUpdateOne) SetPosition(s string) *JobPostUpdateOne {
	jpuo.mutation.SetPosition(s)
	return jpuo
}

// SetLocation sets the "location" field.
func (jpuo *JobPostUpdateOne) SetLocation(s string) *JobPostUpdateOne {
	jpuo.mutation.SetLocation(s)
	return jpuo
}

// SetSalary sets the "salary" field.
func (jpuo *JobPostUpdateOne) SetSalary(s string) *JobPostUpdateOne {
	jpuo.mutation.SetSalary(s)
	return jpuo
}

// SetDescription sets the "description" field.
func (jpuo *JobPostUpdateOne) SetDescription(s string) *JobPostUpdateOne {
	jpuo.mutation.SetDescription(s)
	return jpuo
}

// SetTags sets the "tags" field.
func (jpuo *JobPostUpdateOne) SetTags(s []string) *JobPostUpdateOne {
	jpuo.mutation.SetTags(s)
	return jpuo
}

// SetCreatedOn sets the "created_on" field.
func (jpuo *JobPostUpdateOne) SetCreatedOn(t time.Time) *JobPostUpdateOne {
	jpuo.mutation.SetCreatedOn(t)
	return jpuo
}

// SetNillableCreatedOn sets the "created_on" field if the given value is not nil.
func (jpuo *JobPostUpdateOne) SetNillableCreatedOn(t *time.Time) *JobPostUpdateOne {
	if t != nil {
		jpuo.SetCreatedOn(*t)
	}
	return jpuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (jpuo *JobPostUpdateOne) SetUserID(id xid.ID) *JobPostUpdateOne {
	jpuo.mutation.SetUserID(id)
	return jpuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (jpuo *JobPostUpdateOne) SetNillableUserID(id *xid.ID) *JobPostUpdateOne {
	if id != nil {
		jpuo = jpuo.SetUserID(*id)
	}
	return jpuo
}

// SetUser sets the "user" edge to the User entity.
func (jpuo *JobPostUpdateOne) SetUser(u *User) *JobPostUpdateOne {
	return jpuo.SetUserID(u.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (jpuo *JobPostUpdateOne) SetCompanyID(id xid.ID) *JobPostUpdateOne {
	jpuo.mutation.SetCompanyID(id)
	return jpuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (jpuo *JobPostUpdateOne) SetNillableCompanyID(id *xid.ID) *JobPostUpdateOne {
	if id != nil {
		jpuo = jpuo.SetCompanyID(*id)
	}
	return jpuo
}

// SetCompany sets the "company" edge to the Company entity.
func (jpuo *JobPostUpdateOne) SetCompany(c *Company) *JobPostUpdateOne {
	return jpuo.SetCompanyID(c.ID)
}

// AddCandidateIDs adds the "candidates" edge to the User entity by IDs.
func (jpuo *JobPostUpdateOne) AddCandidateIDs(ids ...xid.ID) *JobPostUpdateOne {
	jpuo.mutation.AddCandidateIDs(ids...)
	return jpuo
}

// AddCandidates adds the "candidates" edges to the User entity.
func (jpuo *JobPostUpdateOne) AddCandidates(u ...*User) *JobPostUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return jpuo.AddCandidateIDs(ids...)
}

// Mutation returns the JobPostMutation object of the builder.
func (jpuo *JobPostUpdateOne) Mutation() *JobPostMutation {
	return jpuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (jpuo *JobPostUpdateOne) ClearUser() *JobPostUpdateOne {
	jpuo.mutation.ClearUser()
	return jpuo
}

// ClearCompany clears the "company" edge to the Company entity.
func (jpuo *JobPostUpdateOne) ClearCompany() *JobPostUpdateOne {
	jpuo.mutation.ClearCompany()
	return jpuo
}

// ClearCandidates clears all "candidates" edges to the User entity.
func (jpuo *JobPostUpdateOne) ClearCandidates() *JobPostUpdateOne {
	jpuo.mutation.ClearCandidates()
	return jpuo
}

// RemoveCandidateIDs removes the "candidates" edge to User entities by IDs.
func (jpuo *JobPostUpdateOne) RemoveCandidateIDs(ids ...xid.ID) *JobPostUpdateOne {
	jpuo.mutation.RemoveCandidateIDs(ids...)
	return jpuo
}

// RemoveCandidates removes "candidates" edges to User entities.
func (jpuo *JobPostUpdateOne) RemoveCandidates(u ...*User) *JobPostUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return jpuo.RemoveCandidateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jpuo *JobPostUpdateOne) Select(field string, fields ...string) *JobPostUpdateOne {
	jpuo.fields = append([]string{field}, fields...)
	return jpuo
}

// Save executes the query and returns the updated JobPost entity.
func (jpuo *JobPostUpdateOne) Save(ctx context.Context) (*JobPost, error) {
	var (
		err  error
		node *JobPost
	)
	if len(jpuo.hooks) == 0 {
		if err = jpuo.check(); err != nil {
			return nil, err
		}
		node, err = jpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jpuo.check(); err != nil {
				return nil, err
			}
			jpuo.mutation = mutation
			node, err = jpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(jpuo.hooks) - 1; i >= 0; i-- {
			if jpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (jpuo *JobPostUpdateOne) SaveX(ctx context.Context) *JobPost {
	node, err := jpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jpuo *JobPostUpdateOne) Exec(ctx context.Context) error {
	_, err := jpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpuo *JobPostUpdateOne) ExecX(ctx context.Context) {
	if err := jpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jpuo *JobPostUpdateOne) check() error {
	if v, ok := jpuo.mutation.Position(); ok {
		if err := jobpost.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "JobPost.position": %w`, err)}
		}
	}
	if v, ok := jpuo.mutation.Location(); ok {
		if err := jobpost.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "JobPost.location": %w`, err)}
		}
	}
	if v, ok := jpuo.mutation.Salary(); ok {
		if err := jobpost.SalaryValidator(v); err != nil {
			return &ValidationError{Name: "salary", err: fmt.Errorf(`ent: validator failed for field "JobPost.salary": %w`, err)}
		}
	}
	if v, ok := jpuo.mutation.Description(); ok {
		if err := jobpost.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "JobPost.description": %w`, err)}
		}
	}
	return nil
}

func (jpuo *JobPostUpdateOne) sqlSave(ctx context.Context) (_node *JobPost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobpost.Table,
			Columns: jobpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jobpost.FieldID,
			},
		},
	}
	id, ok := jpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobpost.FieldID)
		for _, f := range fields {
			if !jobpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jpuo.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldPosition,
		})
	}
	if value, ok := jpuo.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldLocation,
		})
	}
	if value, ok := jpuo.mutation.Salary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldSalary,
		})
	}
	if value, ok := jpuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldDescription,
		})
	}
	if value, ok := jpuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: jobpost.FieldTags,
		})
	}
	if value, ok := jpuo.mutation.CreatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jobpost.FieldCreatedOn,
		})
	}
	if jpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.UserTable,
			Columns: []string{jobpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.UserTable,
			Columns: []string{jobpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.CompanyTable,
			Columns: []string{jobpost.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.CompanyTable,
			Columns: []string{jobpost.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jpuo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobpost.CandidatesTable,
			Columns: jobpost.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !jpuo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobpost.CandidatesTable,
			Columns: jobpost.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobpost.CandidatesTable,
			Columns: jobpost.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobPost{config: jpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
