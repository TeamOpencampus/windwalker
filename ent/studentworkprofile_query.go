// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"windwalker/ent/predicate"
	"windwalker/ent/studentprofile"
	"windwalker/ent/studentworkprofile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// StudentWorkProfileQuery is the builder for querying StudentWorkProfile entities.
type StudentWorkProfileQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.StudentWorkProfile
	// eager-loading edges.
	withStudentProfile *StudentProfileQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StudentWorkProfileQuery builder.
func (swpq *StudentWorkProfileQuery) Where(ps ...predicate.StudentWorkProfile) *StudentWorkProfileQuery {
	swpq.predicates = append(swpq.predicates, ps...)
	return swpq
}

// Limit adds a limit step to the query.
func (swpq *StudentWorkProfileQuery) Limit(limit int) *StudentWorkProfileQuery {
	swpq.limit = &limit
	return swpq
}

// Offset adds an offset step to the query.
func (swpq *StudentWorkProfileQuery) Offset(offset int) *StudentWorkProfileQuery {
	swpq.offset = &offset
	return swpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (swpq *StudentWorkProfileQuery) Unique(unique bool) *StudentWorkProfileQuery {
	swpq.unique = &unique
	return swpq
}

// Order adds an order step to the query.
func (swpq *StudentWorkProfileQuery) Order(o ...OrderFunc) *StudentWorkProfileQuery {
	swpq.order = append(swpq.order, o...)
	return swpq
}

// QueryStudentProfile chains the current query on the "student_profile" edge.
func (swpq *StudentWorkProfileQuery) QueryStudentProfile() *StudentProfileQuery {
	query := &StudentProfileQuery{config: swpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := swpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := swpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(studentworkprofile.Table, studentworkprofile.FieldID, selector),
			sqlgraph.To(studentprofile.Table, studentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studentworkprofile.StudentProfileTable, studentworkprofile.StudentProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(swpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first StudentWorkProfile entity from the query.
// Returns a *NotFoundError when no StudentWorkProfile was found.
func (swpq *StudentWorkProfileQuery) First(ctx context.Context) (*StudentWorkProfile, error) {
	nodes, err := swpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{studentworkprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (swpq *StudentWorkProfileQuery) FirstX(ctx context.Context) *StudentWorkProfile {
	node, err := swpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first StudentWorkProfile ID from the query.
// Returns a *NotFoundError when no StudentWorkProfile ID was found.
func (swpq *StudentWorkProfileQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = swpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{studentworkprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (swpq *StudentWorkProfileQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := swpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single StudentWorkProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one StudentWorkProfile entity is found.
// Returns a *NotFoundError when no StudentWorkProfile entities are found.
func (swpq *StudentWorkProfileQuery) Only(ctx context.Context) (*StudentWorkProfile, error) {
	nodes, err := swpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{studentworkprofile.Label}
	default:
		return nil, &NotSingularError{studentworkprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (swpq *StudentWorkProfileQuery) OnlyX(ctx context.Context) *StudentWorkProfile {
	node, err := swpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only StudentWorkProfile ID in the query.
// Returns a *NotSingularError when more than one StudentWorkProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (swpq *StudentWorkProfileQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = swpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{studentworkprofile.Label}
	default:
		err = &NotSingularError{studentworkprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (swpq *StudentWorkProfileQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := swpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of StudentWorkProfiles.
func (swpq *StudentWorkProfileQuery) All(ctx context.Context) ([]*StudentWorkProfile, error) {
	if err := swpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return swpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (swpq *StudentWorkProfileQuery) AllX(ctx context.Context) []*StudentWorkProfile {
	nodes, err := swpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of StudentWorkProfile IDs.
func (swpq *StudentWorkProfileQuery) IDs(ctx context.Context) ([]xid.ID, error) {
	var ids []xid.ID
	if err := swpq.Select(studentworkprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (swpq *StudentWorkProfileQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := swpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (swpq *StudentWorkProfileQuery) Count(ctx context.Context) (int, error) {
	if err := swpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return swpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (swpq *StudentWorkProfileQuery) CountX(ctx context.Context) int {
	count, err := swpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (swpq *StudentWorkProfileQuery) Exist(ctx context.Context) (bool, error) {
	if err := swpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return swpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (swpq *StudentWorkProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := swpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StudentWorkProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (swpq *StudentWorkProfileQuery) Clone() *StudentWorkProfileQuery {
	if swpq == nil {
		return nil
	}
	return &StudentWorkProfileQuery{
		config:             swpq.config,
		limit:              swpq.limit,
		offset:             swpq.offset,
		order:              append([]OrderFunc{}, swpq.order...),
		predicates:         append([]predicate.StudentWorkProfile{}, swpq.predicates...),
		withStudentProfile: swpq.withStudentProfile.Clone(),
		// clone intermediate query.
		sql:    swpq.sql.Clone(),
		path:   swpq.path,
		unique: swpq.unique,
	}
}

// WithStudentProfile tells the query-builder to eager-load the nodes that are connected to
// the "student_profile" edge. The optional arguments are used to configure the query builder of the edge.
func (swpq *StudentWorkProfileQuery) WithStudentProfile(opts ...func(*StudentProfileQuery)) *StudentWorkProfileQuery {
	query := &StudentProfileQuery{config: swpq.config}
	for _, opt := range opts {
		opt(query)
	}
	swpq.withStudentProfile = query
	return swpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (swpq *StudentWorkProfileQuery) GroupBy(field string, fields ...string) *StudentWorkProfileGroupBy {
	group := &StudentWorkProfileGroupBy{config: swpq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := swpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return swpq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (swpq *StudentWorkProfileQuery) Select(fields ...string) *StudentWorkProfileSelect {
	swpq.fields = append(swpq.fields, fields...)
	return &StudentWorkProfileSelect{StudentWorkProfileQuery: swpq}
}

func (swpq *StudentWorkProfileQuery) prepareQuery(ctx context.Context) error {
	for _, f := range swpq.fields {
		if !studentworkprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if swpq.path != nil {
		prev, err := swpq.path(ctx)
		if err != nil {
			return err
		}
		swpq.sql = prev
	}
	return nil
}

func (swpq *StudentWorkProfileQuery) sqlAll(ctx context.Context) ([]*StudentWorkProfile, error) {
	var (
		nodes       = []*StudentWorkProfile{}
		withFKs     = swpq.withFKs
		_spec       = swpq.querySpec()
		loadedTypes = [1]bool{
			swpq.withStudentProfile != nil,
		}
	)
	if swpq.withStudentProfile != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, studentworkprofile.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &StudentWorkProfile{config: swpq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, swpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := swpq.withStudentProfile; query != nil {
		ids := make([]xid.ID, 0, len(nodes))
		nodeids := make(map[xid.ID][]*StudentWorkProfile)
		for i := range nodes {
			if nodes[i].student_profile_work_profile == nil {
				continue
			}
			fk := *nodes[i].student_profile_work_profile
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(studentprofile.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "student_profile_work_profile" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.StudentProfile = n
			}
		}
	}

	return nodes, nil
}

func (swpq *StudentWorkProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := swpq.querySpec()
	_spec.Node.Columns = swpq.fields
	if len(swpq.fields) > 0 {
		_spec.Unique = swpq.unique != nil && *swpq.unique
	}
	return sqlgraph.CountNodes(ctx, swpq.driver, _spec)
}

func (swpq *StudentWorkProfileQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := swpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (swpq *StudentWorkProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studentworkprofile.Table,
			Columns: studentworkprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studentworkprofile.FieldID,
			},
		},
		From:   swpq.sql,
		Unique: true,
	}
	if unique := swpq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := swpq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studentworkprofile.FieldID)
		for i := range fields {
			if fields[i] != studentworkprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := swpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := swpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := swpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := swpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (swpq *StudentWorkProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(swpq.driver.Dialect())
	t1 := builder.Table(studentworkprofile.Table)
	columns := swpq.fields
	if len(columns) == 0 {
		columns = studentworkprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if swpq.sql != nil {
		selector = swpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if swpq.unique != nil && *swpq.unique {
		selector.Distinct()
	}
	for _, p := range swpq.predicates {
		p(selector)
	}
	for _, p := range swpq.order {
		p(selector)
	}
	if offset := swpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := swpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// StudentWorkProfileGroupBy is the group-by builder for StudentWorkProfile entities.
type StudentWorkProfileGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (swpgb *StudentWorkProfileGroupBy) Aggregate(fns ...AggregateFunc) *StudentWorkProfileGroupBy {
	swpgb.fns = append(swpgb.fns, fns...)
	return swpgb
}

// Scan applies the group-by query and scans the result into the given value.
func (swpgb *StudentWorkProfileGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := swpgb.path(ctx)
	if err != nil {
		return err
	}
	swpgb.sql = query
	return swpgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (swpgb *StudentWorkProfileGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := swpgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (swpgb *StudentWorkProfileGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(swpgb.fields) > 1 {
		return nil, errors.New("ent: StudentWorkProfileGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := swpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (swpgb *StudentWorkProfileGroupBy) StringsX(ctx context.Context) []string {
	v, err := swpgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (swpgb *StudentWorkProfileGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = swpgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{studentworkprofile.Label}
	default:
		err = fmt.Errorf("ent: StudentWorkProfileGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (swpgb *StudentWorkProfileGroupBy) StringX(ctx context.Context) string {
	v, err := swpgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (swpgb *StudentWorkProfileGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(swpgb.fields) > 1 {
		return nil, errors.New("ent: StudentWorkProfileGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := swpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (swpgb *StudentWorkProfileGroupBy) IntsX(ctx context.Context) []int {
	v, err := swpgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (swpgb *StudentWorkProfileGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = swpgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{studentworkprofile.Label}
	default:
		err = fmt.Errorf("ent: StudentWorkProfileGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (swpgb *StudentWorkProfileGroupBy) IntX(ctx context.Context) int {
	v, err := swpgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (swpgb *StudentWorkProfileGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(swpgb.fields) > 1 {
		return nil, errors.New("ent: StudentWorkProfileGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := swpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (swpgb *StudentWorkProfileGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := swpgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (swpgb *StudentWorkProfileGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = swpgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{studentworkprofile.Label}
	default:
		err = fmt.Errorf("ent: StudentWorkProfileGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (swpgb *StudentWorkProfileGroupBy) Float64X(ctx context.Context) float64 {
	v, err := swpgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (swpgb *StudentWorkProfileGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(swpgb.fields) > 1 {
		return nil, errors.New("ent: StudentWorkProfileGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := swpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (swpgb *StudentWorkProfileGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := swpgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (swpgb *StudentWorkProfileGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = swpgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{studentworkprofile.Label}
	default:
		err = fmt.Errorf("ent: StudentWorkProfileGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (swpgb *StudentWorkProfileGroupBy) BoolX(ctx context.Context) bool {
	v, err := swpgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (swpgb *StudentWorkProfileGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range swpgb.fields {
		if !studentworkprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := swpgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := swpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (swpgb *StudentWorkProfileGroupBy) sqlQuery() *sql.Selector {
	selector := swpgb.sql.Select()
	aggregation := make([]string, 0, len(swpgb.fns))
	for _, fn := range swpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(swpgb.fields)+len(swpgb.fns))
		for _, f := range swpgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(swpgb.fields...)...)
}

// StudentWorkProfileSelect is the builder for selecting fields of StudentWorkProfile entities.
type StudentWorkProfileSelect struct {
	*StudentWorkProfileQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (swps *StudentWorkProfileSelect) Scan(ctx context.Context, v interface{}) error {
	if err := swps.prepareQuery(ctx); err != nil {
		return err
	}
	swps.sql = swps.StudentWorkProfileQuery.sqlQuery(ctx)
	return swps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (swps *StudentWorkProfileSelect) ScanX(ctx context.Context, v interface{}) {
	if err := swps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (swps *StudentWorkProfileSelect) Strings(ctx context.Context) ([]string, error) {
	if len(swps.fields) > 1 {
		return nil, errors.New("ent: StudentWorkProfileSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := swps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (swps *StudentWorkProfileSelect) StringsX(ctx context.Context) []string {
	v, err := swps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (swps *StudentWorkProfileSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = swps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{studentworkprofile.Label}
	default:
		err = fmt.Errorf("ent: StudentWorkProfileSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (swps *StudentWorkProfileSelect) StringX(ctx context.Context) string {
	v, err := swps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (swps *StudentWorkProfileSelect) Ints(ctx context.Context) ([]int, error) {
	if len(swps.fields) > 1 {
		return nil, errors.New("ent: StudentWorkProfileSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := swps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (swps *StudentWorkProfileSelect) IntsX(ctx context.Context) []int {
	v, err := swps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (swps *StudentWorkProfileSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = swps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{studentworkprofile.Label}
	default:
		err = fmt.Errorf("ent: StudentWorkProfileSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (swps *StudentWorkProfileSelect) IntX(ctx context.Context) int {
	v, err := swps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (swps *StudentWorkProfileSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(swps.fields) > 1 {
		return nil, errors.New("ent: StudentWorkProfileSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := swps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (swps *StudentWorkProfileSelect) Float64sX(ctx context.Context) []float64 {
	v, err := swps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (swps *StudentWorkProfileSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = swps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{studentworkprofile.Label}
	default:
		err = fmt.Errorf("ent: StudentWorkProfileSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (swps *StudentWorkProfileSelect) Float64X(ctx context.Context) float64 {
	v, err := swps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (swps *StudentWorkProfileSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(swps.fields) > 1 {
		return nil, errors.New("ent: StudentWorkProfileSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := swps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (swps *StudentWorkProfileSelect) BoolsX(ctx context.Context) []bool {
	v, err := swps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (swps *StudentWorkProfileSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = swps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{studentworkprofile.Label}
	default:
		err = fmt.Errorf("ent: StudentWorkProfileSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (swps *StudentWorkProfileSelect) BoolX(ctx context.Context) bool {
	v, err := swps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (swps *StudentWorkProfileSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := swps.sql.Query()
	if err := swps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
