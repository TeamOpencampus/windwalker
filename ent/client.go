// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"windwalker/ent/migrate"

	"windwalker/ent/collegeprofile"
	"windwalker/ent/company"
	"windwalker/ent/jobpost"
	"windwalker/ent/studentacademicprofile"
	"windwalker/ent/studentprofile"
	"windwalker/ent/studentworkprofile"
	"windwalker/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CollegeProfile is the client for interacting with the CollegeProfile builders.
	CollegeProfile *CollegeProfileClient
	// Company is the client for interacting with the Company builders.
	Company *CompanyClient
	// JobPost is the client for interacting with the JobPost builders.
	JobPost *JobPostClient
	// StudentAcademicProfile is the client for interacting with the StudentAcademicProfile builders.
	StudentAcademicProfile *StudentAcademicProfileClient
	// StudentProfile is the client for interacting with the StudentProfile builders.
	StudentProfile *StudentProfileClient
	// StudentWorkProfile is the client for interacting with the StudentWorkProfile builders.
	StudentWorkProfile *StudentWorkProfileClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CollegeProfile = NewCollegeProfileClient(c.config)
	c.Company = NewCompanyClient(c.config)
	c.JobPost = NewJobPostClient(c.config)
	c.StudentAcademicProfile = NewStudentAcademicProfileClient(c.config)
	c.StudentProfile = NewStudentProfileClient(c.config)
	c.StudentWorkProfile = NewStudentWorkProfileClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		CollegeProfile:         NewCollegeProfileClient(cfg),
		Company:                NewCompanyClient(cfg),
		JobPost:                NewJobPostClient(cfg),
		StudentAcademicProfile: NewStudentAcademicProfileClient(cfg),
		StudentProfile:         NewStudentProfileClient(cfg),
		StudentWorkProfile:     NewStudentWorkProfileClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		CollegeProfile:         NewCollegeProfileClient(cfg),
		Company:                NewCompanyClient(cfg),
		JobPost:                NewJobPostClient(cfg),
		StudentAcademicProfile: NewStudentAcademicProfileClient(cfg),
		StudentProfile:         NewStudentProfileClient(cfg),
		StudentWorkProfile:     NewStudentWorkProfileClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CollegeProfile.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CollegeProfile.Use(hooks...)
	c.Company.Use(hooks...)
	c.JobPost.Use(hooks...)
	c.StudentAcademicProfile.Use(hooks...)
	c.StudentProfile.Use(hooks...)
	c.StudentWorkProfile.Use(hooks...)
	c.User.Use(hooks...)
}

// CollegeProfileClient is a client for the CollegeProfile schema.
type CollegeProfileClient struct {
	config
}

// NewCollegeProfileClient returns a client for the CollegeProfile from the given config.
func NewCollegeProfileClient(c config) *CollegeProfileClient {
	return &CollegeProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `collegeprofile.Hooks(f(g(h())))`.
func (c *CollegeProfileClient) Use(hooks ...Hook) {
	c.hooks.CollegeProfile = append(c.hooks.CollegeProfile, hooks...)
}

// Create returns a create builder for CollegeProfile.
func (c *CollegeProfileClient) Create() *CollegeProfileCreate {
	mutation := newCollegeProfileMutation(c.config, OpCreate)
	return &CollegeProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CollegeProfile entities.
func (c *CollegeProfileClient) CreateBulk(builders ...*CollegeProfileCreate) *CollegeProfileCreateBulk {
	return &CollegeProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CollegeProfile.
func (c *CollegeProfileClient) Update() *CollegeProfileUpdate {
	mutation := newCollegeProfileMutation(c.config, OpUpdate)
	return &CollegeProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CollegeProfileClient) UpdateOne(cp *CollegeProfile) *CollegeProfileUpdateOne {
	mutation := newCollegeProfileMutation(c.config, OpUpdateOne, withCollegeProfile(cp))
	return &CollegeProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CollegeProfileClient) UpdateOneID(id string) *CollegeProfileUpdateOne {
	mutation := newCollegeProfileMutation(c.config, OpUpdateOne, withCollegeProfileID(id))
	return &CollegeProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CollegeProfile.
func (c *CollegeProfileClient) Delete() *CollegeProfileDelete {
	mutation := newCollegeProfileMutation(c.config, OpDelete)
	return &CollegeProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CollegeProfileClient) DeleteOne(cp *CollegeProfile) *CollegeProfileDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CollegeProfileClient) DeleteOneID(id string) *CollegeProfileDeleteOne {
	builder := c.Delete().Where(collegeprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CollegeProfileDeleteOne{builder}
}

// Query returns a query builder for CollegeProfile.
func (c *CollegeProfileClient) Query() *CollegeProfileQuery {
	return &CollegeProfileQuery{
		config: c.config,
	}
}

// Get returns a CollegeProfile entity by its id.
func (c *CollegeProfileClient) Get(ctx context.Context, id string) (*CollegeProfile, error) {
	return c.Query().Where(collegeprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CollegeProfileClient) GetX(ctx context.Context, id string) *CollegeProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a CollegeProfile.
func (c *CollegeProfileClient) QueryUser(cp *CollegeProfile) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(collegeprofile.Table, collegeprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, collegeprofile.UserTable, collegeprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CollegeProfileClient) Hooks() []Hook {
	return c.hooks.CollegeProfile
}

// CompanyClient is a client for the Company schema.
type CompanyClient struct {
	config
}

// NewCompanyClient returns a client for the Company from the given config.
func NewCompanyClient(c config) *CompanyClient {
	return &CompanyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `company.Hooks(f(g(h())))`.
func (c *CompanyClient) Use(hooks ...Hook) {
	c.hooks.Company = append(c.hooks.Company, hooks...)
}

// Create returns a create builder for Company.
func (c *CompanyClient) Create() *CompanyCreate {
	mutation := newCompanyMutation(c.config, OpCreate)
	return &CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Company entities.
func (c *CompanyClient) CreateBulk(builders ...*CompanyCreate) *CompanyCreateBulk {
	return &CompanyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Company.
func (c *CompanyClient) Update() *CompanyUpdate {
	mutation := newCompanyMutation(c.config, OpUpdate)
	return &CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyClient) UpdateOne(co *Company) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompany(co))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyClient) UpdateOneID(id xid.ID) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompanyID(id))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Company.
func (c *CompanyClient) Delete() *CompanyDelete {
	mutation := newCompanyMutation(c.config, OpDelete)
	return &CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CompanyClient) DeleteOne(co *Company) *CompanyDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CompanyClient) DeleteOneID(id xid.ID) *CompanyDeleteOne {
	builder := c.Delete().Where(company.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyDeleteOne{builder}
}

// Query returns a query builder for Company.
func (c *CompanyClient) Query() *CompanyQuery {
	return &CompanyQuery{
		config: c.config,
	}
}

// Get returns a Company entity by its id.
func (c *CompanyClient) Get(ctx context.Context, id xid.ID) (*Company, error) {
	return c.Query().Where(company.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyClient) GetX(ctx context.Context, id xid.ID) *Company {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Company.
func (c *CompanyClient) QueryUser(co *Company) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, company.UserTable, company.UserColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPosts queries the posts edge of a Company.
func (c *CompanyClient) QueryPosts(co *Company) *JobPostQuery {
	query := &JobPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(jobpost.Table, jobpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.PostsTable, company.PostsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompanyClient) Hooks() []Hook {
	return c.hooks.Company
}

// JobPostClient is a client for the JobPost schema.
type JobPostClient struct {
	config
}

// NewJobPostClient returns a client for the JobPost from the given config.
func NewJobPostClient(c config) *JobPostClient {
	return &JobPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobpost.Hooks(f(g(h())))`.
func (c *JobPostClient) Use(hooks ...Hook) {
	c.hooks.JobPost = append(c.hooks.JobPost, hooks...)
}

// Create returns a create builder for JobPost.
func (c *JobPostClient) Create() *JobPostCreate {
	mutation := newJobPostMutation(c.config, OpCreate)
	return &JobPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobPost entities.
func (c *JobPostClient) CreateBulk(builders ...*JobPostCreate) *JobPostCreateBulk {
	return &JobPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobPost.
func (c *JobPostClient) Update() *JobPostUpdate {
	mutation := newJobPostMutation(c.config, OpUpdate)
	return &JobPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobPostClient) UpdateOne(jp *JobPost) *JobPostUpdateOne {
	mutation := newJobPostMutation(c.config, OpUpdateOne, withJobPost(jp))
	return &JobPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobPostClient) UpdateOneID(id xid.ID) *JobPostUpdateOne {
	mutation := newJobPostMutation(c.config, OpUpdateOne, withJobPostID(id))
	return &JobPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobPost.
func (c *JobPostClient) Delete() *JobPostDelete {
	mutation := newJobPostMutation(c.config, OpDelete)
	return &JobPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *JobPostClient) DeleteOne(jp *JobPost) *JobPostDeleteOne {
	return c.DeleteOneID(jp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *JobPostClient) DeleteOneID(id xid.ID) *JobPostDeleteOne {
	builder := c.Delete().Where(jobpost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobPostDeleteOne{builder}
}

// Query returns a query builder for JobPost.
func (c *JobPostClient) Query() *JobPostQuery {
	return &JobPostQuery{
		config: c.config,
	}
}

// Get returns a JobPost entity by its id.
func (c *JobPostClient) Get(ctx context.Context, id xid.ID) (*JobPost, error) {
	return c.Query().Where(jobpost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobPostClient) GetX(ctx context.Context, id xid.ID) *JobPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a JobPost.
func (c *JobPostClient) QueryUser(jp *JobPost) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobpost.Table, jobpost.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobpost.UserTable, jobpost.UserColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompany queries the company edge of a JobPost.
func (c *JobPostClient) QueryCompany(jp *JobPost) *CompanyQuery {
	query := &CompanyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobpost.Table, jobpost.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobpost.CompanyTable, jobpost.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidates queries the candidates edge of a JobPost.
func (c *JobPostClient) QueryCandidates(jp *JobPost) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobpost.Table, jobpost.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, jobpost.CandidatesTable, jobpost.CandidatesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobPostClient) Hooks() []Hook {
	return c.hooks.JobPost
}

// StudentAcademicProfileClient is a client for the StudentAcademicProfile schema.
type StudentAcademicProfileClient struct {
	config
}

// NewStudentAcademicProfileClient returns a client for the StudentAcademicProfile from the given config.
func NewStudentAcademicProfileClient(c config) *StudentAcademicProfileClient {
	return &StudentAcademicProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `studentacademicprofile.Hooks(f(g(h())))`.
func (c *StudentAcademicProfileClient) Use(hooks ...Hook) {
	c.hooks.StudentAcademicProfile = append(c.hooks.StudentAcademicProfile, hooks...)
}

// Create returns a create builder for StudentAcademicProfile.
func (c *StudentAcademicProfileClient) Create() *StudentAcademicProfileCreate {
	mutation := newStudentAcademicProfileMutation(c.config, OpCreate)
	return &StudentAcademicProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StudentAcademicProfile entities.
func (c *StudentAcademicProfileClient) CreateBulk(builders ...*StudentAcademicProfileCreate) *StudentAcademicProfileCreateBulk {
	return &StudentAcademicProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StudentAcademicProfile.
func (c *StudentAcademicProfileClient) Update() *StudentAcademicProfileUpdate {
	mutation := newStudentAcademicProfileMutation(c.config, OpUpdate)
	return &StudentAcademicProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudentAcademicProfileClient) UpdateOne(sap *StudentAcademicProfile) *StudentAcademicProfileUpdateOne {
	mutation := newStudentAcademicProfileMutation(c.config, OpUpdateOne, withStudentAcademicProfile(sap))
	return &StudentAcademicProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudentAcademicProfileClient) UpdateOneID(id string) *StudentAcademicProfileUpdateOne {
	mutation := newStudentAcademicProfileMutation(c.config, OpUpdateOne, withStudentAcademicProfileID(id))
	return &StudentAcademicProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StudentAcademicProfile.
func (c *StudentAcademicProfileClient) Delete() *StudentAcademicProfileDelete {
	mutation := newStudentAcademicProfileMutation(c.config, OpDelete)
	return &StudentAcademicProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StudentAcademicProfileClient) DeleteOne(sap *StudentAcademicProfile) *StudentAcademicProfileDeleteOne {
	return c.DeleteOneID(sap.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StudentAcademicProfileClient) DeleteOneID(id string) *StudentAcademicProfileDeleteOne {
	builder := c.Delete().Where(studentacademicprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudentAcademicProfileDeleteOne{builder}
}

// Query returns a query builder for StudentAcademicProfile.
func (c *StudentAcademicProfileClient) Query() *StudentAcademicProfileQuery {
	return &StudentAcademicProfileQuery{
		config: c.config,
	}
}

// Get returns a StudentAcademicProfile entity by its id.
func (c *StudentAcademicProfileClient) Get(ctx context.Context, id string) (*StudentAcademicProfile, error) {
	return c.Query().Where(studentacademicprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudentAcademicProfileClient) GetX(ctx context.Context, id string) *StudentAcademicProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudentProfile queries the student_profile edge of a StudentAcademicProfile.
func (c *StudentAcademicProfileClient) QueryStudentProfile(sap *StudentAcademicProfile) *StudentProfileQuery {
	query := &StudentProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studentacademicprofile.Table, studentacademicprofile.FieldID, id),
			sqlgraph.To(studentprofile.Table, studentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studentacademicprofile.StudentProfileTable, studentacademicprofile.StudentProfileColumn),
		)
		fromV = sqlgraph.Neighbors(sap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudentAcademicProfileClient) Hooks() []Hook {
	return c.hooks.StudentAcademicProfile
}

// StudentProfileClient is a client for the StudentProfile schema.
type StudentProfileClient struct {
	config
}

// NewStudentProfileClient returns a client for the StudentProfile from the given config.
func NewStudentProfileClient(c config) *StudentProfileClient {
	return &StudentProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `studentprofile.Hooks(f(g(h())))`.
func (c *StudentProfileClient) Use(hooks ...Hook) {
	c.hooks.StudentProfile = append(c.hooks.StudentProfile, hooks...)
}

// Create returns a create builder for StudentProfile.
func (c *StudentProfileClient) Create() *StudentProfileCreate {
	mutation := newStudentProfileMutation(c.config, OpCreate)
	return &StudentProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StudentProfile entities.
func (c *StudentProfileClient) CreateBulk(builders ...*StudentProfileCreate) *StudentProfileCreateBulk {
	return &StudentProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StudentProfile.
func (c *StudentProfileClient) Update() *StudentProfileUpdate {
	mutation := newStudentProfileMutation(c.config, OpUpdate)
	return &StudentProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudentProfileClient) UpdateOne(sp *StudentProfile) *StudentProfileUpdateOne {
	mutation := newStudentProfileMutation(c.config, OpUpdateOne, withStudentProfile(sp))
	return &StudentProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudentProfileClient) UpdateOneID(id xid.ID) *StudentProfileUpdateOne {
	mutation := newStudentProfileMutation(c.config, OpUpdateOne, withStudentProfileID(id))
	return &StudentProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StudentProfile.
func (c *StudentProfileClient) Delete() *StudentProfileDelete {
	mutation := newStudentProfileMutation(c.config, OpDelete)
	return &StudentProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StudentProfileClient) DeleteOne(sp *StudentProfile) *StudentProfileDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StudentProfileClient) DeleteOneID(id xid.ID) *StudentProfileDeleteOne {
	builder := c.Delete().Where(studentprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudentProfileDeleteOne{builder}
}

// Query returns a query builder for StudentProfile.
func (c *StudentProfileClient) Query() *StudentProfileQuery {
	return &StudentProfileQuery{
		config: c.config,
	}
}

// Get returns a StudentProfile entity by its id.
func (c *StudentProfileClient) Get(ctx context.Context, id xid.ID) (*StudentProfile, error) {
	return c.Query().Where(studentprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudentProfileClient) GetX(ctx context.Context, id xid.ID) *StudentProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a StudentProfile.
func (c *StudentProfileClient) QueryUser(sp *StudentProfile) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studentprofile.Table, studentprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, studentprofile.UserTable, studentprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAcademicProfile queries the academic_profile edge of a StudentProfile.
func (c *StudentProfileClient) QueryAcademicProfile(sp *StudentProfile) *StudentAcademicProfileQuery {
	query := &StudentAcademicProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studentprofile.Table, studentprofile.FieldID, id),
			sqlgraph.To(studentacademicprofile.Table, studentacademicprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, studentprofile.AcademicProfileTable, studentprofile.AcademicProfileColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkProfile queries the work_profile edge of a StudentProfile.
func (c *StudentProfileClient) QueryWorkProfile(sp *StudentProfile) *StudentWorkProfileQuery {
	query := &StudentWorkProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studentprofile.Table, studentprofile.FieldID, id),
			sqlgraph.To(studentworkprofile.Table, studentworkprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, studentprofile.WorkProfileTable, studentprofile.WorkProfileColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudentProfileClient) Hooks() []Hook {
	return c.hooks.StudentProfile
}

// StudentWorkProfileClient is a client for the StudentWorkProfile schema.
type StudentWorkProfileClient struct {
	config
}

// NewStudentWorkProfileClient returns a client for the StudentWorkProfile from the given config.
func NewStudentWorkProfileClient(c config) *StudentWorkProfileClient {
	return &StudentWorkProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `studentworkprofile.Hooks(f(g(h())))`.
func (c *StudentWorkProfileClient) Use(hooks ...Hook) {
	c.hooks.StudentWorkProfile = append(c.hooks.StudentWorkProfile, hooks...)
}

// Create returns a create builder for StudentWorkProfile.
func (c *StudentWorkProfileClient) Create() *StudentWorkProfileCreate {
	mutation := newStudentWorkProfileMutation(c.config, OpCreate)
	return &StudentWorkProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StudentWorkProfile entities.
func (c *StudentWorkProfileClient) CreateBulk(builders ...*StudentWorkProfileCreate) *StudentWorkProfileCreateBulk {
	return &StudentWorkProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StudentWorkProfile.
func (c *StudentWorkProfileClient) Update() *StudentWorkProfileUpdate {
	mutation := newStudentWorkProfileMutation(c.config, OpUpdate)
	return &StudentWorkProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudentWorkProfileClient) UpdateOne(swp *StudentWorkProfile) *StudentWorkProfileUpdateOne {
	mutation := newStudentWorkProfileMutation(c.config, OpUpdateOne, withStudentWorkProfile(swp))
	return &StudentWorkProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudentWorkProfileClient) UpdateOneID(id xid.ID) *StudentWorkProfileUpdateOne {
	mutation := newStudentWorkProfileMutation(c.config, OpUpdateOne, withStudentWorkProfileID(id))
	return &StudentWorkProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StudentWorkProfile.
func (c *StudentWorkProfileClient) Delete() *StudentWorkProfileDelete {
	mutation := newStudentWorkProfileMutation(c.config, OpDelete)
	return &StudentWorkProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StudentWorkProfileClient) DeleteOne(swp *StudentWorkProfile) *StudentWorkProfileDeleteOne {
	return c.DeleteOneID(swp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StudentWorkProfileClient) DeleteOneID(id xid.ID) *StudentWorkProfileDeleteOne {
	builder := c.Delete().Where(studentworkprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudentWorkProfileDeleteOne{builder}
}

// Query returns a query builder for StudentWorkProfile.
func (c *StudentWorkProfileClient) Query() *StudentWorkProfileQuery {
	return &StudentWorkProfileQuery{
		config: c.config,
	}
}

// Get returns a StudentWorkProfile entity by its id.
func (c *StudentWorkProfileClient) Get(ctx context.Context, id xid.ID) (*StudentWorkProfile, error) {
	return c.Query().Where(studentworkprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudentWorkProfileClient) GetX(ctx context.Context, id xid.ID) *StudentWorkProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudentProfile queries the student_profile edge of a StudentWorkProfile.
func (c *StudentWorkProfileClient) QueryStudentProfile(swp *StudentWorkProfile) *StudentProfileQuery {
	query := &StudentProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := swp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studentworkprofile.Table, studentworkprofile.FieldID, id),
			sqlgraph.To(studentprofile.Table, studentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studentworkprofile.StudentProfileTable, studentworkprofile.StudentProfileColumn),
		)
		fromV = sqlgraph.Neighbors(swp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudentWorkProfileClient) Hooks() []Hook {
	return c.hooks.StudentWorkProfile
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id xid.ID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id xid.ID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id xid.ID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id xid.ID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudentProfile queries the student_profile edge of a User.
func (c *UserClient) QueryStudentProfile(u *User) *StudentProfileQuery {
	query := &StudentProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(studentprofile.Table, studentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.StudentProfileTable, user.StudentProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCollegeProfile queries the college_profile edge of a User.
func (c *UserClient) QueryCollegeProfile(u *User) *CollegeProfileQuery {
	query := &CollegeProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(collegeprofile.Table, collegeprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.CollegeProfileTable, user.CollegeProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidates queries the candidates edge of a User.
func (c *UserClient) QueryCandidates(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.CandidatesTable, user.CandidatesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnrolledIn queries the enrolled_in edge of a User.
func (c *UserClient) QueryEnrolledIn(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.EnrolledInTable, user.EnrolledInPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompanies queries the companies edge of a User.
func (c *UserClient) QueryCompanies(u *User) *CompanyQuery {
	query := &CompanyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CompaniesTable, user.CompaniesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobPosts queries the job_posts edge of a User.
func (c *UserClient) QueryJobPosts(u *User) *JobPostQuery {
	query := &JobPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(jobpost.Table, jobpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.JobPostsTable, user.JobPostsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppliedTo queries the applied_to edge of a User.
func (c *UserClient) QueryAppliedTo(u *User) *JobPostQuery {
	query := &JobPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(jobpost.Table, jobpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.AppliedToTable, user.AppliedToPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
