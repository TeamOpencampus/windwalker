// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"windwalker/ent/studentprofile"
	"windwalker/ent/studentworkprofile"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
)

// StudentWorkProfile is the model entity for the StudentWorkProfile schema.
type StudentWorkProfile struct {
	config
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudentWorkProfileQuery when eager-loading is set.
	Edges                        StudentWorkProfileEdges `json:"edges"`
	student_profile_work_profile *xid.ID
}

// StudentWorkProfileEdges holds the relations/edges for other nodes in the graph.
type StudentWorkProfileEdges struct {
	// StudentProfile holds the value of the student_profile edge.
	StudentProfile *StudentProfile `json:"student_profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StudentProfileOrErr returns the StudentProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentWorkProfileEdges) StudentProfileOrErr() (*StudentProfile, error) {
	if e.loadedTypes[0] {
		if e.StudentProfile == nil {
			// The edge student_profile was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: studentprofile.Label}
		}
		return e.StudentProfile, nil
	}
	return nil, &NotLoadedError{edge: "student_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StudentWorkProfile) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case studentworkprofile.FieldID:
			values[i] = new(xid.ID)
		case studentworkprofile.ForeignKeys[0]: // student_profile_work_profile
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StudentWorkProfile", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StudentWorkProfile fields.
func (swp *StudentWorkProfile) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case studentworkprofile.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				swp.ID = *value
			}
		case studentworkprofile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field student_profile_work_profile", values[i])
			} else if value.Valid {
				swp.student_profile_work_profile = new(xid.ID)
				*swp.student_profile_work_profile = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryStudentProfile queries the "student_profile" edge of the StudentWorkProfile entity.
func (swp *StudentWorkProfile) QueryStudentProfile() *StudentProfileQuery {
	return (&StudentWorkProfileClient{config: swp.config}).QueryStudentProfile(swp)
}

// Update returns a builder for updating this StudentWorkProfile.
// Note that you need to call StudentWorkProfile.Unwrap() before calling this method if this StudentWorkProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (swp *StudentWorkProfile) Update() *StudentWorkProfileUpdateOne {
	return (&StudentWorkProfileClient{config: swp.config}).UpdateOne(swp)
}

// Unwrap unwraps the StudentWorkProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (swp *StudentWorkProfile) Unwrap() *StudentWorkProfile {
	tx, ok := swp.config.driver.(*txDriver)
	if !ok {
		panic("ent: StudentWorkProfile is not a transactional entity")
	}
	swp.config.driver = tx.drv
	return swp
}

// String implements the fmt.Stringer.
func (swp *StudentWorkProfile) String() string {
	var builder strings.Builder
	builder.WriteString("StudentWorkProfile(")
	builder.WriteString(fmt.Sprintf("id=%v", swp.ID))
	builder.WriteByte(')')
	return builder.String()
}

// StudentWorkProfiles is a parsable slice of StudentWorkProfile.
type StudentWorkProfiles []*StudentWorkProfile

func (swp StudentWorkProfiles) config(cfg config) {
	for _i := range swp {
		swp[_i].config = cfg
	}
}
