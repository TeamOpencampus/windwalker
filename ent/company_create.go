// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"windwalker/ent/company"
	"windwalker/ent/jobpost"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// CompanyCreate is the builder for creating a Company entity.
type CompanyCreate struct {
	config
	mutation *CompanyMutation
	hooks    []Hook
}

// SetCompanyName sets the "company_name" field.
func (cc *CompanyCreate) SetCompanyName(s string) *CompanyCreate {
	cc.mutation.SetCompanyName(s)
	return cc
}

// SetContactPersonName sets the "contact_person_name" field.
func (cc *CompanyCreate) SetContactPersonName(s string) *CompanyCreate {
	cc.mutation.SetContactPersonName(s)
	return cc
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (cc *CompanyCreate) SetContactPersonEmail(s string) *CompanyCreate {
	cc.mutation.SetContactPersonEmail(s)
	return cc
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (cc *CompanyCreate) SetContactPersonPhone(s string) *CompanyCreate {
	cc.mutation.SetContactPersonPhone(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CompanyCreate) SetID(x xid.ID) *CompanyCreate {
	cc.mutation.SetID(x)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableID(x *xid.ID) *CompanyCreate {
	if x != nil {
		cc.SetID(*x)
	}
	return cc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cc *CompanyCreate) SetUserID(id xid.ID) *CompanyCreate {
	cc.mutation.SetUserID(id)
	return cc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cc *CompanyCreate) SetNillableUserID(id *xid.ID) *CompanyCreate {
	if id != nil {
		cc = cc.SetUserID(*id)
	}
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *CompanyCreate) SetUser(u *User) *CompanyCreate {
	return cc.SetUserID(u.ID)
}

// AddPostIDs adds the "posts" edge to the JobPost entity by IDs.
func (cc *CompanyCreate) AddPostIDs(ids ...xid.ID) *CompanyCreate {
	cc.mutation.AddPostIDs(ids...)
	return cc
}

// AddPosts adds the "posts" edges to the JobPost entity.
func (cc *CompanyCreate) AddPosts(j ...*JobPost) *CompanyCreate {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cc.AddPostIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cc *CompanyCreate) Mutation() *CompanyMutation {
	return cc.mutation
}

// Save creates the Company in the database.
func (cc *CompanyCreate) Save(ctx context.Context) (*Company, error) {
	var (
		err  error
		node *Company
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CompanyCreate) SaveX(ctx context.Context) *Company {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CompanyCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CompanyCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CompanyCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := company.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CompanyCreate) check() error {
	if _, ok := cc.mutation.CompanyName(); !ok {
		return &ValidationError{Name: "company_name", err: errors.New(`ent: missing required field "Company.company_name"`)}
	}
	if v, ok := cc.mutation.CompanyName(); ok {
		if err := company.CompanyNameValidator(v); err != nil {
			return &ValidationError{Name: "company_name", err: fmt.Errorf(`ent: validator failed for field "Company.company_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ContactPersonName(); !ok {
		return &ValidationError{Name: "contact_person_name", err: errors.New(`ent: missing required field "Company.contact_person_name"`)}
	}
	if v, ok := cc.mutation.ContactPersonName(); ok {
		if err := company.ContactPersonNameValidator(v); err != nil {
			return &ValidationError{Name: "contact_person_name", err: fmt.Errorf(`ent: validator failed for field "Company.contact_person_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ContactPersonEmail(); !ok {
		return &ValidationError{Name: "contact_person_email", err: errors.New(`ent: missing required field "Company.contact_person_email"`)}
	}
	if v, ok := cc.mutation.ContactPersonEmail(); ok {
		if err := company.ContactPersonEmailValidator(v); err != nil {
			return &ValidationError{Name: "contact_person_email", err: fmt.Errorf(`ent: validator failed for field "Company.contact_person_email": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ContactPersonPhone(); !ok {
		return &ValidationError{Name: "contact_person_phone", err: errors.New(`ent: missing required field "Company.contact_person_phone"`)}
	}
	if v, ok := cc.mutation.ContactPersonPhone(); ok {
		if err := company.ContactPersonPhoneValidator(v); err != nil {
			return &ValidationError{Name: "contact_person_phone", err: fmt.Errorf(`ent: validator failed for field "Company.contact_person_phone": %w`, err)}
		}
	}
	return nil
}

func (cc *CompanyCreate) sqlSave(ctx context.Context) (*Company, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cc *CompanyCreate) createSpec() (*Company, *sqlgraph.CreateSpec) {
	var (
		_node = &Company{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: company.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: company.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CompanyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldCompanyName,
		})
		_node.CompanyName = value
	}
	if value, ok := cc.mutation.ContactPersonName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldContactPersonName,
		})
		_node.ContactPersonName = value
	}
	if value, ok := cc.mutation.ContactPersonEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldContactPersonEmail,
		})
		_node.ContactPersonEmail = value
	}
	if value, ok := cc.mutation.ContactPersonPhone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldContactPersonPhone,
		})
		_node.ContactPersonPhone = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.UserTable,
			Columns: []string{company.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_companies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PostsTable,
			Columns: []string{company.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompanyCreateBulk is the builder for creating many Company entities in bulk.
type CompanyCreateBulk struct {
	config
	builders []*CompanyCreate
}

// Save creates the Company entities in the database.
func (ccb *CompanyCreateBulk) Save(ctx context.Context) ([]*Company, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Company, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CompanyCreateBulk) SaveX(ctx context.Context) []*Company {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CompanyCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CompanyCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
