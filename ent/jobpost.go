// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
	"windwalker/ent/company"
	"windwalker/ent/jobpost"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
)

// JobPost is the model entity for the JobPost schema.
type JobPost struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Salary holds the value of the "salary" field.
	Salary string `json:"salary,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// CreatedOn holds the value of the "created_on" field.
	CreatedOn time.Time `json:"created_on,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobPostQuery when eager-loading is set.
	Edges          JobPostEdges `json:"edges"`
	company_posts  *xid.ID
	user_job_posts *xid.ID
}

// JobPostEdges holds the relations/edges for other nodes in the graph.
type JobPostEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Candidates holds the value of the candidates edge.
	Candidates []*User `json:"candidates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobPostEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobPostEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[1] {
		if e.Company == nil {
			// The edge company was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// CandidatesOrErr returns the Candidates value or an error if the edge
// was not loaded in eager-loading.
func (e JobPostEdges) CandidatesOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Candidates, nil
	}
	return nil, &NotLoadedError{edge: "candidates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobPost) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobpost.FieldTags:
			values[i] = new([]byte)
		case jobpost.FieldPosition, jobpost.FieldLocation, jobpost.FieldSalary, jobpost.FieldDescription:
			values[i] = new(sql.NullString)
		case jobpost.FieldCreatedOn:
			values[i] = new(sql.NullTime)
		case jobpost.FieldID:
			values[i] = new(xid.ID)
		case jobpost.ForeignKeys[0]: // company_posts
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		case jobpost.ForeignKeys[1]: // user_job_posts
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type JobPost", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobPost fields.
func (jp *JobPost) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobpost.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				jp.ID = *value
			}
		case jobpost.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				jp.Position = value.String
			}
		case jobpost.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				jp.Location = value.String
			}
		case jobpost.FieldSalary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salary", values[i])
			} else if value.Valid {
				jp.Salary = value.String
			}
		case jobpost.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				jp.Description = value.String
			}
		case jobpost.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &jp.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case jobpost.FieldCreatedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_on", values[i])
			} else if value.Valid {
				jp.CreatedOn = value.Time
			}
		case jobpost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field company_posts", values[i])
			} else if value.Valid {
				jp.company_posts = new(xid.ID)
				*jp.company_posts = *value.S.(*xid.ID)
			}
		case jobpost.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_job_posts", values[i])
			} else if value.Valid {
				jp.user_job_posts = new(xid.ID)
				*jp.user_job_posts = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the JobPost entity.
func (jp *JobPost) QueryUser() *UserQuery {
	return (&JobPostClient{config: jp.config}).QueryUser(jp)
}

// QueryCompany queries the "company" edge of the JobPost entity.
func (jp *JobPost) QueryCompany() *CompanyQuery {
	return (&JobPostClient{config: jp.config}).QueryCompany(jp)
}

// QueryCandidates queries the "candidates" edge of the JobPost entity.
func (jp *JobPost) QueryCandidates() *UserQuery {
	return (&JobPostClient{config: jp.config}).QueryCandidates(jp)
}

// Update returns a builder for updating this JobPost.
// Note that you need to call JobPost.Unwrap() before calling this method if this JobPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (jp *JobPost) Update() *JobPostUpdateOne {
	return (&JobPostClient{config: jp.config}).UpdateOne(jp)
}

// Unwrap unwraps the JobPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jp *JobPost) Unwrap() *JobPost {
	tx, ok := jp.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobPost is not a transactional entity")
	}
	jp.config.driver = tx.drv
	return jp
}

// String implements the fmt.Stringer.
func (jp *JobPost) String() string {
	var builder strings.Builder
	builder.WriteString("JobPost(")
	builder.WriteString(fmt.Sprintf("id=%v", jp.ID))
	builder.WriteString(", position=")
	builder.WriteString(jp.Position)
	builder.WriteString(", location=")
	builder.WriteString(jp.Location)
	builder.WriteString(", salary=")
	builder.WriteString(jp.Salary)
	builder.WriteString(", description=")
	builder.WriteString(jp.Description)
	builder.WriteString(", tags=")
	builder.WriteString(fmt.Sprintf("%v", jp.Tags))
	builder.WriteString(", created_on=")
	builder.WriteString(jp.CreatedOn.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JobPosts is a parsable slice of JobPost.
type JobPosts []*JobPost

func (jp JobPosts) config(cfg config) {
	for _i := range jp {
		jp[_i].config = cfg
	}
}
