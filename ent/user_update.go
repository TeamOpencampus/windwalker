// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"windwalker/ent/collegeprofile"
	"windwalker/ent/company"
	"windwalker/ent/jobpost"
	"windwalker/ent/predicate"
	"windwalker/ent/studentprofile"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetEmailVerified sets the "email_verified" field.
func (uu *UserUpdate) SetEmailVerified(b bool) *UserUpdate {
	uu.mutation.SetEmailVerified(b)
	return uu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailVerified(*b)
	}
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(s string) *UserUpdate {
	uu.mutation.SetRole(s)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(s *string) *UserUpdate {
	if s != nil {
		uu.SetRole(*s)
	}
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID.
func (uu *UserUpdate) SetStudentProfileID(id xid.ID) *UserUpdate {
	uu.mutation.SetStudentProfileID(id)
	return uu
}

// SetNillableStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableStudentProfileID(id *xid.ID) *UserUpdate {
	if id != nil {
		uu = uu.SetStudentProfileID(*id)
	}
	return uu
}

// SetStudentProfile sets the "student_profile" edge to the StudentProfile entity.
func (uu *UserUpdate) SetStudentProfile(s *StudentProfile) *UserUpdate {
	return uu.SetStudentProfileID(s.ID)
}

// SetCollegeProfileID sets the "college_profile" edge to the CollegeProfile entity by ID.
func (uu *UserUpdate) SetCollegeProfileID(id string) *UserUpdate {
	uu.mutation.SetCollegeProfileID(id)
	return uu
}

// SetNillableCollegeProfileID sets the "college_profile" edge to the CollegeProfile entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCollegeProfileID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetCollegeProfileID(*id)
	}
	return uu
}

// SetCollegeProfile sets the "college_profile" edge to the CollegeProfile entity.
func (uu *UserUpdate) SetCollegeProfile(c *CollegeProfile) *UserUpdate {
	return uu.SetCollegeProfileID(c.ID)
}

// AddCandidateIDs adds the "candidates" edge to the User entity by IDs.
func (uu *UserUpdate) AddCandidateIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddCandidateIDs(ids...)
	return uu
}

// AddCandidates adds the "candidates" edges to the User entity.
func (uu *UserUpdate) AddCandidates(u ...*User) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddCandidateIDs(ids...)
}

// AddEnrolledInIDs adds the "enrolled_in" edge to the User entity by IDs.
func (uu *UserUpdate) AddEnrolledInIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddEnrolledInIDs(ids...)
	return uu
}

// AddEnrolledIn adds the "enrolled_in" edges to the User entity.
func (uu *UserUpdate) AddEnrolledIn(u ...*User) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddEnrolledInIDs(ids...)
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (uu *UserUpdate) AddCompanyIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddCompanyIDs(ids...)
	return uu
}

// AddCompanies adds the "companies" edges to the Company entity.
func (uu *UserUpdate) AddCompanies(c ...*Company) *UserUpdate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCompanyIDs(ids...)
}

// AddJobPostIDs adds the "job_posts" edge to the JobPost entity by IDs.
func (uu *UserUpdate) AddJobPostIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddJobPostIDs(ids...)
	return uu
}

// AddJobPosts adds the "job_posts" edges to the JobPost entity.
func (uu *UserUpdate) AddJobPosts(j ...*JobPost) *UserUpdate {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.AddJobPostIDs(ids...)
}

// AddAppliedToIDs adds the "applied_to" edge to the JobPost entity by IDs.
func (uu *UserUpdate) AddAppliedToIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddAppliedToIDs(ids...)
	return uu
}

// AddAppliedTo adds the "applied_to" edges to the JobPost entity.
func (uu *UserUpdate) AddAppliedTo(j ...*JobPost) *UserUpdate {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.AddAppliedToIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearStudentProfile clears the "student_profile" edge to the StudentProfile entity.
func (uu *UserUpdate) ClearStudentProfile() *UserUpdate {
	uu.mutation.ClearStudentProfile()
	return uu
}

// ClearCollegeProfile clears the "college_profile" edge to the CollegeProfile entity.
func (uu *UserUpdate) ClearCollegeProfile() *UserUpdate {
	uu.mutation.ClearCollegeProfile()
	return uu
}

// ClearCandidates clears all "candidates" edges to the User entity.
func (uu *UserUpdate) ClearCandidates() *UserUpdate {
	uu.mutation.ClearCandidates()
	return uu
}

// RemoveCandidateIDs removes the "candidates" edge to User entities by IDs.
func (uu *UserUpdate) RemoveCandidateIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveCandidateIDs(ids...)
	return uu
}

// RemoveCandidates removes "candidates" edges to User entities.
func (uu *UserUpdate) RemoveCandidates(u ...*User) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveCandidateIDs(ids...)
}

// ClearEnrolledIn clears all "enrolled_in" edges to the User entity.
func (uu *UserUpdate) ClearEnrolledIn() *UserUpdate {
	uu.mutation.ClearEnrolledIn()
	return uu
}

// RemoveEnrolledInIDs removes the "enrolled_in" edge to User entities by IDs.
func (uu *UserUpdate) RemoveEnrolledInIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveEnrolledInIDs(ids...)
	return uu
}

// RemoveEnrolledIn removes "enrolled_in" edges to User entities.
func (uu *UserUpdate) RemoveEnrolledIn(u ...*User) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveEnrolledInIDs(ids...)
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (uu *UserUpdate) ClearCompanies() *UserUpdate {
	uu.mutation.ClearCompanies()
	return uu
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (uu *UserUpdate) RemoveCompanyIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveCompanyIDs(ids...)
	return uu
}

// RemoveCompanies removes "companies" edges to Company entities.
func (uu *UserUpdate) RemoveCompanies(c ...*Company) *UserUpdate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCompanyIDs(ids...)
}

// ClearJobPosts clears all "job_posts" edges to the JobPost entity.
func (uu *UserUpdate) ClearJobPosts() *UserUpdate {
	uu.mutation.ClearJobPosts()
	return uu
}

// RemoveJobPostIDs removes the "job_posts" edge to JobPost entities by IDs.
func (uu *UserUpdate) RemoveJobPostIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveJobPostIDs(ids...)
	return uu
}

// RemoveJobPosts removes "job_posts" edges to JobPost entities.
func (uu *UserUpdate) RemoveJobPosts(j ...*JobPost) *UserUpdate {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.RemoveJobPostIDs(ids...)
}

// ClearAppliedTo clears all "applied_to" edges to the JobPost entity.
func (uu *UserUpdate) ClearAppliedTo() *UserUpdate {
	uu.mutation.ClearAppliedTo()
	return uu
}

// RemoveAppliedToIDs removes the "applied_to" edge to JobPost entities by IDs.
func (uu *UserUpdate) RemoveAppliedToIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveAppliedToIDs(ids...)
	return uu
}

// RemoveAppliedTo removes "applied_to" edges to JobPost entities.
func (uu *UserUpdate) RemoveAppliedTo(j ...*JobPost) *UserUpdate {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.RemoveAppliedToIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.EmailVerified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldEmailVerified,
		})
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if uu.mutation.StudentProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.StudentProfileTable,
			Columns: []string{user.StudentProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StudentProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.StudentProfileTable,
			Columns: []string{user.StudentProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CollegeProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CollegeProfileTable,
			Columns: []string{user.CollegeProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collegeprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CollegeProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CollegeProfileTable,
			Columns: []string{user.CollegeProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collegeprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CandidatesTable,
			Columns: user.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !uu.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CandidatesTable,
			Columns: user.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CandidatesTable,
			Columns: user.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.EnrolledInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledInTable,
			Columns: user.EnrolledInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEnrolledInIDs(); len(nodes) > 0 && !uu.mutation.EnrolledInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledInTable,
			Columns: user.EnrolledInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EnrolledInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledInTable,
			Columns: user.EnrolledInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CompaniesTable,
			Columns: []string{user.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !uu.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CompaniesTable,
			Columns: []string{user.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CompaniesTable,
			Columns: []string{user.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.JobPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobPostsTable,
			Columns: []string{user.JobPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedJobPostsIDs(); len(nodes) > 0 && !uu.mutation.JobPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobPostsTable,
			Columns: []string{user.JobPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.JobPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobPostsTable,
			Columns: []string{user.JobPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AppliedToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AppliedToTable,
			Columns: user.AppliedToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAppliedToIDs(); len(nodes) > 0 && !uu.mutation.AppliedToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AppliedToTable,
			Columns: user.AppliedToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AppliedToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AppliedToTable,
			Columns: user.AppliedToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetEmailVerified sets the "email_verified" field.
func (uuo *UserUpdateOne) SetEmailVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailVerified(b)
	return uuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailVerified(*b)
	}
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(s string) *UserUpdateOne {
	uuo.mutation.SetRole(s)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRole(*s)
	}
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID.
func (uuo *UserUpdateOne) SetStudentProfileID(id xid.ID) *UserUpdateOne {
	uuo.mutation.SetStudentProfileID(id)
	return uuo
}

// SetNillableStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStudentProfileID(id *xid.ID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetStudentProfileID(*id)
	}
	return uuo
}

// SetStudentProfile sets the "student_profile" edge to the StudentProfile entity.
func (uuo *UserUpdateOne) SetStudentProfile(s *StudentProfile) *UserUpdateOne {
	return uuo.SetStudentProfileID(s.ID)
}

// SetCollegeProfileID sets the "college_profile" edge to the CollegeProfile entity by ID.
func (uuo *UserUpdateOne) SetCollegeProfileID(id string) *UserUpdateOne {
	uuo.mutation.SetCollegeProfileID(id)
	return uuo
}

// SetNillableCollegeProfileID sets the "college_profile" edge to the CollegeProfile entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCollegeProfileID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCollegeProfileID(*id)
	}
	return uuo
}

// SetCollegeProfile sets the "college_profile" edge to the CollegeProfile entity.
func (uuo *UserUpdateOne) SetCollegeProfile(c *CollegeProfile) *UserUpdateOne {
	return uuo.SetCollegeProfileID(c.ID)
}

// AddCandidateIDs adds the "candidates" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddCandidateIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddCandidateIDs(ids...)
	return uuo
}

// AddCandidates adds the "candidates" edges to the User entity.
func (uuo *UserUpdateOne) AddCandidates(u ...*User) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddCandidateIDs(ids...)
}

// AddEnrolledInIDs adds the "enrolled_in" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddEnrolledInIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddEnrolledInIDs(ids...)
	return uuo
}

// AddEnrolledIn adds the "enrolled_in" edges to the User entity.
func (uuo *UserUpdateOne) AddEnrolledIn(u ...*User) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddEnrolledInIDs(ids...)
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (uuo *UserUpdateOne) AddCompanyIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddCompanyIDs(ids...)
	return uuo
}

// AddCompanies adds the "companies" edges to the Company entity.
func (uuo *UserUpdateOne) AddCompanies(c ...*Company) *UserUpdateOne {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCompanyIDs(ids...)
}

// AddJobPostIDs adds the "job_posts" edge to the JobPost entity by IDs.
func (uuo *UserUpdateOne) AddJobPostIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddJobPostIDs(ids...)
	return uuo
}

// AddJobPosts adds the "job_posts" edges to the JobPost entity.
func (uuo *UserUpdateOne) AddJobPosts(j ...*JobPost) *UserUpdateOne {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.AddJobPostIDs(ids...)
}

// AddAppliedToIDs adds the "applied_to" edge to the JobPost entity by IDs.
func (uuo *UserUpdateOne) AddAppliedToIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddAppliedToIDs(ids...)
	return uuo
}

// AddAppliedTo adds the "applied_to" edges to the JobPost entity.
func (uuo *UserUpdateOne) AddAppliedTo(j ...*JobPost) *UserUpdateOne {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.AddAppliedToIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearStudentProfile clears the "student_profile" edge to the StudentProfile entity.
func (uuo *UserUpdateOne) ClearStudentProfile() *UserUpdateOne {
	uuo.mutation.ClearStudentProfile()
	return uuo
}

// ClearCollegeProfile clears the "college_profile" edge to the CollegeProfile entity.
func (uuo *UserUpdateOne) ClearCollegeProfile() *UserUpdateOne {
	uuo.mutation.ClearCollegeProfile()
	return uuo
}

// ClearCandidates clears all "candidates" edges to the User entity.
func (uuo *UserUpdateOne) ClearCandidates() *UserUpdateOne {
	uuo.mutation.ClearCandidates()
	return uuo
}

// RemoveCandidateIDs removes the "candidates" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveCandidateIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveCandidateIDs(ids...)
	return uuo
}

// RemoveCandidates removes "candidates" edges to User entities.
func (uuo *UserUpdateOne) RemoveCandidates(u ...*User) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveCandidateIDs(ids...)
}

// ClearEnrolledIn clears all "enrolled_in" edges to the User entity.
func (uuo *UserUpdateOne) ClearEnrolledIn() *UserUpdateOne {
	uuo.mutation.ClearEnrolledIn()
	return uuo
}

// RemoveEnrolledInIDs removes the "enrolled_in" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveEnrolledInIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveEnrolledInIDs(ids...)
	return uuo
}

// RemoveEnrolledIn removes "enrolled_in" edges to User entities.
func (uuo *UserUpdateOne) RemoveEnrolledIn(u ...*User) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveEnrolledInIDs(ids...)
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (uuo *UserUpdateOne) ClearCompanies() *UserUpdateOne {
	uuo.mutation.ClearCompanies()
	return uuo
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (uuo *UserUpdateOne) RemoveCompanyIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveCompanyIDs(ids...)
	return uuo
}

// RemoveCompanies removes "companies" edges to Company entities.
func (uuo *UserUpdateOne) RemoveCompanies(c ...*Company) *UserUpdateOne {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCompanyIDs(ids...)
}

// ClearJobPosts clears all "job_posts" edges to the JobPost entity.
func (uuo *UserUpdateOne) ClearJobPosts() *UserUpdateOne {
	uuo.mutation.ClearJobPosts()
	return uuo
}

// RemoveJobPostIDs removes the "job_posts" edge to JobPost entities by IDs.
func (uuo *UserUpdateOne) RemoveJobPostIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveJobPostIDs(ids...)
	return uuo
}

// RemoveJobPosts removes "job_posts" edges to JobPost entities.
func (uuo *UserUpdateOne) RemoveJobPosts(j ...*JobPost) *UserUpdateOne {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.RemoveJobPostIDs(ids...)
}

// ClearAppliedTo clears all "applied_to" edges to the JobPost entity.
func (uuo *UserUpdateOne) ClearAppliedTo() *UserUpdateOne {
	uuo.mutation.ClearAppliedTo()
	return uuo
}

// RemoveAppliedToIDs removes the "applied_to" edge to JobPost entities by IDs.
func (uuo *UserUpdateOne) RemoveAppliedToIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveAppliedToIDs(ids...)
	return uuo
}

// RemoveAppliedTo removes "applied_to" edges to JobPost entities.
func (uuo *UserUpdateOne) RemoveAppliedTo(j ...*JobPost) *UserUpdateOne {
	ids := make([]xid.ID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.RemoveAppliedToIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.EmailVerified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldEmailVerified,
		})
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if uuo.mutation.StudentProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.StudentProfileTable,
			Columns: []string{user.StudentProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StudentProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.StudentProfileTable,
			Columns: []string{user.StudentProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CollegeProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CollegeProfileTable,
			Columns: []string{user.CollegeProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collegeprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CollegeProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CollegeProfileTable,
			Columns: []string{user.CollegeProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: collegeprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CandidatesTable,
			Columns: user.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !uuo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CandidatesTable,
			Columns: user.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CandidatesTable,
			Columns: user.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.EnrolledInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledInTable,
			Columns: user.EnrolledInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEnrolledInIDs(); len(nodes) > 0 && !uuo.mutation.EnrolledInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledInTable,
			Columns: user.EnrolledInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EnrolledInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledInTable,
			Columns: user.EnrolledInPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CompaniesTable,
			Columns: []string{user.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !uuo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CompaniesTable,
			Columns: []string{user.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CompaniesTable,
			Columns: []string{user.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.JobPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobPostsTable,
			Columns: []string{user.JobPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedJobPostsIDs(); len(nodes) > 0 && !uuo.mutation.JobPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobPostsTable,
			Columns: []string{user.JobPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.JobPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobPostsTable,
			Columns: []string{user.JobPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AppliedToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AppliedToTable,
			Columns: user.AppliedToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAppliedToIDs(); len(nodes) > 0 && !uuo.mutation.AppliedToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AppliedToTable,
			Columns: user.AppliedToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AppliedToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AppliedToTable,
			Columns: user.AppliedToPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: jobpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
