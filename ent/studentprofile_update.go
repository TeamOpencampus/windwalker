// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"windwalker/ent/predicate"
	"windwalker/ent/studentacademicprofile"
	"windwalker/ent/studentprofile"
	"windwalker/ent/studentworkprofile"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// StudentProfileUpdate is the builder for updating StudentProfile entities.
type StudentProfileUpdate struct {
	config
	hooks    []Hook
	mutation *StudentProfileMutation
}

// Where appends a list predicates to the StudentProfileUpdate builder.
func (spu *StudentProfileUpdate) Where(ps ...predicate.StudentProfile) *StudentProfileUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetName sets the "name" field.
func (spu *StudentProfileUpdate) SetName(s string) *StudentProfileUpdate {
	spu.mutation.SetName(s)
	return spu
}

// SetPhone sets the "phone" field.
func (spu *StudentProfileUpdate) SetPhone(s string) *StudentProfileUpdate {
	spu.mutation.SetPhone(s)
	return spu
}

// SetGender sets the "gender" field.
func (spu *StudentProfileUpdate) SetGender(s string) *StudentProfileUpdate {
	spu.mutation.SetGender(s)
	return spu
}

// SetCaste sets the "caste" field.
func (spu *StudentProfileUpdate) SetCaste(s string) *StudentProfileUpdate {
	spu.mutation.SetCaste(s)
	return spu
}

// SetNationality sets the "nationality" field.
func (spu *StudentProfileUpdate) SetNationality(s string) *StudentProfileUpdate {
	spu.mutation.SetNationality(s)
	return spu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spu *StudentProfileUpdate) SetUserID(id xid.ID) *StudentProfileUpdate {
	spu.mutation.SetUserID(id)
	return spu
}

// SetUser sets the "user" edge to the User entity.
func (spu *StudentProfileUpdate) SetUser(u *User) *StudentProfileUpdate {
	return spu.SetUserID(u.ID)
}

// AddAcademicProfileIDs adds the "academic_profile" edge to the StudentAcademicProfile entity by IDs.
func (spu *StudentProfileUpdate) AddAcademicProfileIDs(ids ...string) *StudentProfileUpdate {
	spu.mutation.AddAcademicProfileIDs(ids...)
	return spu
}

// AddAcademicProfile adds the "academic_profile" edges to the StudentAcademicProfile entity.
func (spu *StudentProfileUpdate) AddAcademicProfile(s ...*StudentAcademicProfile) *StudentProfileUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddAcademicProfileIDs(ids...)
}

// AddWorkProfileIDs adds the "work_profile" edge to the StudentWorkProfile entity by IDs.
func (spu *StudentProfileUpdate) AddWorkProfileIDs(ids ...xid.ID) *StudentProfileUpdate {
	spu.mutation.AddWorkProfileIDs(ids...)
	return spu
}

// AddWorkProfile adds the "work_profile" edges to the StudentWorkProfile entity.
func (spu *StudentProfileUpdate) AddWorkProfile(s ...*StudentWorkProfile) *StudentProfileUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddWorkProfileIDs(ids...)
}

// Mutation returns the StudentProfileMutation object of the builder.
func (spu *StudentProfileUpdate) Mutation() *StudentProfileMutation {
	return spu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (spu *StudentProfileUpdate) ClearUser() *StudentProfileUpdate {
	spu.mutation.ClearUser()
	return spu
}

// ClearAcademicProfile clears all "academic_profile" edges to the StudentAcademicProfile entity.
func (spu *StudentProfileUpdate) ClearAcademicProfile() *StudentProfileUpdate {
	spu.mutation.ClearAcademicProfile()
	return spu
}

// RemoveAcademicProfileIDs removes the "academic_profile" edge to StudentAcademicProfile entities by IDs.
func (spu *StudentProfileUpdate) RemoveAcademicProfileIDs(ids ...string) *StudentProfileUpdate {
	spu.mutation.RemoveAcademicProfileIDs(ids...)
	return spu
}

// RemoveAcademicProfile removes "academic_profile" edges to StudentAcademicProfile entities.
func (spu *StudentProfileUpdate) RemoveAcademicProfile(s ...*StudentAcademicProfile) *StudentProfileUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemoveAcademicProfileIDs(ids...)
}

// ClearWorkProfile clears all "work_profile" edges to the StudentWorkProfile entity.
func (spu *StudentProfileUpdate) ClearWorkProfile() *StudentProfileUpdate {
	spu.mutation.ClearWorkProfile()
	return spu
}

// RemoveWorkProfileIDs removes the "work_profile" edge to StudentWorkProfile entities by IDs.
func (spu *StudentProfileUpdate) RemoveWorkProfileIDs(ids ...xid.ID) *StudentProfileUpdate {
	spu.mutation.RemoveWorkProfileIDs(ids...)
	return spu
}

// RemoveWorkProfile removes "work_profile" edges to StudentWorkProfile entities.
func (spu *StudentProfileUpdate) RemoveWorkProfile(s ...*StudentWorkProfile) *StudentProfileUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemoveWorkProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *StudentProfileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(spu.hooks) == 0 {
		if err = spu.check(); err != nil {
			return 0, err
		}
		affected, err = spu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spu.check(); err != nil {
				return 0, err
			}
			spu.mutation = mutation
			affected, err = spu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spu.hooks) - 1; i >= 0; i-- {
			if spu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spu *StudentProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *StudentProfileUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *StudentProfileUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *StudentProfileUpdate) check() error {
	if v, ok := spu.mutation.Name(); ok {
		if err := studentprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.name": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Phone(); ok {
		if err := studentprofile.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.phone": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Gender(); ok {
		if err := studentprofile.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.gender": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Caste(); ok {
		if err := studentprofile.CasteValidator(v); err != nil {
			return &ValidationError{Name: "caste", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.caste": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Nationality(); ok {
		if err := studentprofile.NationalityValidator(v); err != nil {
			return &ValidationError{Name: "nationality", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.nationality": %w`, err)}
		}
	}
	if _, ok := spu.mutation.UserID(); spu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudentProfile.user"`)
	}
	return nil
}

func (spu *StudentProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studentprofile.Table,
			Columns: studentprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studentprofile.FieldID,
			},
		},
	}
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldName,
		})
	}
	if value, ok := spu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldPhone,
		})
	}
	if value, ok := spu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldGender,
		})
	}
	if value, ok := spu.mutation.Caste(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldCaste,
		})
	}
	if value, ok := spu.mutation.Nationality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldNationality,
		})
	}
	if spu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   studentprofile.UserTable,
			Columns: []string{studentprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   studentprofile.UserTable,
			Columns: []string{studentprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.AcademicProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.AcademicProfileTable,
			Columns: []string{studentprofile.AcademicProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentacademicprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedAcademicProfileIDs(); len(nodes) > 0 && !spu.mutation.AcademicProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.AcademicProfileTable,
			Columns: []string{studentprofile.AcademicProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentacademicprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.AcademicProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.AcademicProfileTable,
			Columns: []string{studentprofile.AcademicProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentacademicprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.WorkProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.WorkProfileTable,
			Columns: []string{studentprofile.WorkProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentworkprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedWorkProfileIDs(); len(nodes) > 0 && !spu.mutation.WorkProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.WorkProfileTable,
			Columns: []string{studentprofile.WorkProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentworkprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.WorkProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.WorkProfileTable,
			Columns: []string{studentprofile.WorkProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentworkprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studentprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StudentProfileUpdateOne is the builder for updating a single StudentProfile entity.
type StudentProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentProfileMutation
}

// SetName sets the "name" field.
func (spuo *StudentProfileUpdateOne) SetName(s string) *StudentProfileUpdateOne {
	spuo.mutation.SetName(s)
	return spuo
}

// SetPhone sets the "phone" field.
func (spuo *StudentProfileUpdateOne) SetPhone(s string) *StudentProfileUpdateOne {
	spuo.mutation.SetPhone(s)
	return spuo
}

// SetGender sets the "gender" field.
func (spuo *StudentProfileUpdateOne) SetGender(s string) *StudentProfileUpdateOne {
	spuo.mutation.SetGender(s)
	return spuo
}

// SetCaste sets the "caste" field.
func (spuo *StudentProfileUpdateOne) SetCaste(s string) *StudentProfileUpdateOne {
	spuo.mutation.SetCaste(s)
	return spuo
}

// SetNationality sets the "nationality" field.
func (spuo *StudentProfileUpdateOne) SetNationality(s string) *StudentProfileUpdateOne {
	spuo.mutation.SetNationality(s)
	return spuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spuo *StudentProfileUpdateOne) SetUserID(id xid.ID) *StudentProfileUpdateOne {
	spuo.mutation.SetUserID(id)
	return spuo
}

// SetUser sets the "user" edge to the User entity.
func (spuo *StudentProfileUpdateOne) SetUser(u *User) *StudentProfileUpdateOne {
	return spuo.SetUserID(u.ID)
}

// AddAcademicProfileIDs adds the "academic_profile" edge to the StudentAcademicProfile entity by IDs.
func (spuo *StudentProfileUpdateOne) AddAcademicProfileIDs(ids ...string) *StudentProfileUpdateOne {
	spuo.mutation.AddAcademicProfileIDs(ids...)
	return spuo
}

// AddAcademicProfile adds the "academic_profile" edges to the StudentAcademicProfile entity.
func (spuo *StudentProfileUpdateOne) AddAcademicProfile(s ...*StudentAcademicProfile) *StudentProfileUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddAcademicProfileIDs(ids...)
}

// AddWorkProfileIDs adds the "work_profile" edge to the StudentWorkProfile entity by IDs.
func (spuo *StudentProfileUpdateOne) AddWorkProfileIDs(ids ...xid.ID) *StudentProfileUpdateOne {
	spuo.mutation.AddWorkProfileIDs(ids...)
	return spuo
}

// AddWorkProfile adds the "work_profile" edges to the StudentWorkProfile entity.
func (spuo *StudentProfileUpdateOne) AddWorkProfile(s ...*StudentWorkProfile) *StudentProfileUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddWorkProfileIDs(ids...)
}

// Mutation returns the StudentProfileMutation object of the builder.
func (spuo *StudentProfileUpdateOne) Mutation() *StudentProfileMutation {
	return spuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (spuo *StudentProfileUpdateOne) ClearUser() *StudentProfileUpdateOne {
	spuo.mutation.ClearUser()
	return spuo
}

// ClearAcademicProfile clears all "academic_profile" edges to the StudentAcademicProfile entity.
func (spuo *StudentProfileUpdateOne) ClearAcademicProfile() *StudentProfileUpdateOne {
	spuo.mutation.ClearAcademicProfile()
	return spuo
}

// RemoveAcademicProfileIDs removes the "academic_profile" edge to StudentAcademicProfile entities by IDs.
func (spuo *StudentProfileUpdateOne) RemoveAcademicProfileIDs(ids ...string) *StudentProfileUpdateOne {
	spuo.mutation.RemoveAcademicProfileIDs(ids...)
	return spuo
}

// RemoveAcademicProfile removes "academic_profile" edges to StudentAcademicProfile entities.
func (spuo *StudentProfileUpdateOne) RemoveAcademicProfile(s ...*StudentAcademicProfile) *StudentProfileUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemoveAcademicProfileIDs(ids...)
}

// ClearWorkProfile clears all "work_profile" edges to the StudentWorkProfile entity.
func (spuo *StudentProfileUpdateOne) ClearWorkProfile() *StudentProfileUpdateOne {
	spuo.mutation.ClearWorkProfile()
	return spuo
}

// RemoveWorkProfileIDs removes the "work_profile" edge to StudentWorkProfile entities by IDs.
func (spuo *StudentProfileUpdateOne) RemoveWorkProfileIDs(ids ...xid.ID) *StudentProfileUpdateOne {
	spuo.mutation.RemoveWorkProfileIDs(ids...)
	return spuo
}

// RemoveWorkProfile removes "work_profile" edges to StudentWorkProfile entities.
func (spuo *StudentProfileUpdateOne) RemoveWorkProfile(s ...*StudentWorkProfile) *StudentProfileUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemoveWorkProfileIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *StudentProfileUpdateOne) Select(field string, fields ...string) *StudentProfileUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated StudentProfile entity.
func (spuo *StudentProfileUpdateOne) Save(ctx context.Context) (*StudentProfile, error) {
	var (
		err  error
		node *StudentProfile
	)
	if len(spuo.hooks) == 0 {
		if err = spuo.check(); err != nil {
			return nil, err
		}
		node, err = spuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spuo.check(); err != nil {
				return nil, err
			}
			spuo.mutation = mutation
			node, err = spuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spuo.hooks) - 1; i >= 0; i-- {
			if spuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *StudentProfileUpdateOne) SaveX(ctx context.Context) *StudentProfile {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *StudentProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *StudentProfileUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *StudentProfileUpdateOne) check() error {
	if v, ok := spuo.mutation.Name(); ok {
		if err := studentprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.name": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Phone(); ok {
		if err := studentprofile.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.phone": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Gender(); ok {
		if err := studentprofile.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.gender": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Caste(); ok {
		if err := studentprofile.CasteValidator(v); err != nil {
			return &ValidationError{Name: "caste", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.caste": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Nationality(); ok {
		if err := studentprofile.NationalityValidator(v); err != nil {
			return &ValidationError{Name: "nationality", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.nationality": %w`, err)}
		}
	}
	if _, ok := spuo.mutation.UserID(); spuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudentProfile.user"`)
	}
	return nil
}

func (spuo *StudentProfileUpdateOne) sqlSave(ctx context.Context) (_node *StudentProfile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studentprofile.Table,
			Columns: studentprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studentprofile.FieldID,
			},
		},
	}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StudentProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studentprofile.FieldID)
		for _, f := range fields {
			if !studentprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != studentprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldName,
		})
	}
	if value, ok := spuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldPhone,
		})
	}
	if value, ok := spuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldGender,
		})
	}
	if value, ok := spuo.mutation.Caste(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldCaste,
		})
	}
	if value, ok := spuo.mutation.Nationality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldNationality,
		})
	}
	if spuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   studentprofile.UserTable,
			Columns: []string{studentprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   studentprofile.UserTable,
			Columns: []string{studentprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.AcademicProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.AcademicProfileTable,
			Columns: []string{studentprofile.AcademicProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentacademicprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedAcademicProfileIDs(); len(nodes) > 0 && !spuo.mutation.AcademicProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.AcademicProfileTable,
			Columns: []string{studentprofile.AcademicProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentacademicprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.AcademicProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.AcademicProfileTable,
			Columns: []string{studentprofile.AcademicProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentacademicprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.WorkProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.WorkProfileTable,
			Columns: []string{studentprofile.WorkProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentworkprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedWorkProfileIDs(); len(nodes) > 0 && !spuo.mutation.WorkProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.WorkProfileTable,
			Columns: []string{studentprofile.WorkProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentworkprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.WorkProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.WorkProfileTable,
			Columns: []string{studentprofile.WorkProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentworkprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StudentProfile{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studentprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
