// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"

	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeStudentProfile holds the string denoting the student_profile edge name in mutations.
	EdgeStudentProfile = "student_profile"
	// EdgeCollegeProfile holds the string denoting the college_profile edge name in mutations.
	EdgeCollegeProfile = "college_profile"
	// EdgeCandidates holds the string denoting the candidates edge name in mutations.
	EdgeCandidates = "candidates"
	// EdgeEnrolledIn holds the string denoting the enrolled_in edge name in mutations.
	EdgeEnrolledIn = "enrolled_in"
	// EdgeCompanies holds the string denoting the companies edge name in mutations.
	EdgeCompanies = "companies"
	// EdgeJobPosts holds the string denoting the job_posts edge name in mutations.
	EdgeJobPosts = "job_posts"
	// EdgeAppliedTo holds the string denoting the applied_to edge name in mutations.
	EdgeAppliedTo = "applied_to"
	// Table holds the table name of the user in the database.
	Table = "users"
	// StudentProfileTable is the table that holds the student_profile relation/edge.
	StudentProfileTable = "student_profiles"
	// StudentProfileInverseTable is the table name for the StudentProfile entity.
	// It exists in this package in order to avoid circular dependency with the "studentprofile" package.
	StudentProfileInverseTable = "student_profiles"
	// StudentProfileColumn is the table column denoting the student_profile relation/edge.
	StudentProfileColumn = "user_student_profile"
	// CollegeProfileTable is the table that holds the college_profile relation/edge.
	CollegeProfileTable = "college_profiles"
	// CollegeProfileInverseTable is the table name for the CollegeProfile entity.
	// It exists in this package in order to avoid circular dependency with the "collegeprofile" package.
	CollegeProfileInverseTable = "college_profiles"
	// CollegeProfileColumn is the table column denoting the college_profile relation/edge.
	CollegeProfileColumn = "user_college_profile"
	// CandidatesTable is the table that holds the candidates relation/edge. The primary key declared below.
	CandidatesTable = "user_enrolled_in"
	// EnrolledInTable is the table that holds the enrolled_in relation/edge. The primary key declared below.
	EnrolledInTable = "user_enrolled_in"
	// CompaniesTable is the table that holds the companies relation/edge.
	CompaniesTable = "companies"
	// CompaniesInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompaniesInverseTable = "companies"
	// CompaniesColumn is the table column denoting the companies relation/edge.
	CompaniesColumn = "user_companies"
	// JobPostsTable is the table that holds the job_posts relation/edge.
	JobPostsTable = "job_posts"
	// JobPostsInverseTable is the table name for the JobPost entity.
	// It exists in this package in order to avoid circular dependency with the "jobpost" package.
	JobPostsInverseTable = "job_posts"
	// JobPostsColumn is the table column denoting the job_posts relation/edge.
	JobPostsColumn = "user_job_posts"
	// AppliedToTable is the table that holds the applied_to relation/edge. The primary key declared below.
	AppliedToTable = "job_post_candidates"
	// AppliedToInverseTable is the table name for the JobPost entity.
	// It exists in this package in order to avoid circular dependency with the "jobpost" package.
	AppliedToInverseTable = "job_posts"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPassword,
	FieldEmailVerified,
	FieldRole,
	FieldCreatedAt,
}

var (
	// CandidatesPrimaryKey and CandidatesColumn2 are the table columns denoting the
	// primary key for the candidates relation (M2M).
	CandidatesPrimaryKey = []string{"user_id", "candidate_id"}
	// EnrolledInPrimaryKey and EnrolledInColumn2 are the table columns denoting the
	// primary key for the enrolled_in relation (M2M).
	EnrolledInPrimaryKey = []string{"user_id", "candidate_id"}
	// AppliedToPrimaryKey and AppliedToColumn2 are the table columns denoting the
	// primary key for the applied_to relation (M2M).
	AppliedToPrimaryKey = []string{"job_post_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultEmailVerified holds the default value on creation for the "email_verified" field.
	DefaultEmailVerified bool
	// DefaultRole holds the default value on creation for the "role" field.
	DefaultRole string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)
