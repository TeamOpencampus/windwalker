// Code generated by entc, DO NOT EDIT.

package studentacademicprofile

const (
	// Label holds the string label denoting the studentacademicprofile type in the database.
	Label = "student_academic_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCourse holds the string denoting the course field in the database.
	FieldCourse = "course"
	// FieldInstitute holds the string denoting the institute field in the database.
	FieldInstitute = "institute"
	// FieldBoard holds the string denoting the board field in the database.
	FieldBoard = "board"
	// FieldRegNo holds the string denoting the reg_no field in the database.
	FieldRegNo = "reg_no"
	// FieldDepartment holds the string denoting the department field in the database.
	FieldDepartment = "department"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldMarks holds the string denoting the marks field in the database.
	FieldMarks = "marks"
	// EdgeStudentProfile holds the string denoting the student_profile edge name in mutations.
	EdgeStudentProfile = "student_profile"
	// Table holds the table name of the studentacademicprofile in the database.
	Table = "student_academic_profiles"
	// StudentProfileTable is the table that holds the student_profile relation/edge.
	StudentProfileTable = "student_academic_profiles"
	// StudentProfileInverseTable is the table name for the StudentProfile entity.
	// It exists in this package in order to avoid circular dependency with the "studentprofile" package.
	StudentProfileInverseTable = "student_profiles"
	// StudentProfileColumn is the table column denoting the student_profile relation/edge.
	StudentProfileColumn = "student_profile_academic_profile"
)

// Columns holds all SQL columns for studentacademicprofile fields.
var Columns = []string{
	FieldID,
	FieldCourse,
	FieldInstitute,
	FieldBoard,
	FieldRegNo,
	FieldDepartment,
	FieldStartDate,
	FieldEndDate,
	FieldMarks,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "student_academic_profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"student_profile_academic_profile",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CourseValidator is a validator for the "course" field. It is called by the builders before save.
	CourseValidator func(string) error
	// InstituteValidator is a validator for the "institute" field. It is called by the builders before save.
	InstituteValidator func(string) error
	// BoardValidator is a validator for the "board" field. It is called by the builders before save.
	BoardValidator func(string) error
	// RegNoValidator is a validator for the "reg_no" field. It is called by the builders before save.
	RegNoValidator func(string) error
	// DefaultDepartment holds the default value on creation for the "department" field.
	DefaultDepartment string
	// StartDateValidator is a validator for the "start_date" field. It is called by the builders before save.
	StartDateValidator func(string) error
	// EndDateValidator is a validator for the "end_date" field. It is called by the builders before save.
	EndDateValidator func(string) error
	// MarksValidator is a validator for the "marks" field. It is called by the builders before save.
	MarksValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)
