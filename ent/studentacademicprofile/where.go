// Code generated by entc, DO NOT EDIT.

package studentacademicprofile

import (
	"windwalker/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Course applies equality check predicate on the "course" field. It's identical to CourseEQ.
func Course(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourse), v))
	})
}

// Institute applies equality check predicate on the "institute" field. It's identical to InstituteEQ.
func Institute(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstitute), v))
	})
}

// Board applies equality check predicate on the "board" field. It's identical to BoardEQ.
func Board(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBoard), v))
	})
}

// RegNo applies equality check predicate on the "reg_no" field. It's identical to RegNoEQ.
func RegNo(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegNo), v))
	})
}

// Department applies equality check predicate on the "department" field. It's identical to DepartmentEQ.
func Department(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartment), v))
	})
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// Marks applies equality check predicate on the "marks" field. It's identical to MarksEQ.
func Marks(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarks), v))
	})
}

// CourseEQ applies the EQ predicate on the "course" field.
func CourseEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourse), v))
	})
}

// CourseNEQ applies the NEQ predicate on the "course" field.
func CourseNEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourse), v))
	})
}

// CourseIn applies the In predicate on the "course" field.
func CourseIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourse), v...))
	})
}

// CourseNotIn applies the NotIn predicate on the "course" field.
func CourseNotIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourse), v...))
	})
}

// CourseGT applies the GT predicate on the "course" field.
func CourseGT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourse), v))
	})
}

// CourseGTE applies the GTE predicate on the "course" field.
func CourseGTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourse), v))
	})
}

// CourseLT applies the LT predicate on the "course" field.
func CourseLT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourse), v))
	})
}

// CourseLTE applies the LTE predicate on the "course" field.
func CourseLTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourse), v))
	})
}

// CourseContains applies the Contains predicate on the "course" field.
func CourseContains(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourse), v))
	})
}

// CourseHasPrefix applies the HasPrefix predicate on the "course" field.
func CourseHasPrefix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourse), v))
	})
}

// CourseHasSuffix applies the HasSuffix predicate on the "course" field.
func CourseHasSuffix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourse), v))
	})
}

// CourseEqualFold applies the EqualFold predicate on the "course" field.
func CourseEqualFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourse), v))
	})
}

// CourseContainsFold applies the ContainsFold predicate on the "course" field.
func CourseContainsFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourse), v))
	})
}

// InstituteEQ applies the EQ predicate on the "institute" field.
func InstituteEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstitute), v))
	})
}

// InstituteNEQ applies the NEQ predicate on the "institute" field.
func InstituteNEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstitute), v))
	})
}

// InstituteIn applies the In predicate on the "institute" field.
func InstituteIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstitute), v...))
	})
}

// InstituteNotIn applies the NotIn predicate on the "institute" field.
func InstituteNotIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstitute), v...))
	})
}

// InstituteGT applies the GT predicate on the "institute" field.
func InstituteGT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstitute), v))
	})
}

// InstituteGTE applies the GTE predicate on the "institute" field.
func InstituteGTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstitute), v))
	})
}

// InstituteLT applies the LT predicate on the "institute" field.
func InstituteLT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstitute), v))
	})
}

// InstituteLTE applies the LTE predicate on the "institute" field.
func InstituteLTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstitute), v))
	})
}

// InstituteContains applies the Contains predicate on the "institute" field.
func InstituteContains(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstitute), v))
	})
}

// InstituteHasPrefix applies the HasPrefix predicate on the "institute" field.
func InstituteHasPrefix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstitute), v))
	})
}

// InstituteHasSuffix applies the HasSuffix predicate on the "institute" field.
func InstituteHasSuffix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstitute), v))
	})
}

// InstituteEqualFold applies the EqualFold predicate on the "institute" field.
func InstituteEqualFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstitute), v))
	})
}

// InstituteContainsFold applies the ContainsFold predicate on the "institute" field.
func InstituteContainsFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstitute), v))
	})
}

// BoardEQ applies the EQ predicate on the "board" field.
func BoardEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBoard), v))
	})
}

// BoardNEQ applies the NEQ predicate on the "board" field.
func BoardNEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBoard), v))
	})
}

// BoardIn applies the In predicate on the "board" field.
func BoardIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBoard), v...))
	})
}

// BoardNotIn applies the NotIn predicate on the "board" field.
func BoardNotIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBoard), v...))
	})
}

// BoardGT applies the GT predicate on the "board" field.
func BoardGT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBoard), v))
	})
}

// BoardGTE applies the GTE predicate on the "board" field.
func BoardGTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBoard), v))
	})
}

// BoardLT applies the LT predicate on the "board" field.
func BoardLT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBoard), v))
	})
}

// BoardLTE applies the LTE predicate on the "board" field.
func BoardLTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBoard), v))
	})
}

// BoardContains applies the Contains predicate on the "board" field.
func BoardContains(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBoard), v))
	})
}

// BoardHasPrefix applies the HasPrefix predicate on the "board" field.
func BoardHasPrefix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBoard), v))
	})
}

// BoardHasSuffix applies the HasSuffix predicate on the "board" field.
func BoardHasSuffix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBoard), v))
	})
}

// BoardEqualFold applies the EqualFold predicate on the "board" field.
func BoardEqualFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBoard), v))
	})
}

// BoardContainsFold applies the ContainsFold predicate on the "board" field.
func BoardContainsFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBoard), v))
	})
}

// RegNoEQ applies the EQ predicate on the "reg_no" field.
func RegNoEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegNo), v))
	})
}

// RegNoNEQ applies the NEQ predicate on the "reg_no" field.
func RegNoNEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegNo), v))
	})
}

// RegNoIn applies the In predicate on the "reg_no" field.
func RegNoIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegNo), v...))
	})
}

// RegNoNotIn applies the NotIn predicate on the "reg_no" field.
func RegNoNotIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegNo), v...))
	})
}

// RegNoGT applies the GT predicate on the "reg_no" field.
func RegNoGT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegNo), v))
	})
}

// RegNoGTE applies the GTE predicate on the "reg_no" field.
func RegNoGTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegNo), v))
	})
}

// RegNoLT applies the LT predicate on the "reg_no" field.
func RegNoLT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegNo), v))
	})
}

// RegNoLTE applies the LTE predicate on the "reg_no" field.
func RegNoLTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegNo), v))
	})
}

// RegNoContains applies the Contains predicate on the "reg_no" field.
func RegNoContains(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegNo), v))
	})
}

// RegNoHasPrefix applies the HasPrefix predicate on the "reg_no" field.
func RegNoHasPrefix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegNo), v))
	})
}

// RegNoHasSuffix applies the HasSuffix predicate on the "reg_no" field.
func RegNoHasSuffix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegNo), v))
	})
}

// RegNoEqualFold applies the EqualFold predicate on the "reg_no" field.
func RegNoEqualFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegNo), v))
	})
}

// RegNoContainsFold applies the ContainsFold predicate on the "reg_no" field.
func RegNoContainsFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegNo), v))
	})
}

// DepartmentEQ applies the EQ predicate on the "department" field.
func DepartmentEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartment), v))
	})
}

// DepartmentNEQ applies the NEQ predicate on the "department" field.
func DepartmentNEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepartment), v))
	})
}

// DepartmentIn applies the In predicate on the "department" field.
func DepartmentIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepartment), v...))
	})
}

// DepartmentNotIn applies the NotIn predicate on the "department" field.
func DepartmentNotIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepartment), v...))
	})
}

// DepartmentGT applies the GT predicate on the "department" field.
func DepartmentGT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepartment), v))
	})
}

// DepartmentGTE applies the GTE predicate on the "department" field.
func DepartmentGTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepartment), v))
	})
}

// DepartmentLT applies the LT predicate on the "department" field.
func DepartmentLT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepartment), v))
	})
}

// DepartmentLTE applies the LTE predicate on the "department" field.
func DepartmentLTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepartment), v))
	})
}

// DepartmentContains applies the Contains predicate on the "department" field.
func DepartmentContains(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDepartment), v))
	})
}

// DepartmentHasPrefix applies the HasPrefix predicate on the "department" field.
func DepartmentHasPrefix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDepartment), v))
	})
}

// DepartmentHasSuffix applies the HasSuffix predicate on the "department" field.
func DepartmentHasSuffix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDepartment), v))
	})
}

// DepartmentEqualFold applies the EqualFold predicate on the "department" field.
func DepartmentEqualFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDepartment), v))
	})
}

// DepartmentContainsFold applies the ContainsFold predicate on the "department" field.
func DepartmentContainsFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDepartment), v))
	})
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartDate), v))
	})
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartDate), v...))
	})
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartDate), v...))
	})
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartDate), v))
	})
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartDate), v))
	})
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartDate), v))
	})
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartDate), v))
	})
}

// StartDateContains applies the Contains predicate on the "start_date" field.
func StartDateContains(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStartDate), v))
	})
}

// StartDateHasPrefix applies the HasPrefix predicate on the "start_date" field.
func StartDateHasPrefix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStartDate), v))
	})
}

// StartDateHasSuffix applies the HasSuffix predicate on the "start_date" field.
func StartDateHasSuffix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStartDate), v))
	})
}

// StartDateEqualFold applies the EqualFold predicate on the "start_date" field.
func StartDateEqualFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStartDate), v))
	})
}

// StartDateContainsFold applies the ContainsFold predicate on the "start_date" field.
func StartDateContainsFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStartDate), v))
	})
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndDate), v))
	})
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndDate), v...))
	})
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndDate), v...))
	})
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndDate), v))
	})
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndDate), v))
	})
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndDate), v))
	})
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndDate), v))
	})
}

// EndDateContains applies the Contains predicate on the "end_date" field.
func EndDateContains(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEndDate), v))
	})
}

// EndDateHasPrefix applies the HasPrefix predicate on the "end_date" field.
func EndDateHasPrefix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEndDate), v))
	})
}

// EndDateHasSuffix applies the HasSuffix predicate on the "end_date" field.
func EndDateHasSuffix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEndDate), v))
	})
}

// EndDateEqualFold applies the EqualFold predicate on the "end_date" field.
func EndDateEqualFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEndDate), v))
	})
}

// EndDateContainsFold applies the ContainsFold predicate on the "end_date" field.
func EndDateContainsFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEndDate), v))
	})
}

// MarksEQ applies the EQ predicate on the "marks" field.
func MarksEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarks), v))
	})
}

// MarksNEQ applies the NEQ predicate on the "marks" field.
func MarksNEQ(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarks), v))
	})
}

// MarksIn applies the In predicate on the "marks" field.
func MarksIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMarks), v...))
	})
}

// MarksNotIn applies the NotIn predicate on the "marks" field.
func MarksNotIn(vs ...string) predicate.StudentAcademicProfile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMarks), v...))
	})
}

// MarksGT applies the GT predicate on the "marks" field.
func MarksGT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarks), v))
	})
}

// MarksGTE applies the GTE predicate on the "marks" field.
func MarksGTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarks), v))
	})
}

// MarksLT applies the LT predicate on the "marks" field.
func MarksLT(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarks), v))
	})
}

// MarksLTE applies the LTE predicate on the "marks" field.
func MarksLTE(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarks), v))
	})
}

// MarksContains applies the Contains predicate on the "marks" field.
func MarksContains(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMarks), v))
	})
}

// MarksHasPrefix applies the HasPrefix predicate on the "marks" field.
func MarksHasPrefix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMarks), v))
	})
}

// MarksHasSuffix applies the HasSuffix predicate on the "marks" field.
func MarksHasSuffix(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMarks), v))
	})
}

// MarksEqualFold applies the EqualFold predicate on the "marks" field.
func MarksEqualFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMarks), v))
	})
}

// MarksContainsFold applies the ContainsFold predicate on the "marks" field.
func MarksContainsFold(v string) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMarks), v))
	})
}

// HasStudentProfile applies the HasEdge predicate on the "student_profile" edge.
func HasStudentProfile() predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudentProfileTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudentProfileTable, StudentProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentProfileWith applies the HasEdge predicate on the "student_profile" edge with a given conditions (other predicates).
func HasStudentProfileWith(preds ...predicate.StudentProfile) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudentProfileInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudentProfileTable, StudentProfileColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StudentAcademicProfile) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StudentAcademicProfile) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StudentAcademicProfile) predicate.StudentAcademicProfile {
	return predicate.StudentAcademicProfile(func(s *sql.Selector) {
		p(s.Not())
	})
}
