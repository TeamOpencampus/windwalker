// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"windwalker/ent/predicate"
	"windwalker/ent/studentacademicprofile"
	"windwalker/ent/studentprofile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// StudentAcademicProfileUpdate is the builder for updating StudentAcademicProfile entities.
type StudentAcademicProfileUpdate struct {
	config
	hooks    []Hook
	mutation *StudentAcademicProfileMutation
}

// Where appends a list predicates to the StudentAcademicProfileUpdate builder.
func (sapu *StudentAcademicProfileUpdate) Where(ps ...predicate.StudentAcademicProfile) *StudentAcademicProfileUpdate {
	sapu.mutation.Where(ps...)
	return sapu
}

// SetCourse sets the "course" field.
func (sapu *StudentAcademicProfileUpdate) SetCourse(s string) *StudentAcademicProfileUpdate {
	sapu.mutation.SetCourse(s)
	return sapu
}

// SetInstitute sets the "institute" field.
func (sapu *StudentAcademicProfileUpdate) SetInstitute(s string) *StudentAcademicProfileUpdate {
	sapu.mutation.SetInstitute(s)
	return sapu
}

// SetBoard sets the "board" field.
func (sapu *StudentAcademicProfileUpdate) SetBoard(s string) *StudentAcademicProfileUpdate {
	sapu.mutation.SetBoard(s)
	return sapu
}

// SetRegNo sets the "reg_no" field.
func (sapu *StudentAcademicProfileUpdate) SetRegNo(s string) *StudentAcademicProfileUpdate {
	sapu.mutation.SetRegNo(s)
	return sapu
}

// SetDepartment sets the "department" field.
func (sapu *StudentAcademicProfileUpdate) SetDepartment(s string) *StudentAcademicProfileUpdate {
	sapu.mutation.SetDepartment(s)
	return sapu
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (sapu *StudentAcademicProfileUpdate) SetNillableDepartment(s *string) *StudentAcademicProfileUpdate {
	if s != nil {
		sapu.SetDepartment(*s)
	}
	return sapu
}

// SetStartDate sets the "start_date" field.
func (sapu *StudentAcademicProfileUpdate) SetStartDate(s string) *StudentAcademicProfileUpdate {
	sapu.mutation.SetStartDate(s)
	return sapu
}

// SetEndDate sets the "end_date" field.
func (sapu *StudentAcademicProfileUpdate) SetEndDate(s string) *StudentAcademicProfileUpdate {
	sapu.mutation.SetEndDate(s)
	return sapu
}

// SetMarks sets the "marks" field.
func (sapu *StudentAcademicProfileUpdate) SetMarks(s string) *StudentAcademicProfileUpdate {
	sapu.mutation.SetMarks(s)
	return sapu
}

// SetStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID.
func (sapu *StudentAcademicProfileUpdate) SetStudentProfileID(id xid.ID) *StudentAcademicProfileUpdate {
	sapu.mutation.SetStudentProfileID(id)
	return sapu
}

// SetNillableStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID if the given value is not nil.
func (sapu *StudentAcademicProfileUpdate) SetNillableStudentProfileID(id *xid.ID) *StudentAcademicProfileUpdate {
	if id != nil {
		sapu = sapu.SetStudentProfileID(*id)
	}
	return sapu
}

// SetStudentProfile sets the "student_profile" edge to the StudentProfile entity.
func (sapu *StudentAcademicProfileUpdate) SetStudentProfile(s *StudentProfile) *StudentAcademicProfileUpdate {
	return sapu.SetStudentProfileID(s.ID)
}

// Mutation returns the StudentAcademicProfileMutation object of the builder.
func (sapu *StudentAcademicProfileUpdate) Mutation() *StudentAcademicProfileMutation {
	return sapu.mutation
}

// ClearStudentProfile clears the "student_profile" edge to the StudentProfile entity.
func (sapu *StudentAcademicProfileUpdate) ClearStudentProfile() *StudentAcademicProfileUpdate {
	sapu.mutation.ClearStudentProfile()
	return sapu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sapu *StudentAcademicProfileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sapu.hooks) == 0 {
		if err = sapu.check(); err != nil {
			return 0, err
		}
		affected, err = sapu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentAcademicProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sapu.check(); err != nil {
				return 0, err
			}
			sapu.mutation = mutation
			affected, err = sapu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sapu.hooks) - 1; i >= 0; i-- {
			if sapu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sapu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sapu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sapu *StudentAcademicProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := sapu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sapu *StudentAcademicProfileUpdate) Exec(ctx context.Context) error {
	_, err := sapu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sapu *StudentAcademicProfileUpdate) ExecX(ctx context.Context) {
	if err := sapu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sapu *StudentAcademicProfileUpdate) check() error {
	if v, ok := sapu.mutation.Course(); ok {
		if err := studentacademicprofile.CourseValidator(v); err != nil {
			return &ValidationError{Name: "course", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.course": %w`, err)}
		}
	}
	if v, ok := sapu.mutation.Institute(); ok {
		if err := studentacademicprofile.InstituteValidator(v); err != nil {
			return &ValidationError{Name: "institute", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.institute": %w`, err)}
		}
	}
	if v, ok := sapu.mutation.Board(); ok {
		if err := studentacademicprofile.BoardValidator(v); err != nil {
			return &ValidationError{Name: "board", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.board": %w`, err)}
		}
	}
	if v, ok := sapu.mutation.RegNo(); ok {
		if err := studentacademicprofile.RegNoValidator(v); err != nil {
			return &ValidationError{Name: "reg_no", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.reg_no": %w`, err)}
		}
	}
	if v, ok := sapu.mutation.StartDate(); ok {
		if err := studentacademicprofile.StartDateValidator(v); err != nil {
			return &ValidationError{Name: "start_date", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.start_date": %w`, err)}
		}
	}
	if v, ok := sapu.mutation.EndDate(); ok {
		if err := studentacademicprofile.EndDateValidator(v); err != nil {
			return &ValidationError{Name: "end_date", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.end_date": %w`, err)}
		}
	}
	if v, ok := sapu.mutation.Marks(); ok {
		if err := studentacademicprofile.MarksValidator(v); err != nil {
			return &ValidationError{Name: "marks", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.marks": %w`, err)}
		}
	}
	return nil
}

func (sapu *StudentAcademicProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studentacademicprofile.Table,
			Columns: studentacademicprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studentacademicprofile.FieldID,
			},
		},
	}
	if ps := sapu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sapu.mutation.Course(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldCourse,
		})
	}
	if value, ok := sapu.mutation.Institute(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldInstitute,
		})
	}
	if value, ok := sapu.mutation.Board(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldBoard,
		})
	}
	if value, ok := sapu.mutation.RegNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldRegNo,
		})
	}
	if value, ok := sapu.mutation.Department(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldDepartment,
		})
	}
	if value, ok := sapu.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldStartDate,
		})
	}
	if value, ok := sapu.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldEndDate,
		})
	}
	if value, ok := sapu.mutation.Marks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldMarks,
		})
	}
	if sapu.mutation.StudentProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentacademicprofile.StudentProfileTable,
			Columns: []string{studentacademicprofile.StudentProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sapu.mutation.StudentProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentacademicprofile.StudentProfileTable,
			Columns: []string{studentacademicprofile.StudentProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sapu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studentacademicprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StudentAcademicProfileUpdateOne is the builder for updating a single StudentAcademicProfile entity.
type StudentAcademicProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentAcademicProfileMutation
}

// SetCourse sets the "course" field.
func (sapuo *StudentAcademicProfileUpdateOne) SetCourse(s string) *StudentAcademicProfileUpdateOne {
	sapuo.mutation.SetCourse(s)
	return sapuo
}

// SetInstitute sets the "institute" field.
func (sapuo *StudentAcademicProfileUpdateOne) SetInstitute(s string) *StudentAcademicProfileUpdateOne {
	sapuo.mutation.SetInstitute(s)
	return sapuo
}

// SetBoard sets the "board" field.
func (sapuo *StudentAcademicProfileUpdateOne) SetBoard(s string) *StudentAcademicProfileUpdateOne {
	sapuo.mutation.SetBoard(s)
	return sapuo
}

// SetRegNo sets the "reg_no" field.
func (sapuo *StudentAcademicProfileUpdateOne) SetRegNo(s string) *StudentAcademicProfileUpdateOne {
	sapuo.mutation.SetRegNo(s)
	return sapuo
}

// SetDepartment sets the "department" field.
func (sapuo *StudentAcademicProfileUpdateOne) SetDepartment(s string) *StudentAcademicProfileUpdateOne {
	sapuo.mutation.SetDepartment(s)
	return sapuo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (sapuo *StudentAcademicProfileUpdateOne) SetNillableDepartment(s *string) *StudentAcademicProfileUpdateOne {
	if s != nil {
		sapuo.SetDepartment(*s)
	}
	return sapuo
}

// SetStartDate sets the "start_date" field.
func (sapuo *StudentAcademicProfileUpdateOne) SetStartDate(s string) *StudentAcademicProfileUpdateOne {
	sapuo.mutation.SetStartDate(s)
	return sapuo
}

// SetEndDate sets the "end_date" field.
func (sapuo *StudentAcademicProfileUpdateOne) SetEndDate(s string) *StudentAcademicProfileUpdateOne {
	sapuo.mutation.SetEndDate(s)
	return sapuo
}

// SetMarks sets the "marks" field.
func (sapuo *StudentAcademicProfileUpdateOne) SetMarks(s string) *StudentAcademicProfileUpdateOne {
	sapuo.mutation.SetMarks(s)
	return sapuo
}

// SetStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID.
func (sapuo *StudentAcademicProfileUpdateOne) SetStudentProfileID(id xid.ID) *StudentAcademicProfileUpdateOne {
	sapuo.mutation.SetStudentProfileID(id)
	return sapuo
}

// SetNillableStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID if the given value is not nil.
func (sapuo *StudentAcademicProfileUpdateOne) SetNillableStudentProfileID(id *xid.ID) *StudentAcademicProfileUpdateOne {
	if id != nil {
		sapuo = sapuo.SetStudentProfileID(*id)
	}
	return sapuo
}

// SetStudentProfile sets the "student_profile" edge to the StudentProfile entity.
func (sapuo *StudentAcademicProfileUpdateOne) SetStudentProfile(s *StudentProfile) *StudentAcademicProfileUpdateOne {
	return sapuo.SetStudentProfileID(s.ID)
}

// Mutation returns the StudentAcademicProfileMutation object of the builder.
func (sapuo *StudentAcademicProfileUpdateOne) Mutation() *StudentAcademicProfileMutation {
	return sapuo.mutation
}

// ClearStudentProfile clears the "student_profile" edge to the StudentProfile entity.
func (sapuo *StudentAcademicProfileUpdateOne) ClearStudentProfile() *StudentAcademicProfileUpdateOne {
	sapuo.mutation.ClearStudentProfile()
	return sapuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sapuo *StudentAcademicProfileUpdateOne) Select(field string, fields ...string) *StudentAcademicProfileUpdateOne {
	sapuo.fields = append([]string{field}, fields...)
	return sapuo
}

// Save executes the query and returns the updated StudentAcademicProfile entity.
func (sapuo *StudentAcademicProfileUpdateOne) Save(ctx context.Context) (*StudentAcademicProfile, error) {
	var (
		err  error
		node *StudentAcademicProfile
	)
	if len(sapuo.hooks) == 0 {
		if err = sapuo.check(); err != nil {
			return nil, err
		}
		node, err = sapuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentAcademicProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sapuo.check(); err != nil {
				return nil, err
			}
			sapuo.mutation = mutation
			node, err = sapuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sapuo.hooks) - 1; i >= 0; i-- {
			if sapuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sapuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sapuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sapuo *StudentAcademicProfileUpdateOne) SaveX(ctx context.Context) *StudentAcademicProfile {
	node, err := sapuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sapuo *StudentAcademicProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := sapuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sapuo *StudentAcademicProfileUpdateOne) ExecX(ctx context.Context) {
	if err := sapuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sapuo *StudentAcademicProfileUpdateOne) check() error {
	if v, ok := sapuo.mutation.Course(); ok {
		if err := studentacademicprofile.CourseValidator(v); err != nil {
			return &ValidationError{Name: "course", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.course": %w`, err)}
		}
	}
	if v, ok := sapuo.mutation.Institute(); ok {
		if err := studentacademicprofile.InstituteValidator(v); err != nil {
			return &ValidationError{Name: "institute", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.institute": %w`, err)}
		}
	}
	if v, ok := sapuo.mutation.Board(); ok {
		if err := studentacademicprofile.BoardValidator(v); err != nil {
			return &ValidationError{Name: "board", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.board": %w`, err)}
		}
	}
	if v, ok := sapuo.mutation.RegNo(); ok {
		if err := studentacademicprofile.RegNoValidator(v); err != nil {
			return &ValidationError{Name: "reg_no", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.reg_no": %w`, err)}
		}
	}
	if v, ok := sapuo.mutation.StartDate(); ok {
		if err := studentacademicprofile.StartDateValidator(v); err != nil {
			return &ValidationError{Name: "start_date", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.start_date": %w`, err)}
		}
	}
	if v, ok := sapuo.mutation.EndDate(); ok {
		if err := studentacademicprofile.EndDateValidator(v); err != nil {
			return &ValidationError{Name: "end_date", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.end_date": %w`, err)}
		}
	}
	if v, ok := sapuo.mutation.Marks(); ok {
		if err := studentacademicprofile.MarksValidator(v); err != nil {
			return &ValidationError{Name: "marks", err: fmt.Errorf(`ent: validator failed for field "StudentAcademicProfile.marks": %w`, err)}
		}
	}
	return nil
}

func (sapuo *StudentAcademicProfileUpdateOne) sqlSave(ctx context.Context) (_node *StudentAcademicProfile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studentacademicprofile.Table,
			Columns: studentacademicprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studentacademicprofile.FieldID,
			},
		},
	}
	id, ok := sapuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StudentAcademicProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sapuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studentacademicprofile.FieldID)
		for _, f := range fields {
			if !studentacademicprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != studentacademicprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sapuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sapuo.mutation.Course(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldCourse,
		})
	}
	if value, ok := sapuo.mutation.Institute(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldInstitute,
		})
	}
	if value, ok := sapuo.mutation.Board(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldBoard,
		})
	}
	if value, ok := sapuo.mutation.RegNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldRegNo,
		})
	}
	if value, ok := sapuo.mutation.Department(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldDepartment,
		})
	}
	if value, ok := sapuo.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldStartDate,
		})
	}
	if value, ok := sapuo.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldEndDate,
		})
	}
	if value, ok := sapuo.mutation.Marks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentacademicprofile.FieldMarks,
		})
	}
	if sapuo.mutation.StudentProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentacademicprofile.StudentProfileTable,
			Columns: []string{studentacademicprofile.StudentProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sapuo.mutation.StudentProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentacademicprofile.StudentProfileTable,
			Columns: []string{studentacademicprofile.StudentProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StudentAcademicProfile{config: sapuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sapuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studentacademicprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
