// Code generated by entc, DO NOT EDIT.

package jobpost

import (
	"time"

	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the jobpost type in the database.
	Label = "job_post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldSalary holds the string denoting the salary field in the database.
	FieldSalary = "salary"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldCreatedOn holds the string denoting the created_on field in the database.
	FieldCreatedOn = "created_on"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeCandidates holds the string denoting the candidates edge name in mutations.
	EdgeCandidates = "candidates"
	// Table holds the table name of the jobpost in the database.
	Table = "job_posts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "job_posts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_job_posts"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "job_posts"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_posts"
	// CandidatesTable is the table that holds the candidates relation/edge. The primary key declared below.
	CandidatesTable = "job_post_candidates"
	// CandidatesInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CandidatesInverseTable = "users"
)

// Columns holds all SQL columns for jobpost fields.
var Columns = []string{
	FieldID,
	FieldPosition,
	FieldLocation,
	FieldSalary,
	FieldDescription,
	FieldTags,
	FieldCreatedOn,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "job_posts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_posts",
	"user_job_posts",
}

var (
	// CandidatesPrimaryKey and CandidatesColumn2 are the table columns denoting the
	// primary key for the candidates relation (M2M).
	CandidatesPrimaryKey = []string{"job_post_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PositionValidator is a validator for the "position" field. It is called by the builders before save.
	PositionValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// SalaryValidator is a validator for the "salary" field. It is called by the builders before save.
	SalaryValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultCreatedOn holds the default value on creation for the "created_on" field.
	DefaultCreatedOn func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)
