// Code generated by entc, DO NOT EDIT.

package jobpost

import (
	"time"
	"windwalker/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPosition), v))
	})
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// Salary applies equality check predicate on the "salary" field. It's identical to SalaryEQ.
func Salary(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalary), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// CreatedOn applies equality check predicate on the "created_on" field. It's identical to CreatedOnEQ.
func CreatedOn(v time.Time) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedOn), v))
	})
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPosition), v))
	})
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPosition), v))
	})
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPosition), v...))
	})
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPosition), v...))
	})
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPosition), v))
	})
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPosition), v))
	})
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPosition), v))
	})
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPosition), v))
	})
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPosition), v))
	})
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPosition), v))
	})
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPosition), v))
	})
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPosition), v))
	})
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPosition), v))
	})
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocation), v))
	})
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocation), v...))
	})
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocation), v...))
	})
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocation), v))
	})
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocation), v))
	})
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocation), v))
	})
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocation), v))
	})
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocation), v))
	})
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocation), v))
	})
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocation), v))
	})
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocation), v))
	})
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocation), v))
	})
}

// SalaryEQ applies the EQ predicate on the "salary" field.
func SalaryEQ(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalary), v))
	})
}

// SalaryNEQ applies the NEQ predicate on the "salary" field.
func SalaryNEQ(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalary), v))
	})
}

// SalaryIn applies the In predicate on the "salary" field.
func SalaryIn(vs ...string) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSalary), v...))
	})
}

// SalaryNotIn applies the NotIn predicate on the "salary" field.
func SalaryNotIn(vs ...string) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSalary), v...))
	})
}

// SalaryGT applies the GT predicate on the "salary" field.
func SalaryGT(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalary), v))
	})
}

// SalaryGTE applies the GTE predicate on the "salary" field.
func SalaryGTE(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalary), v))
	})
}

// SalaryLT applies the LT predicate on the "salary" field.
func SalaryLT(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalary), v))
	})
}

// SalaryLTE applies the LTE predicate on the "salary" field.
func SalaryLTE(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalary), v))
	})
}

// SalaryContains applies the Contains predicate on the "salary" field.
func SalaryContains(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSalary), v))
	})
}

// SalaryHasPrefix applies the HasPrefix predicate on the "salary" field.
func SalaryHasPrefix(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSalary), v))
	})
}

// SalaryHasSuffix applies the HasSuffix predicate on the "salary" field.
func SalaryHasSuffix(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSalary), v))
	})
}

// SalaryEqualFold applies the EqualFold predicate on the "salary" field.
func SalaryEqualFold(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSalary), v))
	})
}

// SalaryContainsFold applies the ContainsFold predicate on the "salary" field.
func SalaryContainsFold(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSalary), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// CreatedOnEQ applies the EQ predicate on the "created_on" field.
func CreatedOnEQ(v time.Time) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnNEQ applies the NEQ predicate on the "created_on" field.
func CreatedOnNEQ(v time.Time) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnIn applies the In predicate on the "created_on" field.
func CreatedOnIn(vs ...time.Time) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedOn), v...))
	})
}

// CreatedOnNotIn applies the NotIn predicate on the "created_on" field.
func CreatedOnNotIn(vs ...time.Time) predicate.JobPost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobPost(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedOn), v...))
	})
}

// CreatedOnGT applies the GT predicate on the "created_on" field.
func CreatedOnGT(v time.Time) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnGTE applies the GTE predicate on the "created_on" field.
func CreatedOnGTE(v time.Time) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnLT applies the LT predicate on the "created_on" field.
func CreatedOnLT(v time.Time) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnLTE applies the LTE predicate on the "created_on" field.
func CreatedOnLTE(v time.Time) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedOn), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompanyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompanyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidates applies the HasEdge predicate on the "candidates" edge.
func HasCandidates() predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidatesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CandidatesTable, CandidatesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidatesWith applies the HasEdge predicate on the "candidates" edge with a given conditions (other predicates).
func HasCandidatesWith(preds ...predicate.User) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidatesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CandidatesTable, CandidatesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobPost) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobPost) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobPost) predicate.JobPost {
	return predicate.JobPost(func(s *sql.Selector) {
		p(s.Not())
	})
}
