// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"windwalker/ent/studentacademicprofile"
	"windwalker/ent/studentprofile"
	"windwalker/ent/studentworkprofile"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// StudentProfileCreate is the builder for creating a StudentProfile entity.
type StudentProfileCreate struct {
	config
	mutation *StudentProfileMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (spc *StudentProfileCreate) SetName(s string) *StudentProfileCreate {
	spc.mutation.SetName(s)
	return spc
}

// SetPhone sets the "phone" field.
func (spc *StudentProfileCreate) SetPhone(s string) *StudentProfileCreate {
	spc.mutation.SetPhone(s)
	return spc
}

// SetGender sets the "gender" field.
func (spc *StudentProfileCreate) SetGender(s string) *StudentProfileCreate {
	spc.mutation.SetGender(s)
	return spc
}

// SetCaste sets the "caste" field.
func (spc *StudentProfileCreate) SetCaste(s string) *StudentProfileCreate {
	spc.mutation.SetCaste(s)
	return spc
}

// SetNationality sets the "nationality" field.
func (spc *StudentProfileCreate) SetNationality(s string) *StudentProfileCreate {
	spc.mutation.SetNationality(s)
	return spc
}

// SetID sets the "id" field.
func (spc *StudentProfileCreate) SetID(x xid.ID) *StudentProfileCreate {
	spc.mutation.SetID(x)
	return spc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spc *StudentProfileCreate) SetNillableID(x *xid.ID) *StudentProfileCreate {
	if x != nil {
		spc.SetID(*x)
	}
	return spc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spc *StudentProfileCreate) SetUserID(id xid.ID) *StudentProfileCreate {
	spc.mutation.SetUserID(id)
	return spc
}

// SetUser sets the "user" edge to the User entity.
func (spc *StudentProfileCreate) SetUser(u *User) *StudentProfileCreate {
	return spc.SetUserID(u.ID)
}

// AddAcademicProfileIDs adds the "academic_profile" edge to the StudentAcademicProfile entity by IDs.
func (spc *StudentProfileCreate) AddAcademicProfileIDs(ids ...string) *StudentProfileCreate {
	spc.mutation.AddAcademicProfileIDs(ids...)
	return spc
}

// AddAcademicProfile adds the "academic_profile" edges to the StudentAcademicProfile entity.
func (spc *StudentProfileCreate) AddAcademicProfile(s ...*StudentAcademicProfile) *StudentProfileCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spc.AddAcademicProfileIDs(ids...)
}

// AddWorkProfileIDs adds the "work_profile" edge to the StudentWorkProfile entity by IDs.
func (spc *StudentProfileCreate) AddWorkProfileIDs(ids ...xid.ID) *StudentProfileCreate {
	spc.mutation.AddWorkProfileIDs(ids...)
	return spc
}

// AddWorkProfile adds the "work_profile" edges to the StudentWorkProfile entity.
func (spc *StudentProfileCreate) AddWorkProfile(s ...*StudentWorkProfile) *StudentProfileCreate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spc.AddWorkProfileIDs(ids...)
}

// Mutation returns the StudentProfileMutation object of the builder.
func (spc *StudentProfileCreate) Mutation() *StudentProfileMutation {
	return spc.mutation
}

// Save creates the StudentProfile in the database.
func (spc *StudentProfileCreate) Save(ctx context.Context) (*StudentProfile, error) {
	var (
		err  error
		node *StudentProfile
	)
	spc.defaults()
	if len(spc.hooks) == 0 {
		if err = spc.check(); err != nil {
			return nil, err
		}
		node, err = spc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spc.check(); err != nil {
				return nil, err
			}
			spc.mutation = mutation
			if node, err = spc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(spc.hooks) - 1; i >= 0; i-- {
			if spc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (spc *StudentProfileCreate) SaveX(ctx context.Context) *StudentProfile {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *StudentProfileCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *StudentProfileCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *StudentProfileCreate) defaults() {
	if _, ok := spc.mutation.ID(); !ok {
		v := studentprofile.DefaultID()
		spc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *StudentProfileCreate) check() error {
	if _, ok := spc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "StudentProfile.name"`)}
	}
	if v, ok := spc.mutation.Name(); ok {
		if err := studentprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.name": %w`, err)}
		}
	}
	if _, ok := spc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "StudentProfile.phone"`)}
	}
	if v, ok := spc.mutation.Phone(); ok {
		if err := studentprofile.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.phone": %w`, err)}
		}
	}
	if _, ok := spc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "StudentProfile.gender"`)}
	}
	if v, ok := spc.mutation.Gender(); ok {
		if err := studentprofile.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.gender": %w`, err)}
		}
	}
	if _, ok := spc.mutation.Caste(); !ok {
		return &ValidationError{Name: "caste", err: errors.New(`ent: missing required field "StudentProfile.caste"`)}
	}
	if v, ok := spc.mutation.Caste(); ok {
		if err := studentprofile.CasteValidator(v); err != nil {
			return &ValidationError{Name: "caste", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.caste": %w`, err)}
		}
	}
	if _, ok := spc.mutation.Nationality(); !ok {
		return &ValidationError{Name: "nationality", err: errors.New(`ent: missing required field "StudentProfile.nationality"`)}
	}
	if v, ok := spc.mutation.Nationality(); ok {
		if err := studentprofile.NationalityValidator(v); err != nil {
			return &ValidationError{Name: "nationality", err: fmt.Errorf(`ent: validator failed for field "StudentProfile.nationality": %w`, err)}
		}
	}
	if _, ok := spc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "StudentProfile.user"`)}
	}
	return nil
}

func (spc *StudentProfileCreate) sqlSave(ctx context.Context) (*StudentProfile, error) {
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (spc *StudentProfileCreate) createSpec() (*StudentProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &StudentProfile{config: spc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: studentprofile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studentprofile.FieldID,
			},
		}
	)
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldName,
		})
		_node.Name = value
	}
	if value, ok := spc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := spc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := spc.mutation.Caste(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldCaste,
		})
		_node.Caste = value
	}
	if value, ok := spc.mutation.Nationality(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: studentprofile.FieldNationality,
		})
		_node.Nationality = value
	}
	if nodes := spc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   studentprofile.UserTable,
			Columns: []string{studentprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_student_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.AcademicProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.AcademicProfileTable,
			Columns: []string{studentprofile.AcademicProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentacademicprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.WorkProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studentprofile.WorkProfileTable,
			Columns: []string{studentprofile.WorkProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentworkprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StudentProfileCreateBulk is the builder for creating many StudentProfile entities in bulk.
type StudentProfileCreateBulk struct {
	config
	builders []*StudentProfileCreate
}

// Save creates the StudentProfile entities in the database.
func (spcb *StudentProfileCreateBulk) Save(ctx context.Context) ([]*StudentProfile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*StudentProfile, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StudentProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *StudentProfileCreateBulk) SaveX(ctx context.Context) []*StudentProfile {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *StudentProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *StudentProfileCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
