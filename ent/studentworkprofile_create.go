// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"windwalker/ent/studentprofile"
	"windwalker/ent/studentworkprofile"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// StudentWorkProfileCreate is the builder for creating a StudentWorkProfile entity.
type StudentWorkProfileCreate struct {
	config
	mutation *StudentWorkProfileMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (swpc *StudentWorkProfileCreate) SetID(x xid.ID) *StudentWorkProfileCreate {
	swpc.mutation.SetID(x)
	return swpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (swpc *StudentWorkProfileCreate) SetNillableID(x *xid.ID) *StudentWorkProfileCreate {
	if x != nil {
		swpc.SetID(*x)
	}
	return swpc
}

// SetStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID.
func (swpc *StudentWorkProfileCreate) SetStudentProfileID(id xid.ID) *StudentWorkProfileCreate {
	swpc.mutation.SetStudentProfileID(id)
	return swpc
}

// SetNillableStudentProfileID sets the "student_profile" edge to the StudentProfile entity by ID if the given value is not nil.
func (swpc *StudentWorkProfileCreate) SetNillableStudentProfileID(id *xid.ID) *StudentWorkProfileCreate {
	if id != nil {
		swpc = swpc.SetStudentProfileID(*id)
	}
	return swpc
}

// SetStudentProfile sets the "student_profile" edge to the StudentProfile entity.
func (swpc *StudentWorkProfileCreate) SetStudentProfile(s *StudentProfile) *StudentWorkProfileCreate {
	return swpc.SetStudentProfileID(s.ID)
}

// Mutation returns the StudentWorkProfileMutation object of the builder.
func (swpc *StudentWorkProfileCreate) Mutation() *StudentWorkProfileMutation {
	return swpc.mutation
}

// Save creates the StudentWorkProfile in the database.
func (swpc *StudentWorkProfileCreate) Save(ctx context.Context) (*StudentWorkProfile, error) {
	var (
		err  error
		node *StudentWorkProfile
	)
	swpc.defaults()
	if len(swpc.hooks) == 0 {
		if err = swpc.check(); err != nil {
			return nil, err
		}
		node, err = swpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentWorkProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = swpc.check(); err != nil {
				return nil, err
			}
			swpc.mutation = mutation
			if node, err = swpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(swpc.hooks) - 1; i >= 0; i-- {
			if swpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = swpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, swpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (swpc *StudentWorkProfileCreate) SaveX(ctx context.Context) *StudentWorkProfile {
	v, err := swpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (swpc *StudentWorkProfileCreate) Exec(ctx context.Context) error {
	_, err := swpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swpc *StudentWorkProfileCreate) ExecX(ctx context.Context) {
	if err := swpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (swpc *StudentWorkProfileCreate) defaults() {
	if _, ok := swpc.mutation.ID(); !ok {
		v := studentworkprofile.DefaultID()
		swpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (swpc *StudentWorkProfileCreate) check() error {
	return nil
}

func (swpc *StudentWorkProfileCreate) sqlSave(ctx context.Context) (*StudentWorkProfile, error) {
	_node, _spec := swpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, swpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (swpc *StudentWorkProfileCreate) createSpec() (*StudentWorkProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &StudentWorkProfile{config: swpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: studentworkprofile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studentworkprofile.FieldID,
			},
		}
	)
	if id, ok := swpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := swpc.mutation.StudentProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studentworkprofile.StudentProfileTable,
			Columns: []string{studentworkprofile.StudentProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: studentprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.student_profile_work_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StudentWorkProfileCreateBulk is the builder for creating many StudentWorkProfile entities in bulk.
type StudentWorkProfileCreateBulk struct {
	config
	builders []*StudentWorkProfileCreate
}

// Save creates the StudentWorkProfile entities in the database.
func (swpcb *StudentWorkProfileCreateBulk) Save(ctx context.Context) ([]*StudentWorkProfile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(swpcb.builders))
	nodes := make([]*StudentWorkProfile, len(swpcb.builders))
	mutators := make([]Mutator, len(swpcb.builders))
	for i := range swpcb.builders {
		func(i int, root context.Context) {
			builder := swpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StudentWorkProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, swpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, swpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, swpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (swpcb *StudentWorkProfileCreateBulk) SaveX(ctx context.Context) []*StudentWorkProfile {
	v, err := swpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (swpcb *StudentWorkProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := swpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swpcb *StudentWorkProfileCreateBulk) ExecX(ctx context.Context) {
	if err := swpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
