// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"windwalker/ent/collegeprofile"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
)

// CollegeProfile is the model entity for the CollegeProfile schema.
type CollegeProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CollegeProfileQuery when eager-loading is set.
	Edges                CollegeProfileEdges `json:"edges"`
	user_college_profile *xid.ID
}

// CollegeProfileEdges holds the relations/edges for other nodes in the graph.
type CollegeProfileEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CollegeProfileEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CollegeProfile) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case collegeprofile.FieldID, collegeprofile.FieldName, collegeprofile.FieldPhone, collegeprofile.FieldAddress, collegeprofile.FieldType:
			values[i] = new(sql.NullString)
		case collegeprofile.ForeignKeys[0]: // user_college_profile
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type CollegeProfile", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CollegeProfile fields.
func (cp *CollegeProfile) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case collegeprofile.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cp.ID = value.String
			}
		case collegeprofile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cp.Name = value.String
			}
		case collegeprofile.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				cp.Phone = value.String
			}
		case collegeprofile.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				cp.Address = value.String
			}
		case collegeprofile.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cp.Type = value.String
			}
		case collegeprofile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_college_profile", values[i])
			} else if value.Valid {
				cp.user_college_profile = new(xid.ID)
				*cp.user_college_profile = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the CollegeProfile entity.
func (cp *CollegeProfile) QueryUser() *UserQuery {
	return (&CollegeProfileClient{config: cp.config}).QueryUser(cp)
}

// Update returns a builder for updating this CollegeProfile.
// Note that you need to call CollegeProfile.Unwrap() before calling this method if this CollegeProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CollegeProfile) Update() *CollegeProfileUpdateOne {
	return (&CollegeProfileClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the CollegeProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CollegeProfile) Unwrap() *CollegeProfile {
	tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CollegeProfile is not a transactional entity")
	}
	cp.config.driver = tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CollegeProfile) String() string {
	var builder strings.Builder
	builder.WriteString("CollegeProfile(")
	builder.WriteString(fmt.Sprintf("id=%v", cp.ID))
	builder.WriteString(", name=")
	builder.WriteString(cp.Name)
	builder.WriteString(", phone=")
	builder.WriteString(cp.Phone)
	builder.WriteString(", address=")
	builder.WriteString(cp.Address)
	builder.WriteString(", type=")
	builder.WriteString(cp.Type)
	builder.WriteByte(')')
	return builder.String()
}

// CollegeProfiles is a parsable slice of CollegeProfile.
type CollegeProfiles []*CollegeProfile

func (cp CollegeProfiles) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
