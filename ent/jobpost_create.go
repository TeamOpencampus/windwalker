// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"windwalker/ent/company"
	"windwalker/ent/jobpost"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// JobPostCreate is the builder for creating a JobPost entity.
type JobPostCreate struct {
	config
	mutation *JobPostMutation
	hooks    []Hook
}

// SetPosition sets the "position" field.
func (jpc *JobPostCreate) SetPosition(s string) *JobPostCreate {
	jpc.mutation.SetPosition(s)
	return jpc
}

// SetLocation sets the "location" field.
func (jpc *JobPostCreate) SetLocation(s string) *JobPostCreate {
	jpc.mutation.SetLocation(s)
	return jpc
}

// SetSalary sets the "salary" field.
func (jpc *JobPostCreate) SetSalary(s string) *JobPostCreate {
	jpc.mutation.SetSalary(s)
	return jpc
}

// SetDescription sets the "description" field.
func (jpc *JobPostCreate) SetDescription(s string) *JobPostCreate {
	jpc.mutation.SetDescription(s)
	return jpc
}

// SetTags sets the "tags" field.
func (jpc *JobPostCreate) SetTags(s []string) *JobPostCreate {
	jpc.mutation.SetTags(s)
	return jpc
}

// SetCreatedOn sets the "created_on" field.
func (jpc *JobPostCreate) SetCreatedOn(t time.Time) *JobPostCreate {
	jpc.mutation.SetCreatedOn(t)
	return jpc
}

// SetNillableCreatedOn sets the "created_on" field if the given value is not nil.
func (jpc *JobPostCreate) SetNillableCreatedOn(t *time.Time) *JobPostCreate {
	if t != nil {
		jpc.SetCreatedOn(*t)
	}
	return jpc
}

// SetID sets the "id" field.
func (jpc *JobPostCreate) SetID(x xid.ID) *JobPostCreate {
	jpc.mutation.SetID(x)
	return jpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jpc *JobPostCreate) SetNillableID(x *xid.ID) *JobPostCreate {
	if x != nil {
		jpc.SetID(*x)
	}
	return jpc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (jpc *JobPostCreate) SetUserID(id xid.ID) *JobPostCreate {
	jpc.mutation.SetUserID(id)
	return jpc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (jpc *JobPostCreate) SetNillableUserID(id *xid.ID) *JobPostCreate {
	if id != nil {
		jpc = jpc.SetUserID(*id)
	}
	return jpc
}

// SetUser sets the "user" edge to the User entity.
func (jpc *JobPostCreate) SetUser(u *User) *JobPostCreate {
	return jpc.SetUserID(u.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (jpc *JobPostCreate) SetCompanyID(id xid.ID) *JobPostCreate {
	jpc.mutation.SetCompanyID(id)
	return jpc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (jpc *JobPostCreate) SetNillableCompanyID(id *xid.ID) *JobPostCreate {
	if id != nil {
		jpc = jpc.SetCompanyID(*id)
	}
	return jpc
}

// SetCompany sets the "company" edge to the Company entity.
func (jpc *JobPostCreate) SetCompany(c *Company) *JobPostCreate {
	return jpc.SetCompanyID(c.ID)
}

// AddCandidateIDs adds the "candidates" edge to the User entity by IDs.
func (jpc *JobPostCreate) AddCandidateIDs(ids ...xid.ID) *JobPostCreate {
	jpc.mutation.AddCandidateIDs(ids...)
	return jpc
}

// AddCandidates adds the "candidates" edges to the User entity.
func (jpc *JobPostCreate) AddCandidates(u ...*User) *JobPostCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return jpc.AddCandidateIDs(ids...)
}

// Mutation returns the JobPostMutation object of the builder.
func (jpc *JobPostCreate) Mutation() *JobPostMutation {
	return jpc.mutation
}

// Save creates the JobPost in the database.
func (jpc *JobPostCreate) Save(ctx context.Context) (*JobPost, error) {
	var (
		err  error
		node *JobPost
	)
	jpc.defaults()
	if len(jpc.hooks) == 0 {
		if err = jpc.check(); err != nil {
			return nil, err
		}
		node, err = jpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jpc.check(); err != nil {
				return nil, err
			}
			jpc.mutation = mutation
			if node, err = jpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(jpc.hooks) - 1; i >= 0; i-- {
			if jpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jpc *JobPostCreate) SaveX(ctx context.Context) *JobPost {
	v, err := jpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jpc *JobPostCreate) Exec(ctx context.Context) error {
	_, err := jpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpc *JobPostCreate) ExecX(ctx context.Context) {
	if err := jpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jpc *JobPostCreate) defaults() {
	if _, ok := jpc.mutation.CreatedOn(); !ok {
		v := jobpost.DefaultCreatedOn()
		jpc.mutation.SetCreatedOn(v)
	}
	if _, ok := jpc.mutation.ID(); !ok {
		v := jobpost.DefaultID()
		jpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jpc *JobPostCreate) check() error {
	if _, ok := jpc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "JobPost.position"`)}
	}
	if v, ok := jpc.mutation.Position(); ok {
		if err := jobpost.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "JobPost.position": %w`, err)}
		}
	}
	if _, ok := jpc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "JobPost.location"`)}
	}
	if v, ok := jpc.mutation.Location(); ok {
		if err := jobpost.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "JobPost.location": %w`, err)}
		}
	}
	if _, ok := jpc.mutation.Salary(); !ok {
		return &ValidationError{Name: "salary", err: errors.New(`ent: missing required field "JobPost.salary"`)}
	}
	if v, ok := jpc.mutation.Salary(); ok {
		if err := jobpost.SalaryValidator(v); err != nil {
			return &ValidationError{Name: "salary", err: fmt.Errorf(`ent: validator failed for field "JobPost.salary": %w`, err)}
		}
	}
	if _, ok := jpc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "JobPost.description"`)}
	}
	if v, ok := jpc.mutation.Description(); ok {
		if err := jobpost.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "JobPost.description": %w`, err)}
		}
	}
	if _, ok := jpc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "JobPost.tags"`)}
	}
	if _, ok := jpc.mutation.CreatedOn(); !ok {
		return &ValidationError{Name: "created_on", err: errors.New(`ent: missing required field "JobPost.created_on"`)}
	}
	return nil
}

func (jpc *JobPostCreate) sqlSave(ctx context.Context) (*JobPost, error) {
	_node, _spec := jpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (jpc *JobPostCreate) createSpec() (*JobPost, *sqlgraph.CreateSpec) {
	var (
		_node = &JobPost{config: jpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: jobpost.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: jobpost.FieldID,
			},
		}
	)
	if id, ok := jpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jpc.mutation.Position(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldPosition,
		})
		_node.Position = value
	}
	if value, ok := jpc.mutation.Location(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldLocation,
		})
		_node.Location = value
	}
	if value, ok := jpc.mutation.Salary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldSalary,
		})
		_node.Salary = value
	}
	if value, ok := jpc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobpost.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := jpc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: jobpost.FieldTags,
		})
		_node.Tags = value
	}
	if value, ok := jpc.mutation.CreatedOn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jobpost.FieldCreatedOn,
		})
		_node.CreatedOn = value
	}
	if nodes := jpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.UserTable,
			Columns: []string{jobpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_job_posts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jpc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpost.CompanyTable,
			Columns: []string{jobpost.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_posts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jpc.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   jobpost.CandidatesTable,
			Columns: jobpost.CandidatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobPostCreateBulk is the builder for creating many JobPost entities in bulk.
type JobPostCreateBulk struct {
	config
	builders []*JobPostCreate
}

// Save creates the JobPost entities in the database.
func (jpcb *JobPostCreateBulk) Save(ctx context.Context) ([]*JobPost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jpcb.builders))
	nodes := make([]*JobPost, len(jpcb.builders))
	mutators := make([]Mutator, len(jpcb.builders))
	for i := range jpcb.builders {
		func(i int, root context.Context) {
			builder := jpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jpcb *JobPostCreateBulk) SaveX(ctx context.Context) []*JobPost {
	v, err := jpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jpcb *JobPostCreateBulk) Exec(ctx context.Context) error {
	_, err := jpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpcb *JobPostCreateBulk) ExecX(ctx context.Context) {
	if err := jpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
