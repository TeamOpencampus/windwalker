// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"windwalker/ent/collegeprofile"
	"windwalker/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// CollegeProfileCreate is the builder for creating a CollegeProfile entity.
type CollegeProfileCreate struct {
	config
	mutation *CollegeProfileMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cpc *CollegeProfileCreate) SetName(s string) *CollegeProfileCreate {
	cpc.mutation.SetName(s)
	return cpc
}

// SetPhone sets the "phone" field.
func (cpc *CollegeProfileCreate) SetPhone(s string) *CollegeProfileCreate {
	cpc.mutation.SetPhone(s)
	return cpc
}

// SetAddress sets the "address" field.
func (cpc *CollegeProfileCreate) SetAddress(s string) *CollegeProfileCreate {
	cpc.mutation.SetAddress(s)
	return cpc
}

// SetType sets the "type" field.
func (cpc *CollegeProfileCreate) SetType(s string) *CollegeProfileCreate {
	cpc.mutation.SetType(s)
	return cpc
}

// SetID sets the "id" field.
func (cpc *CollegeProfileCreate) SetID(s string) *CollegeProfileCreate {
	cpc.mutation.SetID(s)
	return cpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cpc *CollegeProfileCreate) SetNillableID(s *string) *CollegeProfileCreate {
	if s != nil {
		cpc.SetID(*s)
	}
	return cpc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cpc *CollegeProfileCreate) SetUserID(id xid.ID) *CollegeProfileCreate {
	cpc.mutation.SetUserID(id)
	return cpc
}

// SetUser sets the "user" edge to the User entity.
func (cpc *CollegeProfileCreate) SetUser(u *User) *CollegeProfileCreate {
	return cpc.SetUserID(u.ID)
}

// Mutation returns the CollegeProfileMutation object of the builder.
func (cpc *CollegeProfileCreate) Mutation() *CollegeProfileMutation {
	return cpc.mutation
}

// Save creates the CollegeProfile in the database.
func (cpc *CollegeProfileCreate) Save(ctx context.Context) (*CollegeProfile, error) {
	var (
		err  error
		node *CollegeProfile
	)
	cpc.defaults()
	if len(cpc.hooks) == 0 {
		if err = cpc.check(); err != nil {
			return nil, err
		}
		node, err = cpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CollegeProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpc.check(); err != nil {
				return nil, err
			}
			cpc.mutation = mutation
			if node, err = cpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cpc.hooks) - 1; i >= 0; i-- {
			if cpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CollegeProfileCreate) SaveX(ctx context.Context) *CollegeProfile {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CollegeProfileCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CollegeProfileCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CollegeProfileCreate) defaults() {
	if _, ok := cpc.mutation.ID(); !ok {
		v := collegeprofile.DefaultID()
		cpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CollegeProfileCreate) check() error {
	if _, ok := cpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CollegeProfile.name"`)}
	}
	if v, ok := cpc.mutation.Name(); ok {
		if err := collegeprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CollegeProfile.name": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "CollegeProfile.phone"`)}
	}
	if v, ok := cpc.mutation.Phone(); ok {
		if err := collegeprofile.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "CollegeProfile.phone": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "CollegeProfile.address"`)}
	}
	if v, ok := cpc.mutation.Address(); ok {
		if err := collegeprofile.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "CollegeProfile.address": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "CollegeProfile.type"`)}
	}
	if v, ok := cpc.mutation.GetType(); ok {
		if err := collegeprofile.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CollegeProfile.type": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "CollegeProfile.user"`)}
	}
	return nil
}

func (cpc *CollegeProfileCreate) sqlSave(ctx context.Context) (*CollegeProfile, error) {
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CollegeProfile.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (cpc *CollegeProfileCreate) createSpec() (*CollegeProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &CollegeProfile{config: cpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: collegeprofile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: collegeprofile.FieldID,
			},
		}
	)
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collegeprofile.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cpc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collegeprofile.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := cpc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collegeprofile.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := cpc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collegeprofile.FieldType,
		})
		_node.Type = value
	}
	if nodes := cpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   collegeprofile.UserTable,
			Columns: []string{collegeprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_college_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CollegeProfileCreateBulk is the builder for creating many CollegeProfile entities in bulk.
type CollegeProfileCreateBulk struct {
	config
	builders []*CollegeProfileCreate
}

// Save creates the CollegeProfile entities in the database.
func (cpcb *CollegeProfileCreateBulk) Save(ctx context.Context) ([]*CollegeProfile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CollegeProfile, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CollegeProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CollegeProfileCreateBulk) SaveX(ctx context.Context) []*CollegeProfile {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CollegeProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CollegeProfileCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
